
DSP_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08009c48  08009c48  00019c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c8  0800a3c8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c8  0800a3c8  0001a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d0  0800a3d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a3d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000485c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a44  20004a44  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4ef  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002350  00000000  00000000  0002e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b68  00000000  00000000  000316d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022179  00000000  00000000  00032240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d640  00000000  00000000  000543b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc474  00000000  00000000  000619f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c3  00000000  00000000  0012de6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ba8  00000000  00000000  0012df30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001229  00000000  00000000  00132ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c2c 	.word	0x08009c2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009c2c 	.word	0x08009c2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800100c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001014:	e000      	b.n	8001018 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001016:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001022:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f000 fd45 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f877 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 f973 	bl	8001334 <MX_GPIO_Init>
  MX_DMA_Init();
 800104e:	f000 f951 	bl	80012f4 <MX_DMA_Init>
  MX_DAC_Init();
 8001052:	f000 f8d9 	bl	8001208 <MX_DAC_Init>
  MX_TIM2_Init();
 8001056:	f000 f901 	bl	800125c <MX_TIM2_Init>
//  for(int k = 0; k < TEST_LENGTH_SAMPLES; k++)
//	  {
//	  	  inputF32[k] = testInput_f32_1kHz_15kHz[k];
//	  	  outputF32[k] = testOutput[k];
//	  }
  inputF32 = &testInput_f32_1kHz_15kHz[0];
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <main+0xcc>)
 800105c:	4a2b      	ldr	r2, [pc, #172]	; (800110c <main+0xd0>)
 800105e:	601a      	str	r2, [r3, #0]
  outputF32 = &testOutput[0];
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <main+0xd4>)
 8001062:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <main+0xd8>)
 8001064:	601a      	str	r2, [r3, #0]

  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <main+0xdc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <main+0xe0>)
 800106e:	4a2c      	ldr	r2, [pc, #176]	; (8001120 <main+0xe4>)
 8001070:	211d      	movs	r1, #29
 8001072:	482c      	ldr	r0, [pc, #176]	; (8001124 <main+0xe8>)
 8001074:	f002 fe7e 	bl	8003d74 <arm_fir_init_f32>
  HAL_TIM_Base_Start(&htim2);
 8001078:	482b      	ldr	r0, [pc, #172]	; (8001128 <main+0xec>)
 800107a:	f002 fa4b 	bl	8003514 <HAL_TIM_Base_Start>
  sinval();
 800107e:	f000 fa23 	bl	80014c8 <sinval>
  sinval2();
 8001082:	f000 fa7d 	bl	8001580 <sinval2>
  noise();
 8001086:	f000 f9f5 	bl	8001474 <noise>
  sum_signal();
 800108a:	f000 f9a5 	bl	80013d8 <sum_signal>
  fir();
 800108e:	f000 fad7 	bl	8001640 <fir>

	for(int a = 0; a < TEST_LENGTH_SAMPLES; a++ )
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e011      	b.n	80010bc <main+0x80>
		//printf("%f\n", outputF32[a]);
		tmp2[a] = (uint32_t)outputF32[a];
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <main+0xd4>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010aa:	ee17 1a90 	vmov	r1, s15
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <main+0xf0>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int a = 0; a < TEST_LENGTH_SAMPLES; a++ )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010c2:	dbe9      	blt.n	8001098 <main+0x5c>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, tmp2,TEST_LENGTH_SAMPLES, DAC_ALIGN_12B_R);
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <main+0xf0>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <main+0xf4>)
 80010d2:	f000 fea3 	bl	8001e1c <HAL_DAC_Start_DMA>
	for(int a = 0; a < TEST_LENGTH_SAMPLES; a++ )
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	e010      	b.n	80010fe <main+0xc2>
		printf("%f\n", outputF32[a]);
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <main+0xd4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa2d 	bl	8000548 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <main+0xf8>)
 80010f4:	f003 ff60 	bl	8004fb8 <iprintf>
	for(int a = 0; a < TEST_LENGTH_SAMPLES; a++ )
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001104:	dbea      	blt.n	80010dc <main+0xa0>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001106:	e7fe      	b.n	8001106 <main+0xca>
 8001108:	20001ae4 	.word	0x20001ae4
 800110c:	2000420c 	.word	0x2000420c
 8001110:	200012a4 	.word	0x200012a4
 8001114:	200022b8 	.word	0x200022b8
 8001118:	20000000 	.word	0x20000000
 800111c:	20000204 	.word	0x20000204
 8001120:	08009c4c 	.word	0x08009c4c
 8001124:	20001a78 	.word	0x20001a78
 8001128:	200049e0 	.word	0x200049e0
 800112c:	200012a8 	.word	0x200012a8
 8001130:	20003258 	.word	0x20003258
 8001134:	08009c48 	.word	0x08009c48

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f8b4 	bl	80042b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <SystemClock_Config+0xc8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a26      	ldr	r2, [pc, #152]	; (8001200 <SystemClock_Config+0xc8>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <SystemClock_Config+0xc8>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <SystemClock_Config+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <SystemClock_Config+0xcc>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <SystemClock_Config+0xcc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011ac:	2354      	movs	r3, #84	; 0x54
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fd19 	bl	8002bf4 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c8:	f000 fa92 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2102      	movs	r1, #2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 ff7b 	bl	80030e4 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f4:	f000 fa7c 	bl	80016f0 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_DAC_Init+0x4c>)
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <MX_DAC_Init+0x50>)
 800121a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_DAC_Init+0x4c>)
 800121e:	f000 fdda 	bl	8001dd6 <HAL_DAC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001228:	f000 fa62 	bl	80016f0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800122c:	2324      	movs	r3, #36	; 0x24
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_DAC_Init+0x4c>)
 800123c:	f000 feda 	bl	8001ff4 <HAL_DAC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001246:	f000 fa53 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20003258 	.word	0x20003258
 8001258:	40007400 	.word	0x40007400

0800125c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_TIM2_Init+0x94>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_TIM2_Init+0x94>)
 8001282:	2253      	movs	r2, #83	; 0x53
 8001284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_TIM2_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_TIM2_Init+0x94>)
 800128e:	2209      	movs	r2, #9
 8001290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_TIM2_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_TIM2_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_TIM2_Init+0x94>)
 80012a0:	f002 f8e8 	bl	8003474 <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80012aa:	f000 fa21 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_TIM2_Init+0x94>)
 80012bc:	f002 fa9a 	bl	80037f4 <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 fa13 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ca:	2320      	movs	r3, #32
 80012cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_TIM2_Init+0x94>)
 80012d8:	f002 fcbc 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80012e2:	f000 fa05 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200049e0 	.word	0x200049e0

080012f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_DMA_Init+0x3c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <MX_DMA_Init+0x3c>)
 8001304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_DMA_Init+0x3c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2010      	movs	r0, #16
 800131c:	f000 fd25 	bl	8001d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001320:	2010      	movs	r0, #16
 8001322:	f000 fd3e 	bl	8001da2 <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_GPIO_Init+0x9c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <MX_GPIO_Init+0x9c>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_GPIO_Init+0x9c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_GPIO_Init+0x9c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <MX_GPIO_Init+0x9c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_GPIO_Init+0x9c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_GPIO_Init+0x9c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_GPIO_Init+0x9c>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_GPIO_Init+0x9c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0xa0>)
 80013a6:	f001 fc0b 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0xa0>)
 80013c4:	f001 fa60 	bl	8002888 <HAL_GPIO_Init>

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020c00 	.word	0x40020c00

080013d8 <sum_signal>:

/* USER CODE BEGIN 4 */

void sum_signal() //Generating Sinewave with noise ==> signal before filtering
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e032      	b.n	800144a <sum_signal+0x72>
		{
		testInput_f32_1kHz_15kHz[i] = (float32_t)val_noise[i] + (float32_t)val[i] + (float32_t)val2[i];
 80013e4:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <sum_signal+0x88>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <sum_signal+0x8c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <sum_signal+0x90>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <sum_signal+0x94>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	edc3 7a00 	vstr	s15, [r3]
		tmp[i] = (uint32_t)testInput_f32_1kHz_15kHz[i];
 8001428:	4a10      	ldr	r2, [pc, #64]	; (800146c <sum_signal+0x94>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001438:	ee17 1a90 	vmov	r1, s15
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <sum_signal+0x98>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001450:	dbc8      	blt.n	80013e4 <sum_signal+0xc>
		//printf("%f\n", testInput_f32_1kHz_15kHz[i]);

		}

}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000ad4 	.word	0x20000ad4
 8001464:	20001ae8 	.word	0x20001ae8
 8001468:	20002a88 	.word	0x20002a88
 800146c:	2000420c 	.word	0x2000420c
 8001470:	20000300 	.word	0x20000300

08001474 <noise>:

void noise()  //Noise generation
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e016      	b.n	80014ae <noise+0x3a>
			val_noise[i] = (rand() % 12)*((0xFF+1)/2);
 8001480:	f003 fdb2 	bl	8004fe8 <rand>
 8001484:	4601      	mov	r1, r0
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <noise+0x4c>)
 8001488:	fb83 2301 	smull	r2, r3, r3, r1
 800148c:	105a      	asrs	r2, r3, #1
 800148e:	17cb      	asrs	r3, r1, #31
 8001490:	1ad2      	subs	r2, r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	1aca      	subs	r2, r1, r3
 800149c:	01d3      	lsls	r3, r2, #7
 800149e:	4619      	mov	r1, r3
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <noise+0x50>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014b4:	dbe4      	blt.n	8001480 <noise+0xc>

}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2aaaaaab 	.word	0x2aaaaaab
 80014c4:	20000ad4 	.word	0x20000ad4

080014c8 <sinval>:

void sinval() //Sinewave generation
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e03f      	b.n	8001554 <sinval+0x8c>
		val[i] = ((sin(i*pi*2/TEST_LENGTH_SAMPLES)+1)*((0xFFF+1)/2))/3; //divide by 3 to make amplitude smaller
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001568 <sinval+0xa0>
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800156c <sinval+0xa4>
 80014ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014f2:	ee16 0a90 	vmov	r0, s13
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b10 	vmov	d0, r2, r3
 8001502:	f007 fb5d 	bl	8008bc0 <sin>
 8001506:	ec51 0b10 	vmov	r0, r1, d0
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <sinval+0xa8>)
 8001510:	f7fe febc 	bl	800028c <__adddf3>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <sinval+0xac>)
 8001522:	f7ff f869 	bl	80005f8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <sinval+0xb0>)
 8001534:	f7ff f98a 	bl	800084c <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb32 	bl	8000ba8 <__aeabi_d2uiz>
 8001544:	4602      	mov	r2, r0
 8001546:	490d      	ldr	r1, [pc, #52]	; (800157c <sinval+0xb4>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3301      	adds	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800155a:	dbbb      	blt.n	80014d4 <sinval+0xc>

}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40490fd8 	.word	0x40490fd8
 800156c:	43fa0000 	.word	0x43fa0000
 8001570:	3ff00000 	.word	0x3ff00000
 8001574:	40a00000 	.word	0x40a00000
 8001578:	40080000 	.word	0x40080000
 800157c:	20001ae8 	.word	0x20001ae8

08001580 <sinval2>:

void sinval2() //Sinewave generation
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e043      	b.n	8001614 <sinval2+0x94>
		val2[i] = ((sin((10*i*pi*2/TEST_LENGTH_SAMPLES))+1)*((0xFFF+1)/2))/3; //divide by 3 to make amplitude smaller
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001628 <sinval2+0xa8>
 80015a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015aa:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800162c <sinval2+0xac>
 80015ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015b2:	ee16 0a90 	vmov	r0, s13
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b10 	vmov	d0, r2, r3
 80015c2:	f007 fafd 	bl	8008bc0 <sin>
 80015c6:	ec51 0b10 	vmov	r0, r1, d0
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <sinval2+0xb0>)
 80015d0:	f7fe fe5c 	bl	800028c <__adddf3>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <sinval2+0xb4>)
 80015e2:	f7ff f809 	bl	80005f8 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <sinval2+0xb8>)
 80015f4:	f7ff f92a 	bl	800084c <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fad2 	bl	8000ba8 <__aeabi_d2uiz>
 8001604:	4602      	mov	r2, r0
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <sinval2+0xbc>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < TEST_LENGTH_SAMPLES; i++)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3301      	adds	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800161a:	dbb7      	blt.n	800158c <sinval2+0xc>

}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40490fd8 	.word	0x40490fd8
 800162c:	43fa0000 	.word	0x43fa0000
 8001630:	3ff00000 	.word	0x3ff00000
 8001634:	40a00000 	.word	0x40a00000
 8001638:	40080000 	.word	0x40080000
 800163c:	20002a88 	.word	0x20002a88

08001640 <fir>:
//			printf("%d\n", conv[i]);
//		}
//}

void fir()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	for(j=0; j < numBlocks; j++)
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <fir+0x5c>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e01e      	b.n	800168a <fir+0x4a>
		{
			arm_fir_f32(&S, inputF32 + (j * blockSize), outputF32 + (j * blockSize), blockSize);
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <fir+0x60>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <fir+0x5c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4913      	ldr	r1, [pc, #76]	; (80016a4 <fir+0x64>)
 8001656:	6809      	ldr	r1, [r1, #0]
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	18d0      	adds	r0, r2, r3
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <fir+0x68>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <fir+0x5c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <fir+0x64>)
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	441a      	add	r2, r3
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <fir+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4601      	mov	r1, r0
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <fir+0x6c>)
 800167c:	f002 fb8c 	bl	8003d98 <arm_fir_f32>
	for(j=0; j < numBlocks; j++)
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <fir+0x5c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <fir+0x5c>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <fir+0x5c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <fir+0x70>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3da      	bcc.n	800164c <fir+0xc>
//			for(int a = j; a < a + blockSize; a++ )
//				printf("%f\n", outputF32[a]);
		}

}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000ad0 	.word	0x20000ad0
 80016a0:	20001ae4 	.word	0x20001ae4
 80016a4:	20000000 	.word	0x20000000
 80016a8:	200012a4 	.word	0x200012a4
 80016ac:	20001a78 	.word	0x20001a78
 80016b0:	20000004 	.word	0x20000004

080016b4 <_write>:

int _write(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e009      	b.n	80016de <_write+0x2a>
    ITM_SendChar((*ptr++));
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc8a 	bl	8000fec <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbf1      	blt.n	80016ca <_write+0x16>
  return len;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_MspInit+0x4c>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x4c>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <HAL_DAC_MspInit+0xdc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d158      	bne.n	8001820 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_DAC_MspInit+0xe0>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a2d      	ldr	r2, [pc, #180]	; (800182c <HAL_DAC_MspInit+0xe0>)
 8001778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_DAC_MspInit+0xe0>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_DAC_MspInit+0xe0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_DAC_MspInit+0xe0>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_DAC_MspInit+0xe0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017a6:	2310      	movs	r3, #16
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017aa:	2303      	movs	r3, #3
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	481d      	ldr	r0, [pc, #116]	; (8001830 <HAL_DAC_MspInit+0xe4>)
 80017ba:	f001 f865 	bl	8002888 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_DAC_MspInit+0xec>)
 80017c2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017ca:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017de:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 8001806:	f000 fccf 	bl	80021a8 <HAL_DMA_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001810:	f7ff ff6e 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_DAC_MspInit+0xe8>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40007400 	.word	0x40007400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	20001a84 	.word	0x20001a84
 8001838:	40026088 	.word	0x40026088

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d115      	bne.n	800187a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	201c      	movs	r0, #28
 8001870:	f000 fa7b 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001874:	201c      	movs	r0, #28
 8001876:	f000 fa94 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f000 f94e 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA1_Stream5_IRQHandler+0x10>)
 80018e2:	f000 fd67 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20001a84 	.word	0x20001a84

080018f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM2_IRQHandler+0x10>)
 80018f6:	f001 fe75 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200049e0 	.word	0x200049e0

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800191e:	f002 fc9f 	bl	8004260 <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
	return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001946:	e7fe      	b.n	8001946 <_exit+0x12>

08001948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e00a      	b.n	8001970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195a:	f3af 8000 	nop.w
 800195e:	4601      	mov	r1, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf0      	blt.n	800195a <_read+0x12>
	}

return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019aa:	605a      	str	r2, [r3, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_isatty>:

int _isatty(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	return 1;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f002 fc20 	bl	8004260 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20020000 	.word	0x20020000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	200002f4 	.word	0x200002f4
 8001a54:	20004a48 	.word	0x20004a48

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a98:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff ffd7 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f002 fbdf 	bl	800426c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff fac5 	bl	800103c <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ac0:	0800a3d8 	.word	0x0800a3d8
  ldr r2, =_sbss
 8001ac4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ac8:	20004a44 	.word	0x20004a44

08001acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f92b 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fdfa 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f943 	bl	8001dbe <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f90b 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000010 	.word	0x20000010
 8001b98:	20004a30 	.word	0x20004a30

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20004a30 	.word	0x20004a30

08001bb4 <__NVIC_SetPriorityGrouping>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e014      	b.n	8001e12 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fca7 	bl	800174c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	795b      	ldrb	r3, [r3, #5]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_DAC_Start_DMA+0x22>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0ab      	b.n	8001f96 <HAL_DAC_Start_DMA+0x17a>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2202      	movs	r2, #2
 8001e48:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d12f      	bne.n	8001eb0 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_DAC_Start_DMA+0x184>)
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_DAC_Start_DMA+0x188>)
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_DAC_Start_DMA+0x18c>)
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e76:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d013      	beq.n	8001ea6 <HAL_DAC_Start_DMA+0x8a>
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d845      	bhi.n	8001f10 <HAL_DAC_Start_DMA+0xf4>
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_DAC_Start_DMA+0x76>
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d005      	beq.n	8001e9c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001e90:	e03e      	b.n	8001f10 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3308      	adds	r3, #8
 8001e98:	613b      	str	r3, [r7, #16]
        break;
 8001e9a:	e03c      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	613b      	str	r3, [r7, #16]
        break;
 8001ea4:	e037      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3310      	adds	r3, #16
 8001eac:	613b      	str	r3, [r7, #16]
        break;
 8001eae:	e032      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_DAC_Start_DMA+0x190>)
 8001eb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a3c      	ldr	r2, [pc, #240]	; (8001fb0 <HAL_DAC_Start_DMA+0x194>)
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_DAC_Start_DMA+0x198>)
 8001ec6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d013      	beq.n	8001f06 <HAL_DAC_Start_DMA+0xea>
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d817      	bhi.n	8001f14 <HAL_DAC_Start_DMA+0xf8>
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_DAC_Start_DMA+0xd6>
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d005      	beq.n	8001efc <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001ef0:	e010      	b.n	8001f14 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3314      	adds	r3, #20
 8001ef8:	613b      	str	r3, [r7, #16]
        break;
 8001efa:	e00c      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3318      	adds	r3, #24
 8001f02:	613b      	str	r3, [r7, #16]
        break;
 8001f04:	e007      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	331c      	adds	r3, #28
 8001f0c:	613b      	str	r3, [r7, #16]
        break;
 8001f0e:	e002      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001f10:	bf00      	nop
 8001f12:	e000      	b.n	8001f16 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001f14:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6898      	ldr	r0, [r3, #8]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	f000 f9e5 	bl	8002304 <HAL_DMA_Start_IT>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]
 8001f3e:	e010      	b.n	8001f62 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	68d8      	ldr	r0, [r3, #12]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	f000 f9d3 	bl	8002304 <HAL_DMA_Start_IT>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e005      	b.n	8001f94 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	08002093 	.word	0x08002093
 8001fa4:	080020b5 	.word	0x080020b5
 8001fa8:	080020d1 	.word	0x080020d1
 8001fac:	0800213b 	.word	0x0800213b
 8001fb0:	0800215d 	.word	0x0800215d
 8001fb4:	08002179 	.word	0x08002179

08001fb8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	795b      	ldrb	r3, [r3, #5]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_DAC_ConfigChannel+0x18>
 8002008:	2302      	movs	r3, #2
 800200a:	e03c      	b.n	8002086 <HAL_DAC_ConfigChannel+0x92>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2202      	movs	r2, #2
 8002016:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	f640 72fe 	movw	r2, #4094	; 0xffe
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4013      	ands	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	22c0      	movs	r2, #192	; 0xc0
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	400a      	ands	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff ff89 	bl	8001fb8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	711a      	strb	r2, [r3, #4]
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff ff82 	bl	8001fcc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff ff78 	bl	8001fe0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	711a      	strb	r2, [r3, #4]
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff ffd8 	bl	80020fe <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	711a      	strb	r2, [r3, #4]
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ffd1 	bl	8002112 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff ffc7 	bl	8002126 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	711a      	strb	r2, [r3, #4]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff fcf2 	bl	8001b9c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e099      	b.n	80022f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e4:	e00f      	b.n	8002206 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e6:	f7ff fcd9 	bl	8001b9c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d908      	bls.n	8002206 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2203      	movs	r2, #3
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e078      	b.n	80022f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e8      	bne.n	80021e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_DMA_Init+0x158>)
 8002220:	4013      	ands	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002232:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2b04      	cmp	r3, #4
 800225e:	d107      	bne.n	8002270 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4313      	orrs	r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f023 0307 	bic.w	r3, r3, #7
 8002286:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b04      	cmp	r3, #4
 8002298:	d117      	bne.n	80022ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa6f 	bl	8002790 <DMA_CheckFifoParam>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022c6:	2301      	movs	r3, #1
 80022c8:	e016      	b.n	80022f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa26 	bl	8002724 <DMA_CalcBaseAndBitshift>
 80022d8:	4603      	mov	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	f010803f 	.word	0xf010803f

08002304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_DMA_Start_IT+0x26>
 8002326:	2302      	movs	r3, #2
 8002328:	e040      	b.n	80023ac <HAL_DMA_Start_IT+0xa8>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12f      	bne.n	800239e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f9b8 	bl	80026c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0216 	orr.w	r2, r2, #22
 8002372:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0208 	orr.w	r2, r2, #8
 800238a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e005      	b.n	80023aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_DMA_IRQHandler+0x258>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a92      	ldr	r2, [pc, #584]	; (8002610 <HAL_DMA_IRQHandler+0x25c>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2208      	movs	r2, #8
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2208      	movs	r2, #8
 800240e:	409a      	lsls	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2201      	movs	r2, #1
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2204      	movs	r2, #4
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d012      	beq.n	800248c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2204      	movs	r2, #4
 800247a:	409a      	lsls	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2210      	movs	r2, #16
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d043      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03c      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2210      	movs	r2, #16
 80024b0:	409a      	lsls	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d024      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
 80024e2:	e01f      	b.n	8002524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e016      	b.n	8002524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0208 	bic.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2220      	movs	r2, #32
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 808e 	beq.w	8002652 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8086 	beq.w	8002652 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2220      	movs	r2, #32
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b05      	cmp	r3, #5
 800255c:	d136      	bne.n	80025cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0216 	bic.w	r2, r2, #22
 800256c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_DMA_IRQHandler+0x1da>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	223f      	movs	r2, #63	; 0x3f
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07d      	beq.n	80026be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
        }
        return;
 80025ca:	e078      	b.n	80026be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01c      	beq.n	8002614 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d030      	beq.n	8002652 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
 80025f8:	e02b      	b.n	8002652 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d027      	beq.n	8002652 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e022      	b.n	8002652 <HAL_DMA_IRQHandler+0x29e>
 800260c:	20000008 	.word	0x20000008
 8002610:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0210 	bic.w	r2, r2, #16
 8002630:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	2b00      	cmp	r3, #0
 8002658:	d032      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d022      	beq.n	80026ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d307      	bcc.n	800269a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f2      	bne.n	800267e <HAL_DMA_IRQHandler+0x2ca>
 8002698:	e000      	b.n	800269c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800269a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e000      	b.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026be:	bf00      	nop
    }
  }
}
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop

080026c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d108      	bne.n	8002708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002706:	e007      	b.n	8002718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b10      	subs	r3, #16
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <DMA_CalcBaseAndBitshift+0x64>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <DMA_CalcBaseAndBitshift+0x68>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d909      	bls.n	8002766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	1d1a      	adds	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	659a      	str	r2, [r3, #88]	; 0x58
 8002764:	e007      	b.n	8002776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	aaaaaaab 	.word	0xaaaaaaab
 800278c:	08009cd0 	.word	0x08009cd0

08002790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11f      	bne.n	80027ea <DMA_CheckFifoParam+0x5a>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d856      	bhi.n	800285e <DMA_CheckFifoParam+0xce>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <DMA_CheckFifoParam+0x28>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027db 	.word	0x080027db
 80027c0:	080027c9 	.word	0x080027c9
 80027c4:	0800285f 	.word	0x0800285f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d046      	beq.n	8002862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d8:	e043      	b.n	8002862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027e2:	d140      	bne.n	8002866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e03d      	b.n	8002866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f2:	d121      	bne.n	8002838 <DMA_CheckFifoParam+0xa8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d837      	bhi.n	800286a <DMA_CheckFifoParam+0xda>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <DMA_CheckFifoParam+0x70>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002811 	.word	0x08002811
 8002804:	08002817 	.word	0x08002817
 8002808:	08002811 	.word	0x08002811
 800280c:	08002829 	.word	0x08002829
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e030      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d025      	beq.n	800286e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002826:	e022      	b.n	800286e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002830:	d11f      	bne.n	8002872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002836:	e01c      	b.n	8002872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d903      	bls.n	8002846 <DMA_CheckFifoParam+0xb6>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d003      	beq.n	800284c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002844:	e018      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      break;
 800284a:	e015      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e00b      	b.n	8002876 <DMA_CheckFifoParam+0xe6>
      break;
 800285e:	bf00      	nop
 8002860:	e00a      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e008      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
 8002868:	e006      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
 800286c:	e004      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e002      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;   
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
    }
  } 
  
  return status; 
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e16b      	b.n	8002b7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 815a 	bne.w	8002b76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d005      	beq.n	80028da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d130      	bne.n	800293c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0201 	and.w	r2, r3, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d017      	beq.n	8002978 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d123      	bne.n	80029cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80b4 	beq.w	8002b76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b60      	ldr	r3, [pc, #384]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2a:	4a5b      	ldr	r2, [pc, #364]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_GPIO_Init+0x314>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02b      	beq.n	8002aae <HAL_GPIO_Init+0x226>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a51      	ldr	r2, [pc, #324]	; (8002ba0 <HAL_GPIO_Init+0x318>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d025      	beq.n	8002aaa <HAL_GPIO_Init+0x222>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <HAL_GPIO_Init+0x21e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4f      	ldr	r2, [pc, #316]	; (8002ba8 <HAL_GPIO_Init+0x320>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d019      	beq.n	8002aa2 <HAL_GPIO_Init+0x21a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0x216>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4d      	ldr	r2, [pc, #308]	; (8002bb0 <HAL_GPIO_Init+0x328>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00d      	beq.n	8002a9a <HAL_GPIO_Init+0x212>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	; (8002bb8 <HAL_GPIO_Init+0x330>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x20a>
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e00e      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e00c      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a96:	2306      	movs	r3, #6
 8002a98:	e00a      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a9a:	2305      	movs	r3, #5
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f002 0203 	and.w	r2, r2, #3
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af2:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af8:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	f67f ae90 	bls.w	80028a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40021400 	.word	0x40021400
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40021c00 	.word	0x40021c00
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bdc:	e003      	b.n	8002be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e264      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d075      	beq.n	8002cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c12:	4ba3      	ldr	r3, [pc, #652]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d00c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4ba0      	ldr	r3, [pc, #640]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d112      	bne.n	8002c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b9d      	ldr	r3, [pc, #628]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c36:	d10b      	bne.n	8002c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	4b99      	ldr	r3, [pc, #612]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05b      	beq.n	8002cfc <HAL_RCC_OscConfig+0x108>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d157      	bne.n	8002cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e23f      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCC_OscConfig+0x74>
 8002c5a:	4b91      	ldr	r3, [pc, #580]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a90      	ldr	r2, [pc, #576]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xb0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x98>
 8002c72:	4b8b      	ldr	r3, [pc, #556]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a8a      	ldr	r2, [pc, #552]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	4b84      	ldr	r3, [pc, #528]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b81      	ldr	r3, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe ff76 	bl	8001b9c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe ff72 	bl	8001b9c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e204      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xc0>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe ff62 	bl	8001b9c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe ff5e 	bl	8001b9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1f0      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0xe8>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b62      	ldr	r3, [pc, #392]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x152>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1c4      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b56      	ldr	r3, [pc, #344]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4952      	ldr	r1, [pc, #328]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <HAL_RCC_OscConfig+0x2b0>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe ff17 	bl	8001b9c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe ff13 	bl	8001b9c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1a5      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4940      	ldr	r1, [pc, #256]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_OscConfig+0x2b0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fef6 	bl	8001b9c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db4:	f7fe fef2 	bl	8001b9c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e184      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d030      	beq.n	8002e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCC_OscConfig+0x2b4>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fed6 	bl	8001b9c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fed2 	bl	8001b9c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e164      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x200>
 8002e12:	e015      	b.n	8002e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_OscConfig+0x2b4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe febf 	bl	8001b9c <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fe febb 	bl	8001b9c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e14d      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a0 	beq.w	8002f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x2b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d121      	bne.n	8002ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_RCC_OscConfig+0x2b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_RCC_OscConfig+0x2b8>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fe81 	bl	8001b9c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2ce>
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470000 	.word	0x42470000
 8002ea8:	42470e80 	.word	0x42470e80
 8002eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe fe74 	bl	8001b9c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e106      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCC_OscConfig+0x4e4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2f0>
 8002ed6:	4b81      	ldr	r3, [pc, #516]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a80      	ldr	r2, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCC_OscConfig+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x312>
 8002eec:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x32a>
 8002f06:	4b75      	ldr	r3, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a74      	ldr	r2, [pc, #464]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe fe39 	bl	8001b9c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe fe35 	bl	8001b9c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0c5      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ee      	beq.n	8002f2e <HAL_RCC_OscConfig+0x33a>
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fe23 	bl	8001b9c <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fe fe1f 	bl	8001b9c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0af      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ee      	bne.n	8002f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f82:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a55      	ldr	r2, [pc, #340]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 809b 	beq.w	80030ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d05c      	beq.n	800305e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d141      	bne.n	8003030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_OscConfig+0x4ec>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fdf3 	bl	8001b9c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe fdef 	bl	8001b9c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e081      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	019b      	lsls	r3, r3, #6
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	4937      	ldr	r1, [pc, #220]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_OscConfig+0x4ec>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fdc8 	bl	8001b9c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fdc4 	bl	8001b9c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e056      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x41c>
 800302e:	e04e      	b.n	80030ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_OscConfig+0x4ec>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fdb1 	bl	8001b9c <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fdad 	bl	8001b9c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e03f      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x44a>
 800305c:	e037      	b.n	80030ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e032      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_RCC_OscConfig+0x4e8>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d028      	beq.n	80030ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d121      	bne.n	80030ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d11a      	bne.n	80030ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d111      	bne.n	80030ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40007000 	.word	0x40007000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	42470060 	.word	0x42470060

080030e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0cc      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b68      	ldr	r3, [pc, #416]	; (800329c <HAL_RCC_ClockConfig+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d90c      	bls.n	8003120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b65      	ldr	r3, [pc, #404]	; (800329c <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0b8      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a58      	ldr	r2, [pc, #352]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a52      	ldr	r2, [pc, #328]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800315a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	494d      	ldr	r1, [pc, #308]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d044      	beq.n	8003204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d119      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e07f      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06f      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e067      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4934      	ldr	r1, [pc, #208]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fce2 	bl	8001b9c <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fe fcde 	bl	8001b9c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e04f      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d20c      	bcs.n	800322c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e032      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4916      	ldr	r1, [pc, #88]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	490e      	ldr	r1, [pc, #56]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800326a:	f000 f821 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490a      	ldr	r1, [pc, #40]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fc42 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023c00 	.word	0x40023c00
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08009cc0 	.word	0x08009cc0
 80032a8:	20000008 	.word	0x20000008
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	2300      	movs	r3, #0
 80032c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c8:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d00d      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x40>
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	f200 80bd 	bhi.w	8003454 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x34>
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x3a>
 80032e2:	e0b7      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b61      	ldr	r3, [pc, #388]	; (800346c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032e6:	60bb      	str	r3, [r7, #8]
       break;
 80032e8:	e0b7      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032ec:	60bb      	str	r3, [r7, #8]
      break;
 80032ee:	e0b4      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f0:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d04d      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	461a      	mov	r2, r3
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	ea02 0800 	and.w	r8, r2, r0
 800331e:	ea03 0901 	and.w	r9, r3, r1
 8003322:	4640      	mov	r0, r8
 8003324:	4649      	mov	r1, r9
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	014b      	lsls	r3, r1, #5
 8003330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003334:	0142      	lsls	r2, r0, #5
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	ebb0 0008 	subs.w	r0, r0, r8
 800333e:	eb61 0109 	sbc.w	r1, r1, r9
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	018b      	lsls	r3, r1, #6
 800334c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003350:	0182      	lsls	r2, r0, #6
 8003352:	1a12      	subs	r2, r2, r0
 8003354:	eb63 0301 	sbc.w	r3, r3, r1
 8003358:	f04f 0000 	mov.w	r0, #0
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	00d9      	lsls	r1, r3, #3
 8003362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003366:	00d0      	lsls	r0, r2, #3
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	eb12 0208 	adds.w	r2, r2, r8
 8003370:	eb43 0309 	adc.w	r3, r3, r9
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	0259      	lsls	r1, r3, #9
 800337e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003382:	0250      	lsls	r0, r2, #9
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f7fd fc78 	bl	8000c88 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e04a      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	461a      	mov	r2, r3
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	ea02 0400 	and.w	r4, r2, r0
 80033ba:	ea03 0501 	and.w	r5, r3, r1
 80033be:	4620      	mov	r0, r4
 80033c0:	4629      	mov	r1, r5
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	014b      	lsls	r3, r1, #5
 80033cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033d0:	0142      	lsls	r2, r0, #5
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	1b00      	subs	r0, r0, r4
 80033d8:	eb61 0105 	sbc.w	r1, r1, r5
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	018b      	lsls	r3, r1, #6
 80033e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ea:	0182      	lsls	r2, r0, #6
 80033ec:	1a12      	subs	r2, r2, r0
 80033ee:	eb63 0301 	sbc.w	r3, r3, r1
 80033f2:	f04f 0000 	mov.w	r0, #0
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	00d9      	lsls	r1, r3, #3
 80033fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003400:	00d0      	lsls	r0, r2, #3
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	1912      	adds	r2, r2, r4
 8003408:	eb45 0303 	adc.w	r3, r5, r3
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0299      	lsls	r1, r3, #10
 8003416:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800341a:	0290      	lsls	r0, r2, #10
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	f7fd fc2c 	bl	8000c88 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	60bb      	str	r3, [r7, #8]
      break;
 8003452:	e002      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003456:	60bb      	str	r3, [r7, #8]
      break;
 8003458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345a:	68bb      	ldr	r3, [r7, #8]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	00f42400 	.word	0x00f42400
 8003470:	007a1200 	.word	0x007a1200

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe f9ce 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fa94 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e046      	b.n	80035ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <HAL_TIM_Base_Start+0xb4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d022      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d01d      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_TIM_Base_Start+0xb8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d018      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <HAL_TIM_Base_Start+0xbc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_TIM_Base_Start+0xc0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_TIM_Base_Start+0xc4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_TIM_Base_Start+0xc8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_TIM_Base_Start+0x70>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_TIM_Base_Start+0xcc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b06      	cmp	r3, #6
 8003594:	d010      	beq.n	80035b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	e007      	b.n	80035b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40010400 	.word	0x40010400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40001800 	.word	0x40001800

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9bc 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9ae 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f9bf 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f992 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f984 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f995 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f968 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f95a 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f96b 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f93e 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f930 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f941 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f90a 	bl	800397c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fae6 	bl	8003d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f906 	bl	80039cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0220 	mvn.w	r2, #32
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fab0 	bl	8003d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIM_ConfigClockSource+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e0b3      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x180>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800382a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d03e      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xd0>
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	f200 8087 	bhi.w	800395c <HAL_TIM_ConfigClockSource+0x168>
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	f000 8085 	beq.w	8003960 <HAL_TIM_ConfigClockSource+0x16c>
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d87f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d01a      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xa2>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d87b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 8003864:	2b60      	cmp	r3, #96	; 0x60
 8003866:	d050      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x116>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d877      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800386c:	2b50      	cmp	r3, #80	; 0x50
 800386e:	d03c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0xf6>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d873      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d058      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x136>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d86f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d064      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d86b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d060      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d867      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x168>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05c      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d05a      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003894:	e062      	b.n	800395c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f000 f9b5 	bl	8003c14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
      break;
 80038c2:	e04e      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f000 f99e 	bl	8003c14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e6:	609a      	str	r2, [r3, #8]
      break;
 80038e8:	e03b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 f912 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2150      	movs	r1, #80	; 0x50
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f96b 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003908:	e02b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	461a      	mov	r2, r3
 8003918:	f000 f931 	bl	8003b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2160      	movs	r1, #96	; 0x60
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f95b 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003928:	e01b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f000 f8f2 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f94b 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003948:	e00b      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f000 f942 	bl	8003bde <TIM_ITRx_SetConfig>
        break;
 800395a:	e002      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d00f      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <TIM_Base_SetConfig+0x118>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <TIM_Base_SetConfig+0x11c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3b      	ldr	r2, [pc, #236]	; (8003b00 <TIM_Base_SetConfig+0x120>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d027      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <TIM_Base_SetConfig+0x118>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d023      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <TIM_Base_SetConfig+0x11c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <TIM_Base_SetConfig+0x120>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d017      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <TIM_Base_SetConfig+0x128>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <TIM_Base_SetConfig+0x12c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <TIM_Base_SetConfig+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <TIM_Base_SetConfig+0x134>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <TIM_Base_SetConfig+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <TIM_Base_SetConfig+0x13c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0xf8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40010400 	.word	0x40010400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	40001800 	.word	0x40001800
 8003b18:	40001c00 	.word	0x40001c00
 8003b1c:	40002000 	.word	0x40002000

08003b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 030a 	bic.w	r3, r3, #10
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0210 	bic.w	r2, r3, #16
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f043 0307 	orr.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e05a      	b.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10c      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40010400 	.word	0x40010400
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40001800 	.word	0x40001800

08003d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <arm_fir_init_f32>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	9c04      	ldr	r4, [sp, #16]
 8003d78:	6082      	str	r2, [r0, #8]
 8003d7a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003d7e:	3c01      	subs	r4, #1
 8003d80:	4605      	mov	r5, r0
 8003d82:	440c      	add	r4, r1
 8003d84:	8001      	strh	r1, [r0, #0]
 8003d86:	461e      	mov	r6, r3
 8003d88:	00a2      	lsls	r2, r4, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f000 fa91 	bl	80042b4 <memset>
 8003d92:	606e      	str	r6, [r5, #4]
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	bf00      	nop

08003d98 <arm_fir_f32>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	ed2d 8b10 	vpush	{d8-d15}
 8003da0:	b089      	sub	sp, #36	; 0x24
 8003da2:	4605      	mov	r5, r0
 8003da4:	9003      	str	r0, [sp, #12]
 8003da6:	8800      	ldrh	r0, [r0, #0]
 8003da8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8003dac:	9304      	str	r3, [sp, #16]
 8003dae:	461e      	mov	r6, r3
 8003db0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8003db4:	3b01      	subs	r3, #1
 8003db6:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8003dba:	08f3      	lsrs	r3, r6, #3
 8003dbc:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003dc0:	9001      	str	r0, [sp, #4]
 8003dc2:	4625      	mov	r5, r4
 8003dc4:	9400      	str	r4, [sp, #0]
 8003dc6:	9302      	str	r3, [sp, #8]
 8003dc8:	f000 81ee 	beq.w	80041a8 <arm_fir_f32+0x410>
 8003dcc:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003dd6:	1f1e      	subs	r6, r3, #4
 8003dd8:	4604      	mov	r4, r0
 8003dda:	9605      	str	r6, [sp, #20]
 8003ddc:	eb08 0003 	add.w	r0, r8, r3
 8003de0:	f004 0a07 	and.w	sl, r4, #7
 8003de4:	4613      	mov	r3, r2
 8003de6:	f10c 0420 	add.w	r4, ip, #32
 8003dea:	f8cd c018 	str.w	ip, [sp, #24]
 8003dee:	4684      	mov	ip, r0
 8003df0:	4648      	mov	r0, r9
 8003df2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003df6:	9107      	str	r1, [sp, #28]
 8003df8:	f105 0720 	add.w	r7, r5, #32
 8003dfc:	f101 0620 	add.w	r6, r1, #32
 8003e00:	f102 0520 	add.w	r5, r2, #32
 8003e04:	4652      	mov	r2, sl
 8003e06:	469a      	mov	sl, r3
 8003e08:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8003e0c:	f847 3c20 	str.w	r3, [r7, #-32]
 8003e10:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8003e14:	f847 3c1c 	str.w	r3, [r7, #-28]
 8003e18:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8003e1c:	f847 3c18 	str.w	r3, [r7, #-24]
 8003e20:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8003e24:	f847 3c14 	str.w	r3, [r7, #-20]
 8003e28:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8003e2c:	f847 3c10 	str.w	r3, [r7, #-16]
 8003e30:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8003e34:	f847 3c0c 	str.w	r3, [r7, #-12]
 8003e38:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8003e3c:	f847 3c08 	str.w	r3, [r7, #-8]
 8003e40:	eddf 3af1 	vldr	s7, [pc, #964]	; 8004208 <arm_fir_f32+0x470>
 8003e44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003e48:	f847 3c04 	str.w	r3, [r7, #-4]
 8003e4c:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8003e50:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8003e54:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8003e58:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8003e5c:	ed14 1a04 	vldr	s2, [r4, #-16]
 8003e60:	ed54 0a03 	vldr	s1, [r4, #-12]
 8003e64:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003e68:	1f21      	subs	r1, r4, #4
 8003e6a:	eef0 8a63 	vmov.f32	s17, s7
 8003e6e:	eef0 9a63 	vmov.f32	s19, s7
 8003e72:	eef0 aa63 	vmov.f32	s21, s7
 8003e76:	eef0 ba63 	vmov.f32	s23, s7
 8003e7a:	eeb0 ca63 	vmov.f32	s24, s7
 8003e7e:	eef0 ca63 	vmov.f32	s25, s7
 8003e82:	eeb0 da63 	vmov.f32	s26, s7
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f000 81e8 	beq.w	800425c <arm_fir_f32+0x4c4>
 8003e8c:	f108 0120 	add.w	r1, r8, #32
 8003e90:	f104 031c 	add.w	r3, r4, #28
 8003e94:	4683      	mov	fp, r0
 8003e96:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8003e9a:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8003e9e:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8003ea2:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8003ea6:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8003eaa:	ed11 6a04 	vldr	s12, [r1, #-16]
 8003eae:	ed51 6a03 	vldr	s13, [r1, #-12]
 8003eb2:	ed11 7a02 	vldr	s14, [r1, #-8]
 8003eb6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003eba:	ee23 fa04 	vmul.f32	s30, s6, s8
 8003ebe:	ee62 ea84 	vmul.f32	s29, s5, s8
 8003ec2:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8003ec6:	ee22 ea04 	vmul.f32	s28, s4, s8
 8003eca:	ee61 da84 	vmul.f32	s27, s3, s8
 8003ece:	ee21 ba04 	vmul.f32	s22, s2, s8
 8003ed2:	ee20 aa84 	vmul.f32	s20, s1, s8
 8003ed6:	ee20 9a04 	vmul.f32	s18, s0, s8
 8003eda:	ee28 4a04 	vmul.f32	s8, s16, s8
 8003ede:	ee62 fa24 	vmul.f32	s31, s4, s9
 8003ee2:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8003ee6:	ee7b baad 	vadd.f32	s23, s23, s27
 8003eea:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8003eee:	ee61 da24 	vmul.f32	s27, s2, s9
 8003ef2:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8003ef6:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8003efa:	ee20 baa4 	vmul.f32	s22, s1, s9
 8003efe:	ee20 aa24 	vmul.f32	s20, s0, s9
 8003f02:	ee3d da0f 	vadd.f32	s26, s26, s30
 8003f06:	ee7c caae 	vadd.f32	s25, s25, s29
 8003f0a:	ee22 faa4 	vmul.f32	s30, s5, s9
 8003f0e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003f12:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8003f16:	ee28 9a24 	vmul.f32	s18, s16, s9
 8003f1a:	ee73 3a84 	vadd.f32	s7, s7, s8
 8003f1e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8003f22:	ee22 4a05 	vmul.f32	s8, s4, s10
 8003f26:	ee61 ea05 	vmul.f32	s29, s2, s10
 8003f2a:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8003f2e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8003f32:	ee7c caaf 	vadd.f32	s25, s25, s31
 8003f36:	ee20 fa85 	vmul.f32	s30, s1, s10
 8003f3a:	ee61 fa85 	vmul.f32	s31, s3, s10
 8003f3e:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8003f42:	ee7b daad 	vadd.f32	s27, s23, s27
 8003f46:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8003f4a:	ee60 ba05 	vmul.f32	s23, s0, s10
 8003f4e:	ee68 aa05 	vmul.f32	s21, s16, s10
 8003f52:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8003f56:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003f5a:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8003f5e:	ee63 4a05 	vmul.f32	s9, s6, s10
 8003f62:	ee22 5a85 	vmul.f32	s10, s5, s10
 8003f66:	ee21 9a25 	vmul.f32	s18, s2, s11
 8003f6a:	ee20 ca25 	vmul.f32	s24, s0, s11
 8003f6e:	ee3d da04 	vadd.f32	s26, s26, s8
 8003f72:	ee7c caaf 	vadd.f32	s25, s25, s31
 8003f76:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8003f7a:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8003f7e:	ed53 1a04 	vldr	s3, [r3, #-16]
 8003f82:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8003f86:	ee7d da8f 	vadd.f32	s27, s27, s30
 8003f8a:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8003f8e:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8003f92:	ee68 ba25 	vmul.f32	s23, s16, s11
 8003f96:	ee63 aa25 	vmul.f32	s21, s6, s11
 8003f9a:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8003f9e:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003fa2:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8003fa6:	ee62 5a25 	vmul.f32	s11, s4, s11
 8003faa:	ee61 4a06 	vmul.f32	s9, s2, s12
 8003fae:	ee60 9a86 	vmul.f32	s19, s1, s12
 8003fb2:	ee60 fa06 	vmul.f32	s31, s0, s12
 8003fb6:	ed13 1a03 	vldr	s2, [r3, #-12]
 8003fba:	ee23 fa06 	vmul.f32	s30, s6, s12
 8003fbe:	ee3d da04 	vadd.f32	s26, s26, s8
 8003fc2:	ee7c ca89 	vadd.f32	s25, s25, s18
 8003fc6:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8003fca:	ee28 9a06 	vmul.f32	s18, s16, s12
 8003fce:	ee7d da8c 	vadd.f32	s27, s27, s24
 8003fd2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8003fd6:	ee22 ca86 	vmul.f32	s24, s5, s12
 8003fda:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8003fde:	ee78 8a85 	vadd.f32	s17, s17, s10
 8003fe2:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8003fe6:	ee62 5a06 	vmul.f32	s11, s4, s12
 8003fea:	ee21 6a86 	vmul.f32	s12, s3, s12
 8003fee:	ee20 4a26 	vmul.f32	s8, s0, s13
 8003ff2:	ee63 ea26 	vmul.f32	s29, s6, s13
 8003ff6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8003ffa:	ee22 5a26 	vmul.f32	s10, s4, s13
 8003ffe:	ee3d da24 	vadd.f32	s26, s26, s9
 8004002:	ee7c caa9 	vadd.f32	s25, s25, s19
 8004006:	ee60 4aa6 	vmul.f32	s9, s1, s13
 800400a:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800400e:	ed53 0a02 	vldr	s1, [r3, #-8]
 8004012:	ee68 fa26 	vmul.f32	s31, s16, s13
 8004016:	ee7d da89 	vadd.f32	s27, s27, s18
 800401a:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800401e:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8004022:	ee22 faa6 	vmul.f32	s30, s5, s13
 8004026:	ee73 3a86 	vadd.f32	s7, s7, s12
 800402a:	ee21 6aa6 	vmul.f32	s12, s3, s13
 800402e:	ee61 6a26 	vmul.f32	s13, s2, s13
 8004032:	ee60 aa07 	vmul.f32	s21, s0, s14
 8004036:	ee28 ca07 	vmul.f32	s24, s16, s14
 800403a:	ee63 ba07 	vmul.f32	s23, s6, s14
 800403e:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8004042:	ee78 8a86 	vadd.f32	s17, s17, s12
 8004046:	ee3d da24 	vadd.f32	s26, s26, s9
 800404a:	ee7c ca84 	vadd.f32	s25, s25, s8
 800404e:	ee7d daae 	vadd.f32	s27, s27, s29
 8004052:	ee22 9a07 	vmul.f32	s18, s4, s14
 8004056:	ee62 ea87 	vmul.f32	s29, s5, s14
 800405a:	ee61 5a87 	vmul.f32	s11, s3, s14
 800405e:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8004062:	ed13 0a01 	vldr	s0, [r3, #-4]
 8004066:	ee61 6a07 	vmul.f32	s13, s2, s14
 800406a:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800406e:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8004072:	ee20 7a87 	vmul.f32	s14, s1, s14
 8004076:	ee68 4a27 	vmul.f32	s9, s16, s15
 800407a:	ee3d da2a 	vadd.f32	s26, s26, s21
 800407e:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8004082:	ee23 8a27 	vmul.f32	s16, s6, s15
 8004086:	ee3e ea2b 	vadd.f32	s28, s28, s23
 800408a:	ee22 4aa7 	vmul.f32	s8, s5, s15
 800408e:	ee22 aa27 	vmul.f32	s20, s4, s15
 8004092:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8004096:	ee21 6a27 	vmul.f32	s12, s2, s15
 800409a:	ee78 6aa6 	vadd.f32	s13, s17, s13
 800409e:	ee7d daae 	vadd.f32	s27, s27, s29
 80040a2:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80040a6:	ee3b ba09 	vadd.f32	s22, s22, s18
 80040aa:	ee79 9aa5 	vadd.f32	s19, s19, s11
 80040ae:	ee73 3a87 	vadd.f32	s7, s7, s14
 80040b2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80040b6:	f1bb 0b01 	subs.w	fp, fp, #1
 80040ba:	f101 0120 	add.w	r1, r1, #32
 80040be:	ee3d da24 	vadd.f32	s26, s26, s9
 80040c2:	ee7c ca88 	vadd.f32	s25, s25, s16
 80040c6:	ee3e ca04 	vadd.f32	s24, s28, s8
 80040ca:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80040ce:	ee7b aa05 	vadd.f32	s21, s22, s10
 80040d2:	ee79 9a86 	vadd.f32	s19, s19, s12
 80040d6:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80040da:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80040de:	f103 0320 	add.w	r3, r3, #32
 80040e2:	f47f aed8 	bne.w	8003e96 <arm_fir_f32+0xfe>
 80040e6:	eb09 0104 	add.w	r1, r9, r4
 80040ea:	46e3      	mov	fp, ip
 80040ec:	b3a2      	cbz	r2, 8004158 <arm_fir_f32+0x3c0>
 80040ee:	4613      	mov	r3, r2
 80040f0:	ecbb 6a01 	vldmia	fp!, {s12}
 80040f4:	ecf1 7a01 	vldmia	r1!, {s15}
 80040f8:	ee23 3a06 	vmul.f32	s6, s6, s12
 80040fc:	ee22 4a86 	vmul.f32	s8, s5, s12
 8004100:	ee62 4a06 	vmul.f32	s9, s4, s12
 8004104:	ee21 5a86 	vmul.f32	s10, s3, s12
 8004108:	ee61 5a06 	vmul.f32	s11, s2, s12
 800410c:	ee60 6a86 	vmul.f32	s13, s1, s12
 8004110:	ee20 7a06 	vmul.f32	s14, s0, s12
 8004114:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004118:	3b01      	subs	r3, #1
 800411a:	ee3d da03 	vadd.f32	s26, s26, s6
 800411e:	ee7c ca84 	vadd.f32	s25, s25, s8
 8004122:	eeb0 3a62 	vmov.f32	s6, s5
 8004126:	ee3c ca24 	vadd.f32	s24, s24, s9
 800412a:	eef0 2a42 	vmov.f32	s5, s4
 800412e:	ee7b ba85 	vadd.f32	s23, s23, s10
 8004132:	eeb0 2a61 	vmov.f32	s4, s3
 8004136:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800413a:	eef0 1a41 	vmov.f32	s3, s2
 800413e:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8004142:	eeb0 1a60 	vmov.f32	s2, s1
 8004146:	ee78 8a87 	vadd.f32	s17, s17, s14
 800414a:	eef0 0a40 	vmov.f32	s1, s0
 800414e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8004152:	eeb0 0a67 	vmov.f32	s0, s15
 8004156:	d1cb      	bne.n	80040f0 <arm_fir_f32+0x358>
 8004158:	f1be 0e01 	subs.w	lr, lr, #1
 800415c:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8004160:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8004164:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8004168:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 800416c:	ed45 aa04 	vstr	s21, [r5, #-16]
 8004170:	ed45 9a03 	vstr	s19, [r5, #-12]
 8004174:	ed45 8a02 	vstr	s17, [r5, #-8]
 8004178:	ed45 3a01 	vstr	s7, [r5, #-4]
 800417c:	f107 0720 	add.w	r7, r7, #32
 8004180:	f106 0620 	add.w	r6, r6, #32
 8004184:	f104 0420 	add.w	r4, r4, #32
 8004188:	f105 0520 	add.w	r5, r5, #32
 800418c:	f47f ae3c 	bne.w	8003e08 <arm_fir_f32+0x70>
 8004190:	9b02      	ldr	r3, [sp, #8]
 8004192:	9800      	ldr	r0, [sp, #0]
 8004194:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004198:	9907      	ldr	r1, [sp, #28]
 800419a:	015b      	lsls	r3, r3, #5
 800419c:	4652      	mov	r2, sl
 800419e:	4418      	add	r0, r3
 80041a0:	9000      	str	r0, [sp, #0]
 80041a2:	4419      	add	r1, r3
 80041a4:	449c      	add	ip, r3
 80041a6:	441a      	add	r2, r3
 80041a8:	9b04      	ldr	r3, [sp, #16]
 80041aa:	f013 0e07 	ands.w	lr, r3, #7
 80041ae:	d01f      	beq.n	80041f0 <arm_fir_f32+0x458>
 80041b0:	9f00      	ldr	r7, [sp, #0]
 80041b2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80041b6:	4676      	mov	r6, lr
 80041b8:	4665      	mov	r5, ip
 80041ba:	f851 3b04 	ldr.w	r3, [r1], #4
 80041be:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004208 <arm_fir_f32+0x470>
 80041c2:	f847 3b04 	str.w	r3, [r7], #4
 80041c6:	4644      	mov	r4, r8
 80041c8:	464b      	mov	r3, r9
 80041ca:	4628      	mov	r0, r5
 80041cc:	ecb0 7a01 	vldmia	r0!, {s14}
 80041d0:	ecf4 7a01 	vldmia	r4!, {s15}
 80041d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d8:	3b01      	subs	r3, #1
 80041da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041de:	d1f5      	bne.n	80041cc <arm_fir_f32+0x434>
 80041e0:	3e01      	subs	r6, #1
 80041e2:	ece2 6a01 	vstmia	r2!, {s13}
 80041e6:	f105 0504 	add.w	r5, r5, #4
 80041ea:	d1e6      	bne.n	80041ba <arm_fir_f32+0x422>
 80041ec:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80041f0:	9b01      	ldr	r3, [sp, #4]
 80041f2:	1e59      	subs	r1, r3, #1
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	088e      	lsrs	r6, r1, #2
 80041f8:	685c      	ldr	r4, [r3, #4]
 80041fa:	d020      	beq.n	800423e <arm_fir_f32+0x4a6>
 80041fc:	f104 0210 	add.w	r2, r4, #16
 8004200:	f10c 0310 	add.w	r3, ip, #16
 8004204:	4630      	mov	r0, r6
 8004206:	e001      	b.n	800420c <arm_fir_f32+0x474>
 8004208:	00000000 	.word	0x00000000
 800420c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8004210:	f842 5c10 	str.w	r5, [r2, #-16]
 8004214:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004218:	f842 5c0c 	str.w	r5, [r2, #-12]
 800421c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004220:	f842 5c08 	str.w	r5, [r2, #-8]
 8004224:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8004228:	f842 5c04 	str.w	r5, [r2, #-4]
 800422c:	3801      	subs	r0, #1
 800422e:	f103 0310 	add.w	r3, r3, #16
 8004232:	f102 0210 	add.w	r2, r2, #16
 8004236:	d1e9      	bne.n	800420c <arm_fir_f32+0x474>
 8004238:	0133      	lsls	r3, r6, #4
 800423a:	441c      	add	r4, r3
 800423c:	449c      	add	ip, r3
 800423e:	f011 0303 	ands.w	r3, r1, #3
 8004242:	d006      	beq.n	8004252 <arm_fir_f32+0x4ba>
 8004244:	4622      	mov	r2, r4
 8004246:	f85c 1b04 	ldr.w	r1, [ip], #4
 800424a:	f842 1b04 	str.w	r1, [r2], #4
 800424e:	3b01      	subs	r3, #1
 8004250:	d1f9      	bne.n	8004246 <arm_fir_f32+0x4ae>
 8004252:	b009      	add	sp, #36	; 0x24
 8004254:	ecbd 8b10 	vpop	{d8-d15}
 8004258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425c:	46c3      	mov	fp, r8
 800425e:	e745      	b.n	80040ec <arm_fir_f32+0x354>

08004260 <__errno>:
 8004260:	4b01      	ldr	r3, [pc, #4]	; (8004268 <__errno+0x8>)
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000014 	.word	0x20000014

0800426c <__libc_init_array>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4d0d      	ldr	r5, [pc, #52]	; (80042a4 <__libc_init_array+0x38>)
 8004270:	4c0d      	ldr	r4, [pc, #52]	; (80042a8 <__libc_init_array+0x3c>)
 8004272:	1b64      	subs	r4, r4, r5
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	2600      	movs	r6, #0
 8004278:	42a6      	cmp	r6, r4
 800427a:	d109      	bne.n	8004290 <__libc_init_array+0x24>
 800427c:	4d0b      	ldr	r5, [pc, #44]	; (80042ac <__libc_init_array+0x40>)
 800427e:	4c0c      	ldr	r4, [pc, #48]	; (80042b0 <__libc_init_array+0x44>)
 8004280:	f005 fcd4 	bl	8009c2c <_init>
 8004284:	1b64      	subs	r4, r4, r5
 8004286:	10a4      	asrs	r4, r4, #2
 8004288:	2600      	movs	r6, #0
 800428a:	42a6      	cmp	r6, r4
 800428c:	d105      	bne.n	800429a <__libc_init_array+0x2e>
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	f855 3b04 	ldr.w	r3, [r5], #4
 8004294:	4798      	blx	r3
 8004296:	3601      	adds	r6, #1
 8004298:	e7ee      	b.n	8004278 <__libc_init_array+0xc>
 800429a:	f855 3b04 	ldr.w	r3, [r5], #4
 800429e:	4798      	blx	r3
 80042a0:	3601      	adds	r6, #1
 80042a2:	e7f2      	b.n	800428a <__libc_init_array+0x1e>
 80042a4:	0800a3d0 	.word	0x0800a3d0
 80042a8:	0800a3d0 	.word	0x0800a3d0
 80042ac:	0800a3d0 	.word	0x0800a3d0
 80042b0:	0800a3d4 	.word	0x0800a3d4

080042b4 <memset>:
 80042b4:	4402      	add	r2, r0
 80042b6:	4603      	mov	r3, r0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d100      	bne.n	80042be <memset+0xa>
 80042bc:	4770      	bx	lr
 80042be:	f803 1b01 	strb.w	r1, [r3], #1
 80042c2:	e7f9      	b.n	80042b8 <memset+0x4>

080042c4 <__cvt>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	ec55 4b10 	vmov	r4, r5, d0
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	460e      	mov	r6, r1
 80042d0:	4619      	mov	r1, r3
 80042d2:	462b      	mov	r3, r5
 80042d4:	bfbb      	ittet	lt
 80042d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042da:	461d      	movlt	r5, r3
 80042dc:	2300      	movge	r3, #0
 80042de:	232d      	movlt	r3, #45	; 0x2d
 80042e0:	700b      	strb	r3, [r1, #0]
 80042e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042e8:	4691      	mov	r9, r2
 80042ea:	f023 0820 	bic.w	r8, r3, #32
 80042ee:	bfbc      	itt	lt
 80042f0:	4622      	movlt	r2, r4
 80042f2:	4614      	movlt	r4, r2
 80042f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042f8:	d005      	beq.n	8004306 <__cvt+0x42>
 80042fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042fe:	d100      	bne.n	8004302 <__cvt+0x3e>
 8004300:	3601      	adds	r6, #1
 8004302:	2102      	movs	r1, #2
 8004304:	e000      	b.n	8004308 <__cvt+0x44>
 8004306:	2103      	movs	r1, #3
 8004308:	ab03      	add	r3, sp, #12
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	ab02      	add	r3, sp, #8
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	ec45 4b10 	vmov	d0, r4, r5
 8004314:	4653      	mov	r3, sl
 8004316:	4632      	mov	r2, r6
 8004318:	f001 fe2a 	bl	8005f70 <_dtoa_r>
 800431c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004320:	4607      	mov	r7, r0
 8004322:	d102      	bne.n	800432a <__cvt+0x66>
 8004324:	f019 0f01 	tst.w	r9, #1
 8004328:	d022      	beq.n	8004370 <__cvt+0xac>
 800432a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800432e:	eb07 0906 	add.w	r9, r7, r6
 8004332:	d110      	bne.n	8004356 <__cvt+0x92>
 8004334:	783b      	ldrb	r3, [r7, #0]
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d10a      	bne.n	8004350 <__cvt+0x8c>
 800433a:	2200      	movs	r2, #0
 800433c:	2300      	movs	r3, #0
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fc fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004346:	b918      	cbnz	r0, 8004350 <__cvt+0x8c>
 8004348:	f1c6 0601 	rsb	r6, r6, #1
 800434c:	f8ca 6000 	str.w	r6, [sl]
 8004350:	f8da 3000 	ldr.w	r3, [sl]
 8004354:	4499      	add	r9, r3
 8004356:	2200      	movs	r2, #0
 8004358:	2300      	movs	r3, #0
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fc fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004362:	b108      	cbz	r0, 8004368 <__cvt+0xa4>
 8004364:	f8cd 900c 	str.w	r9, [sp, #12]
 8004368:	2230      	movs	r2, #48	; 0x30
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	454b      	cmp	r3, r9
 800436e:	d307      	bcc.n	8004380 <__cvt+0xbc>
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004374:	1bdb      	subs	r3, r3, r7
 8004376:	4638      	mov	r0, r7
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	b004      	add	sp, #16
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	9103      	str	r1, [sp, #12]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e7f0      	b.n	800436a <__cvt+0xa6>

08004388 <__exponent>:
 8004388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800438a:	4603      	mov	r3, r0
 800438c:	2900      	cmp	r1, #0
 800438e:	bfb8      	it	lt
 8004390:	4249      	neglt	r1, r1
 8004392:	f803 2b02 	strb.w	r2, [r3], #2
 8004396:	bfb4      	ite	lt
 8004398:	222d      	movlt	r2, #45	; 0x2d
 800439a:	222b      	movge	r2, #43	; 0x2b
 800439c:	2909      	cmp	r1, #9
 800439e:	7042      	strb	r2, [r0, #1]
 80043a0:	dd2a      	ble.n	80043f8 <__exponent+0x70>
 80043a2:	f10d 0407 	add.w	r4, sp, #7
 80043a6:	46a4      	mov	ip, r4
 80043a8:	270a      	movs	r7, #10
 80043aa:	46a6      	mov	lr, r4
 80043ac:	460a      	mov	r2, r1
 80043ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80043b2:	fb07 1516 	mls	r5, r7, r6, r1
 80043b6:	3530      	adds	r5, #48	; 0x30
 80043b8:	2a63      	cmp	r2, #99	; 0x63
 80043ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80043be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043c2:	4631      	mov	r1, r6
 80043c4:	dcf1      	bgt.n	80043aa <__exponent+0x22>
 80043c6:	3130      	adds	r1, #48	; 0x30
 80043c8:	f1ae 0502 	sub.w	r5, lr, #2
 80043cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043d0:	1c44      	adds	r4, r0, #1
 80043d2:	4629      	mov	r1, r5
 80043d4:	4561      	cmp	r1, ip
 80043d6:	d30a      	bcc.n	80043ee <__exponent+0x66>
 80043d8:	f10d 0209 	add.w	r2, sp, #9
 80043dc:	eba2 020e 	sub.w	r2, r2, lr
 80043e0:	4565      	cmp	r5, ip
 80043e2:	bf88      	it	hi
 80043e4:	2200      	movhi	r2, #0
 80043e6:	4413      	add	r3, r2
 80043e8:	1a18      	subs	r0, r3, r0
 80043ea:	b003      	add	sp, #12
 80043ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043f6:	e7ed      	b.n	80043d4 <__exponent+0x4c>
 80043f8:	2330      	movs	r3, #48	; 0x30
 80043fa:	3130      	adds	r1, #48	; 0x30
 80043fc:	7083      	strb	r3, [r0, #2]
 80043fe:	70c1      	strb	r1, [r0, #3]
 8004400:	1d03      	adds	r3, r0, #4
 8004402:	e7f1      	b.n	80043e8 <__exponent+0x60>

08004404 <_printf_float>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	ed2d 8b02 	vpush	{d8}
 800440c:	b08d      	sub	sp, #52	; 0x34
 800440e:	460c      	mov	r4, r1
 8004410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004414:	4616      	mov	r6, r2
 8004416:	461f      	mov	r7, r3
 8004418:	4605      	mov	r5, r0
 800441a:	f003 f80b 	bl	8007434 <_localeconv_r>
 800441e:	f8d0 a000 	ldr.w	sl, [r0]
 8004422:	4650      	mov	r0, sl
 8004424:	f7fb fed4 	bl	80001d0 <strlen>
 8004428:	2300      	movs	r3, #0
 800442a:	930a      	str	r3, [sp, #40]	; 0x28
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	f8d8 3000 	ldr.w	r3, [r8]
 8004434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004438:	3307      	adds	r3, #7
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	f103 0208 	add.w	r2, r3, #8
 8004442:	f8c8 2000 	str.w	r2, [r8]
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800444e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004456:	9307      	str	r3, [sp, #28]
 8004458:	f8cd 8018 	str.w	r8, [sp, #24]
 800445c:	ee08 0a10 	vmov	s16, r0
 8004460:	4b9f      	ldr	r3, [pc, #636]	; (80046e0 <_printf_float+0x2dc>)
 8004462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	f7fc fb5f 	bl	8000b2c <__aeabi_dcmpun>
 800446e:	bb88      	cbnz	r0, 80044d4 <_printf_float+0xd0>
 8004470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004474:	4b9a      	ldr	r3, [pc, #616]	; (80046e0 <_printf_float+0x2dc>)
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	f7fc fb39 	bl	8000af0 <__aeabi_dcmple>
 800447e:	bb48      	cbnz	r0, 80044d4 <_printf_float+0xd0>
 8004480:	2200      	movs	r2, #0
 8004482:	2300      	movs	r3, #0
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fc fb28 	bl	8000adc <__aeabi_dcmplt>
 800448c:	b110      	cbz	r0, 8004494 <_printf_float+0x90>
 800448e:	232d      	movs	r3, #45	; 0x2d
 8004490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004494:	4b93      	ldr	r3, [pc, #588]	; (80046e4 <_printf_float+0x2e0>)
 8004496:	4894      	ldr	r0, [pc, #592]	; (80046e8 <_printf_float+0x2e4>)
 8004498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800449c:	bf94      	ite	ls
 800449e:	4698      	movls	r8, r3
 80044a0:	4680      	movhi	r8, r0
 80044a2:	2303      	movs	r3, #3
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	9b05      	ldr	r3, [sp, #20]
 80044a8:	f023 0204 	bic.w	r2, r3, #4
 80044ac:	6022      	str	r2, [r4, #0]
 80044ae:	f04f 0900 	mov.w	r9, #0
 80044b2:	9700      	str	r7, [sp, #0]
 80044b4:	4633      	mov	r3, r6
 80044b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f9d8 	bl	8004870 <_printf_common>
 80044c0:	3001      	adds	r0, #1
 80044c2:	f040 8090 	bne.w	80045e6 <_printf_float+0x1e2>
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	b00d      	add	sp, #52	; 0x34
 80044cc:	ecbd 8b02 	vpop	{d8}
 80044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d4:	4642      	mov	r2, r8
 80044d6:	464b      	mov	r3, r9
 80044d8:	4640      	mov	r0, r8
 80044da:	4649      	mov	r1, r9
 80044dc:	f7fc fb26 	bl	8000b2c <__aeabi_dcmpun>
 80044e0:	b140      	cbz	r0, 80044f4 <_printf_float+0xf0>
 80044e2:	464b      	mov	r3, r9
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bfbc      	itt	lt
 80044e8:	232d      	movlt	r3, #45	; 0x2d
 80044ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044ee:	487f      	ldr	r0, [pc, #508]	; (80046ec <_printf_float+0x2e8>)
 80044f0:	4b7f      	ldr	r3, [pc, #508]	; (80046f0 <_printf_float+0x2ec>)
 80044f2:	e7d1      	b.n	8004498 <_printf_float+0x94>
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044fa:	9206      	str	r2, [sp, #24]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	d13f      	bne.n	8004580 <_printf_float+0x17c>
 8004500:	2306      	movs	r3, #6
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	9b05      	ldr	r3, [sp, #20]
 8004506:	6861      	ldr	r1, [r4, #4]
 8004508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800450c:	2300      	movs	r3, #0
 800450e:	9303      	str	r3, [sp, #12]
 8004510:	ab0a      	add	r3, sp, #40	; 0x28
 8004512:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004516:	ab09      	add	r3, sp, #36	; 0x24
 8004518:	ec49 8b10 	vmov	d0, r8, r9
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004524:	4628      	mov	r0, r5
 8004526:	f7ff fecd 	bl	80042c4 <__cvt>
 800452a:	9b06      	ldr	r3, [sp, #24]
 800452c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800452e:	2b47      	cmp	r3, #71	; 0x47
 8004530:	4680      	mov	r8, r0
 8004532:	d108      	bne.n	8004546 <_printf_float+0x142>
 8004534:	1cc8      	adds	r0, r1, #3
 8004536:	db02      	blt.n	800453e <_printf_float+0x13a>
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	4299      	cmp	r1, r3
 800453c:	dd41      	ble.n	80045c2 <_printf_float+0x1be>
 800453e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004542:	fa5f fb8b 	uxtb.w	fp, fp
 8004546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800454a:	d820      	bhi.n	800458e <_printf_float+0x18a>
 800454c:	3901      	subs	r1, #1
 800454e:	465a      	mov	r2, fp
 8004550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004554:	9109      	str	r1, [sp, #36]	; 0x24
 8004556:	f7ff ff17 	bl	8004388 <__exponent>
 800455a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800455c:	1813      	adds	r3, r2, r0
 800455e:	2a01      	cmp	r2, #1
 8004560:	4681      	mov	r9, r0
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	dc02      	bgt.n	800456c <_printf_float+0x168>
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	07d2      	lsls	r2, r2, #31
 800456a:	d501      	bpl.n	8004570 <_printf_float+0x16c>
 800456c:	3301      	adds	r3, #1
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004574:	2b00      	cmp	r3, #0
 8004576:	d09c      	beq.n	80044b2 <_printf_float+0xae>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457e:	e798      	b.n	80044b2 <_printf_float+0xae>
 8004580:	9a06      	ldr	r2, [sp, #24]
 8004582:	2a47      	cmp	r2, #71	; 0x47
 8004584:	d1be      	bne.n	8004504 <_printf_float+0x100>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1bc      	bne.n	8004504 <_printf_float+0x100>
 800458a:	2301      	movs	r3, #1
 800458c:	e7b9      	b.n	8004502 <_printf_float+0xfe>
 800458e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004592:	d118      	bne.n	80045c6 <_printf_float+0x1c2>
 8004594:	2900      	cmp	r1, #0
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	dd0b      	ble.n	80045b2 <_printf_float+0x1ae>
 800459a:	6121      	str	r1, [r4, #16]
 800459c:	b913      	cbnz	r3, 80045a4 <_printf_float+0x1a0>
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	07d0      	lsls	r0, r2, #31
 80045a2:	d502      	bpl.n	80045aa <_printf_float+0x1a6>
 80045a4:	3301      	adds	r3, #1
 80045a6:	440b      	add	r3, r1
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80045ac:	f04f 0900 	mov.w	r9, #0
 80045b0:	e7de      	b.n	8004570 <_printf_float+0x16c>
 80045b2:	b913      	cbnz	r3, 80045ba <_printf_float+0x1b6>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	07d2      	lsls	r2, r2, #31
 80045b8:	d501      	bpl.n	80045be <_printf_float+0x1ba>
 80045ba:	3302      	adds	r3, #2
 80045bc:	e7f4      	b.n	80045a8 <_printf_float+0x1a4>
 80045be:	2301      	movs	r3, #1
 80045c0:	e7f2      	b.n	80045a8 <_printf_float+0x1a4>
 80045c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80045c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045c8:	4299      	cmp	r1, r3
 80045ca:	db05      	blt.n	80045d8 <_printf_float+0x1d4>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	6121      	str	r1, [r4, #16]
 80045d0:	07d8      	lsls	r0, r3, #31
 80045d2:	d5ea      	bpl.n	80045aa <_printf_float+0x1a6>
 80045d4:	1c4b      	adds	r3, r1, #1
 80045d6:	e7e7      	b.n	80045a8 <_printf_float+0x1a4>
 80045d8:	2900      	cmp	r1, #0
 80045da:	bfd4      	ite	le
 80045dc:	f1c1 0202 	rsble	r2, r1, #2
 80045e0:	2201      	movgt	r2, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	e7e0      	b.n	80045a8 <_printf_float+0x1a4>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	055a      	lsls	r2, r3, #21
 80045ea:	d407      	bmi.n	80045fc <_printf_float+0x1f8>
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	4642      	mov	r2, r8
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	d12c      	bne.n	8004654 <_printf_float+0x250>
 80045fa:	e764      	b.n	80044c6 <_printf_float+0xc2>
 80045fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004600:	f240 80e0 	bls.w	80047c4 <_printf_float+0x3c0>
 8004604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004608:	2200      	movs	r2, #0
 800460a:	2300      	movs	r3, #0
 800460c:	f7fc fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004610:	2800      	cmp	r0, #0
 8004612:	d034      	beq.n	800467e <_printf_float+0x27a>
 8004614:	4a37      	ldr	r2, [pc, #220]	; (80046f4 <_printf_float+0x2f0>)
 8004616:	2301      	movs	r3, #1
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f af51 	beq.w	80044c6 <_printf_float+0xc2>
 8004624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004628:	429a      	cmp	r2, r3
 800462a:	db02      	blt.n	8004632 <_printf_float+0x22e>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	07d8      	lsls	r0, r3, #31
 8004630:	d510      	bpl.n	8004654 <_printf_float+0x250>
 8004632:	ee18 3a10 	vmov	r3, s16
 8004636:	4652      	mov	r2, sl
 8004638:	4631      	mov	r1, r6
 800463a:	4628      	mov	r0, r5
 800463c:	47b8      	blx	r7
 800463e:	3001      	adds	r0, #1
 8004640:	f43f af41 	beq.w	80044c6 <_printf_float+0xc2>
 8004644:	f04f 0800 	mov.w	r8, #0
 8004648:	f104 091a 	add.w	r9, r4, #26
 800464c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	4543      	cmp	r3, r8
 8004652:	dc09      	bgt.n	8004668 <_printf_float+0x264>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	079b      	lsls	r3, r3, #30
 8004658:	f100 8105 	bmi.w	8004866 <_printf_float+0x462>
 800465c:	68e0      	ldr	r0, [r4, #12]
 800465e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004660:	4298      	cmp	r0, r3
 8004662:	bfb8      	it	lt
 8004664:	4618      	movlt	r0, r3
 8004666:	e730      	b.n	80044ca <_printf_float+0xc6>
 8004668:	2301      	movs	r3, #1
 800466a:	464a      	mov	r2, r9
 800466c:	4631      	mov	r1, r6
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	f43f af27 	beq.w	80044c6 <_printf_float+0xc2>
 8004678:	f108 0801 	add.w	r8, r8, #1
 800467c:	e7e6      	b.n	800464c <_printf_float+0x248>
 800467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	dc39      	bgt.n	80046f8 <_printf_float+0x2f4>
 8004684:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <_printf_float+0x2f0>)
 8004686:	2301      	movs	r3, #1
 8004688:	4631      	mov	r1, r6
 800468a:	4628      	mov	r0, r5
 800468c:	47b8      	blx	r7
 800468e:	3001      	adds	r0, #1
 8004690:	f43f af19 	beq.w	80044c6 <_printf_float+0xc2>
 8004694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004698:	4313      	orrs	r3, r2
 800469a:	d102      	bne.n	80046a2 <_printf_float+0x29e>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	07d9      	lsls	r1, r3, #31
 80046a0:	d5d8      	bpl.n	8004654 <_printf_float+0x250>
 80046a2:	ee18 3a10 	vmov	r3, s16
 80046a6:	4652      	mov	r2, sl
 80046a8:	4631      	mov	r1, r6
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f af09 	beq.w	80044c6 <_printf_float+0xc2>
 80046b4:	f04f 0900 	mov.w	r9, #0
 80046b8:	f104 0a1a 	add.w	sl, r4, #26
 80046bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046be:	425b      	negs	r3, r3
 80046c0:	454b      	cmp	r3, r9
 80046c2:	dc01      	bgt.n	80046c8 <_printf_float+0x2c4>
 80046c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c6:	e792      	b.n	80045ee <_printf_float+0x1ea>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4631      	mov	r1, r6
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	f43f aef7 	beq.w	80044c6 <_printf_float+0xc2>
 80046d8:	f109 0901 	add.w	r9, r9, #1
 80046dc:	e7ee      	b.n	80046bc <_printf_float+0x2b8>
 80046de:	bf00      	nop
 80046e0:	7fefffff 	.word	0x7fefffff
 80046e4:	08009cdc 	.word	0x08009cdc
 80046e8:	08009ce0 	.word	0x08009ce0
 80046ec:	08009ce8 	.word	0x08009ce8
 80046f0:	08009ce4 	.word	0x08009ce4
 80046f4:	08009cec 	.word	0x08009cec
 80046f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046fc:	429a      	cmp	r2, r3
 80046fe:	bfa8      	it	ge
 8004700:	461a      	movge	r2, r3
 8004702:	2a00      	cmp	r2, #0
 8004704:	4691      	mov	r9, r2
 8004706:	dc37      	bgt.n	8004778 <_printf_float+0x374>
 8004708:	f04f 0b00 	mov.w	fp, #0
 800470c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004710:	f104 021a 	add.w	r2, r4, #26
 8004714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004716:	9305      	str	r3, [sp, #20]
 8004718:	eba3 0309 	sub.w	r3, r3, r9
 800471c:	455b      	cmp	r3, fp
 800471e:	dc33      	bgt.n	8004788 <_printf_float+0x384>
 8004720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004724:	429a      	cmp	r2, r3
 8004726:	db3b      	blt.n	80047a0 <_printf_float+0x39c>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	07da      	lsls	r2, r3, #31
 800472c:	d438      	bmi.n	80047a0 <_printf_float+0x39c>
 800472e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004730:	9b05      	ldr	r3, [sp, #20]
 8004732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	eba2 0901 	sub.w	r9, r2, r1
 800473a:	4599      	cmp	r9, r3
 800473c:	bfa8      	it	ge
 800473e:	4699      	movge	r9, r3
 8004740:	f1b9 0f00 	cmp.w	r9, #0
 8004744:	dc35      	bgt.n	80047b2 <_printf_float+0x3ae>
 8004746:	f04f 0800 	mov.w	r8, #0
 800474a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800474e:	f104 0a1a 	add.w	sl, r4, #26
 8004752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	eba3 0309 	sub.w	r3, r3, r9
 800475c:	4543      	cmp	r3, r8
 800475e:	f77f af79 	ble.w	8004654 <_printf_float+0x250>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f aeaa 	beq.w	80044c6 <_printf_float+0xc2>
 8004772:	f108 0801 	add.w	r8, r8, #1
 8004776:	e7ec      	b.n	8004752 <_printf_float+0x34e>
 8004778:	4613      	mov	r3, r2
 800477a:	4631      	mov	r1, r6
 800477c:	4642      	mov	r2, r8
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	d1c0      	bne.n	8004708 <_printf_float+0x304>
 8004786:	e69e      	b.n	80044c6 <_printf_float+0xc2>
 8004788:	2301      	movs	r3, #1
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	9205      	str	r2, [sp, #20]
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f ae97 	beq.w	80044c6 <_printf_float+0xc2>
 8004798:	9a05      	ldr	r2, [sp, #20]
 800479a:	f10b 0b01 	add.w	fp, fp, #1
 800479e:	e7b9      	b.n	8004714 <_printf_float+0x310>
 80047a0:	ee18 3a10 	vmov	r3, s16
 80047a4:	4652      	mov	r2, sl
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	d1be      	bne.n	800472e <_printf_float+0x32a>
 80047b0:	e689      	b.n	80044c6 <_printf_float+0xc2>
 80047b2:	9a05      	ldr	r2, [sp, #20]
 80047b4:	464b      	mov	r3, r9
 80047b6:	4442      	add	r2, r8
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	d1c1      	bne.n	8004746 <_printf_float+0x342>
 80047c2:	e680      	b.n	80044c6 <_printf_float+0xc2>
 80047c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c6:	2a01      	cmp	r2, #1
 80047c8:	dc01      	bgt.n	80047ce <_printf_float+0x3ca>
 80047ca:	07db      	lsls	r3, r3, #31
 80047cc:	d538      	bpl.n	8004840 <_printf_float+0x43c>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4642      	mov	r2, r8
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f ae74 	beq.w	80044c6 <_printf_float+0xc2>
 80047de:	ee18 3a10 	vmov	r3, s16
 80047e2:	4652      	mov	r2, sl
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f ae6b 	beq.w	80044c6 <_printf_float+0xc2>
 80047f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f4:	2200      	movs	r2, #0
 80047f6:	2300      	movs	r3, #0
 80047f8:	f7fc f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80047fc:	b9d8      	cbnz	r0, 8004836 <_printf_float+0x432>
 80047fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004800:	f108 0201 	add.w	r2, r8, #1
 8004804:	3b01      	subs	r3, #1
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d10e      	bne.n	800482e <_printf_float+0x42a>
 8004810:	e659      	b.n	80044c6 <_printf_float+0xc2>
 8004812:	2301      	movs	r3, #1
 8004814:	4652      	mov	r2, sl
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	47b8      	blx	r7
 800481c:	3001      	adds	r0, #1
 800481e:	f43f ae52 	beq.w	80044c6 <_printf_float+0xc2>
 8004822:	f108 0801 	add.w	r8, r8, #1
 8004826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	4543      	cmp	r3, r8
 800482c:	dcf1      	bgt.n	8004812 <_printf_float+0x40e>
 800482e:	464b      	mov	r3, r9
 8004830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004834:	e6dc      	b.n	80045f0 <_printf_float+0x1ec>
 8004836:	f04f 0800 	mov.w	r8, #0
 800483a:	f104 0a1a 	add.w	sl, r4, #26
 800483e:	e7f2      	b.n	8004826 <_printf_float+0x422>
 8004840:	2301      	movs	r3, #1
 8004842:	4642      	mov	r2, r8
 8004844:	e7df      	b.n	8004806 <_printf_float+0x402>
 8004846:	2301      	movs	r3, #1
 8004848:	464a      	mov	r2, r9
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f ae38 	beq.w	80044c6 <_printf_float+0xc2>
 8004856:	f108 0801 	add.w	r8, r8, #1
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	4543      	cmp	r3, r8
 8004862:	dcf0      	bgt.n	8004846 <_printf_float+0x442>
 8004864:	e6fa      	b.n	800465c <_printf_float+0x258>
 8004866:	f04f 0800 	mov.w	r8, #0
 800486a:	f104 0919 	add.w	r9, r4, #25
 800486e:	e7f4      	b.n	800485a <_printf_float+0x456>

08004870 <_printf_common>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	4616      	mov	r6, r2
 8004876:	4699      	mov	r9, r3
 8004878:	688a      	ldr	r2, [r1, #8]
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004880:	4293      	cmp	r3, r2
 8004882:	bfb8      	it	lt
 8004884:	4613      	movlt	r3, r2
 8004886:	6033      	str	r3, [r6, #0]
 8004888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800488c:	4607      	mov	r7, r0
 800488e:	460c      	mov	r4, r1
 8004890:	b10a      	cbz	r2, 8004896 <_printf_common+0x26>
 8004892:	3301      	adds	r3, #1
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	0699      	lsls	r1, r3, #26
 800489a:	bf42      	ittt	mi
 800489c:	6833      	ldrmi	r3, [r6, #0]
 800489e:	3302      	addmi	r3, #2
 80048a0:	6033      	strmi	r3, [r6, #0]
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	f015 0506 	ands.w	r5, r5, #6
 80048a8:	d106      	bne.n	80048b8 <_printf_common+0x48>
 80048aa:	f104 0a19 	add.w	sl, r4, #25
 80048ae:	68e3      	ldr	r3, [r4, #12]
 80048b0:	6832      	ldr	r2, [r6, #0]
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	dc26      	bgt.n	8004906 <_printf_common+0x96>
 80048b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048bc:	1e13      	subs	r3, r2, #0
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	bf18      	it	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	0692      	lsls	r2, r2, #26
 80048c6:	d42b      	bmi.n	8004920 <_printf_common+0xb0>
 80048c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048cc:	4649      	mov	r1, r9
 80048ce:	4638      	mov	r0, r7
 80048d0:	47c0      	blx	r8
 80048d2:	3001      	adds	r0, #1
 80048d4:	d01e      	beq.n	8004914 <_printf_common+0xa4>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	68e5      	ldr	r5, [r4, #12]
 80048da:	6832      	ldr	r2, [r6, #0]
 80048dc:	f003 0306 	and.w	r3, r3, #6
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	bf08      	it	eq
 80048e4:	1aad      	subeq	r5, r5, r2
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	6922      	ldr	r2, [r4, #16]
 80048ea:	bf0c      	ite	eq
 80048ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f0:	2500      	movne	r5, #0
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bfc4      	itt	gt
 80048f6:	1a9b      	subgt	r3, r3, r2
 80048f8:	18ed      	addgt	r5, r5, r3
 80048fa:	2600      	movs	r6, #0
 80048fc:	341a      	adds	r4, #26
 80048fe:	42b5      	cmp	r5, r6
 8004900:	d11a      	bne.n	8004938 <_printf_common+0xc8>
 8004902:	2000      	movs	r0, #0
 8004904:	e008      	b.n	8004918 <_printf_common+0xa8>
 8004906:	2301      	movs	r3, #1
 8004908:	4652      	mov	r2, sl
 800490a:	4649      	mov	r1, r9
 800490c:	4638      	mov	r0, r7
 800490e:	47c0      	blx	r8
 8004910:	3001      	adds	r0, #1
 8004912:	d103      	bne.n	800491c <_printf_common+0xac>
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491c:	3501      	adds	r5, #1
 800491e:	e7c6      	b.n	80048ae <_printf_common+0x3e>
 8004920:	18e1      	adds	r1, r4, r3
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	2030      	movs	r0, #48	; 0x30
 8004926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800492a:	4422      	add	r2, r4
 800492c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004934:	3302      	adds	r3, #2
 8004936:	e7c7      	b.n	80048c8 <_printf_common+0x58>
 8004938:	2301      	movs	r3, #1
 800493a:	4622      	mov	r2, r4
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	47c0      	blx	r8
 8004942:	3001      	adds	r0, #1
 8004944:	d0e6      	beq.n	8004914 <_printf_common+0xa4>
 8004946:	3601      	adds	r6, #1
 8004948:	e7d9      	b.n	80048fe <_printf_common+0x8e>
	...

0800494c <_printf_i>:
 800494c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	460c      	mov	r4, r1
 8004952:	4691      	mov	r9, r2
 8004954:	7e27      	ldrb	r7, [r4, #24]
 8004956:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004958:	2f78      	cmp	r7, #120	; 0x78
 800495a:	4680      	mov	r8, r0
 800495c:	469a      	mov	sl, r3
 800495e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004962:	d807      	bhi.n	8004974 <_printf_i+0x28>
 8004964:	2f62      	cmp	r7, #98	; 0x62
 8004966:	d80a      	bhi.n	800497e <_printf_i+0x32>
 8004968:	2f00      	cmp	r7, #0
 800496a:	f000 80d8 	beq.w	8004b1e <_printf_i+0x1d2>
 800496e:	2f58      	cmp	r7, #88	; 0x58
 8004970:	f000 80a3 	beq.w	8004aba <_printf_i+0x16e>
 8004974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800497c:	e03a      	b.n	80049f4 <_printf_i+0xa8>
 800497e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004982:	2b15      	cmp	r3, #21
 8004984:	d8f6      	bhi.n	8004974 <_printf_i+0x28>
 8004986:	a001      	add	r0, pc, #4	; (adr r0, 800498c <_printf_i+0x40>)
 8004988:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800498c:	080049e5 	.word	0x080049e5
 8004990:	080049f9 	.word	0x080049f9
 8004994:	08004975 	.word	0x08004975
 8004998:	08004975 	.word	0x08004975
 800499c:	08004975 	.word	0x08004975
 80049a0:	08004975 	.word	0x08004975
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	08004975 	.word	0x08004975
 80049ac:	08004975 	.word	0x08004975
 80049b0:	08004975 	.word	0x08004975
 80049b4:	08004975 	.word	0x08004975
 80049b8:	08004b05 	.word	0x08004b05
 80049bc:	08004a29 	.word	0x08004a29
 80049c0:	08004ae7 	.word	0x08004ae7
 80049c4:	08004975 	.word	0x08004975
 80049c8:	08004975 	.word	0x08004975
 80049cc:	08004b27 	.word	0x08004b27
 80049d0:	08004975 	.word	0x08004975
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	08004975 	.word	0x08004975
 80049dc:	08004975 	.word	0x08004975
 80049e0:	08004aef 	.word	0x08004aef
 80049e4:	680b      	ldr	r3, [r1, #0]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	600a      	str	r2, [r1, #0]
 80049ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0a3      	b.n	8004b40 <_printf_i+0x1f4>
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	6808      	ldr	r0, [r1, #0]
 80049fc:	062e      	lsls	r6, r5, #24
 80049fe:	f100 0304 	add.w	r3, r0, #4
 8004a02:	d50a      	bpl.n	8004a1a <_printf_i+0xce>
 8004a04:	6805      	ldr	r5, [r0, #0]
 8004a06:	600b      	str	r3, [r1, #0]
 8004a08:	2d00      	cmp	r5, #0
 8004a0a:	da03      	bge.n	8004a14 <_printf_i+0xc8>
 8004a0c:	232d      	movs	r3, #45	; 0x2d
 8004a0e:	426d      	negs	r5, r5
 8004a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a14:	485e      	ldr	r0, [pc, #376]	; (8004b90 <_printf_i+0x244>)
 8004a16:	230a      	movs	r3, #10
 8004a18:	e019      	b.n	8004a4e <_printf_i+0x102>
 8004a1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a1e:	6805      	ldr	r5, [r0, #0]
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	bf18      	it	ne
 8004a24:	b22d      	sxthne	r5, r5
 8004a26:	e7ef      	b.n	8004a08 <_printf_i+0xbc>
 8004a28:	680b      	ldr	r3, [r1, #0]
 8004a2a:	6825      	ldr	r5, [r4, #0]
 8004a2c:	1d18      	adds	r0, r3, #4
 8004a2e:	6008      	str	r0, [r1, #0]
 8004a30:	0628      	lsls	r0, r5, #24
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0xec>
 8004a34:	681d      	ldr	r5, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <_printf_i+0xf2>
 8004a38:	0669      	lsls	r1, r5, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0xe8>
 8004a3c:	881d      	ldrh	r5, [r3, #0]
 8004a3e:	4854      	ldr	r0, [pc, #336]	; (8004b90 <_printf_i+0x244>)
 8004a40:	2f6f      	cmp	r7, #111	; 0x6f
 8004a42:	bf0c      	ite	eq
 8004a44:	2308      	moveq	r3, #8
 8004a46:	230a      	movne	r3, #10
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a4e:	6866      	ldr	r6, [r4, #4]
 8004a50:	60a6      	str	r6, [r4, #8]
 8004a52:	2e00      	cmp	r6, #0
 8004a54:	bfa2      	ittt	ge
 8004a56:	6821      	ldrge	r1, [r4, #0]
 8004a58:	f021 0104 	bicge.w	r1, r1, #4
 8004a5c:	6021      	strge	r1, [r4, #0]
 8004a5e:	b90d      	cbnz	r5, 8004a64 <_printf_i+0x118>
 8004a60:	2e00      	cmp	r6, #0
 8004a62:	d04d      	beq.n	8004b00 <_printf_i+0x1b4>
 8004a64:	4616      	mov	r6, r2
 8004a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a6e:	5dc7      	ldrb	r7, [r0, r7]
 8004a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a74:	462f      	mov	r7, r5
 8004a76:	42bb      	cmp	r3, r7
 8004a78:	460d      	mov	r5, r1
 8004a7a:	d9f4      	bls.n	8004a66 <_printf_i+0x11a>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d10b      	bne.n	8004a98 <_printf_i+0x14c>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07df      	lsls	r7, r3, #31
 8004a84:	d508      	bpl.n	8004a98 <_printf_i+0x14c>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6861      	ldr	r1, [r4, #4]
 8004a8a:	4299      	cmp	r1, r3
 8004a8c:	bfde      	ittt	le
 8004a8e:	2330      	movle	r3, #48	; 0x30
 8004a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a98:	1b92      	subs	r2, r2, r6
 8004a9a:	6122      	str	r2, [r4, #16]
 8004a9c:	f8cd a000 	str.w	sl, [sp]
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	aa03      	add	r2, sp, #12
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f7ff fee2 	bl	8004870 <_printf_common>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d14c      	bne.n	8004b4a <_printf_i+0x1fe>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	b004      	add	sp, #16
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	4835      	ldr	r0, [pc, #212]	; (8004b90 <_printf_i+0x244>)
 8004abc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	680e      	ldr	r6, [r1, #0]
 8004ac4:	061f      	lsls	r7, r3, #24
 8004ac6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004aca:	600e      	str	r6, [r1, #0]
 8004acc:	d514      	bpl.n	8004af8 <_printf_i+0x1ac>
 8004ace:	07d9      	lsls	r1, r3, #31
 8004ad0:	bf44      	itt	mi
 8004ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ad6:	6023      	strmi	r3, [r4, #0]
 8004ad8:	b91d      	cbnz	r5, 8004ae2 <_printf_i+0x196>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	f023 0320 	bic.w	r3, r3, #32
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	e7b0      	b.n	8004a48 <_printf_i+0xfc>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	f043 0320 	orr.w	r3, r3, #32
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	2378      	movs	r3, #120	; 0x78
 8004af0:	4828      	ldr	r0, [pc, #160]	; (8004b94 <_printf_i+0x248>)
 8004af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004af6:	e7e3      	b.n	8004ac0 <_printf_i+0x174>
 8004af8:	065e      	lsls	r6, r3, #25
 8004afa:	bf48      	it	mi
 8004afc:	b2ad      	uxthmi	r5, r5
 8004afe:	e7e6      	b.n	8004ace <_printf_i+0x182>
 8004b00:	4616      	mov	r6, r2
 8004b02:	e7bb      	b.n	8004a7c <_printf_i+0x130>
 8004b04:	680b      	ldr	r3, [r1, #0]
 8004b06:	6826      	ldr	r6, [r4, #0]
 8004b08:	6960      	ldr	r0, [r4, #20]
 8004b0a:	1d1d      	adds	r5, r3, #4
 8004b0c:	600d      	str	r5, [r1, #0]
 8004b0e:	0635      	lsls	r5, r6, #24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0x1cc>
 8004b14:	6018      	str	r0, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <_printf_i+0x1d2>
 8004b18:	0671      	lsls	r1, r6, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0x1c8>
 8004b1c:	8018      	strh	r0, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	4616      	mov	r6, r2
 8004b24:	e7ba      	b.n	8004a9c <_printf_i+0x150>
 8004b26:	680b      	ldr	r3, [r1, #0]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	600a      	str	r2, [r1, #0]
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fb fb54 	bl	80001e0 <memchr>
 8004b38:	b108      	cbz	r0, 8004b3e <_printf_i+0x1f2>
 8004b3a:	1b80      	subs	r0, r0, r6
 8004b3c:	6060      	str	r0, [r4, #4]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	e7a8      	b.n	8004a9c <_printf_i+0x150>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d0ab      	beq.n	8004ab0 <_printf_i+0x164>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	d413      	bmi.n	8004b86 <_printf_i+0x23a>
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	4298      	cmp	r0, r3
 8004b64:	bfb8      	it	lt
 8004b66:	4618      	movlt	r0, r3
 8004b68:	e7a4      	b.n	8004ab4 <_printf_i+0x168>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	47d0      	blx	sl
 8004b74:	3001      	adds	r0, #1
 8004b76:	d09b      	beq.n	8004ab0 <_printf_i+0x164>
 8004b78:	3501      	adds	r5, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	9903      	ldr	r1, [sp, #12]
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dcf2      	bgt.n	8004b6a <_printf_i+0x21e>
 8004b84:	e7eb      	b.n	8004b5e <_printf_i+0x212>
 8004b86:	2500      	movs	r5, #0
 8004b88:	f104 0619 	add.w	r6, r4, #25
 8004b8c:	e7f5      	b.n	8004b7a <_printf_i+0x22e>
 8004b8e:	bf00      	nop
 8004b90:	08009cee 	.word	0x08009cee
 8004b94:	08009cff 	.word	0x08009cff

08004b98 <_scanf_float>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	4617      	mov	r7, r2
 8004ba0:	9303      	str	r3, [sp, #12]
 8004ba2:	688b      	ldr	r3, [r1, #8]
 8004ba4:	1e5a      	subs	r2, r3, #1
 8004ba6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004baa:	bf83      	ittte	hi
 8004bac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004bb0:	195b      	addhi	r3, r3, r5
 8004bb2:	9302      	strhi	r3, [sp, #8]
 8004bb4:	2300      	movls	r3, #0
 8004bb6:	bf86      	itte	hi
 8004bb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bbc:	608b      	strhi	r3, [r1, #8]
 8004bbe:	9302      	strls	r3, [sp, #8]
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	468b      	mov	fp, r1
 8004bc4:	2500      	movs	r5, #0
 8004bc6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004bca:	f84b 3b1c 	str.w	r3, [fp], #28
 8004bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004bd2:	4680      	mov	r8, r0
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	465e      	mov	r6, fp
 8004bd8:	46aa      	mov	sl, r5
 8004bda:	46a9      	mov	r9, r5
 8004bdc:	9501      	str	r5, [sp, #4]
 8004bde:	68a2      	ldr	r2, [r4, #8]
 8004be0:	b152      	cbz	r2, 8004bf8 <_scanf_float+0x60>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b4e      	cmp	r3, #78	; 0x4e
 8004be8:	d864      	bhi.n	8004cb4 <_scanf_float+0x11c>
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d83c      	bhi.n	8004c68 <_scanf_float+0xd0>
 8004bee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004bf2:	b2c8      	uxtb	r0, r1
 8004bf4:	280e      	cmp	r0, #14
 8004bf6:	d93a      	bls.n	8004c6e <_scanf_float+0xd6>
 8004bf8:	f1b9 0f00 	cmp.w	r9, #0
 8004bfc:	d003      	beq.n	8004c06 <_scanf_float+0x6e>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c0a:	f1ba 0f01 	cmp.w	sl, #1
 8004c0e:	f200 8113 	bhi.w	8004e38 <_scanf_float+0x2a0>
 8004c12:	455e      	cmp	r6, fp
 8004c14:	f200 8105 	bhi.w	8004e22 <_scanf_float+0x28a>
 8004c18:	2501      	movs	r5, #1
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	b007      	add	sp, #28
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c26:	2a0d      	cmp	r2, #13
 8004c28:	d8e6      	bhi.n	8004bf8 <_scanf_float+0x60>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_scanf_float+0x98>)
 8004c2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c30:	08004d6f 	.word	0x08004d6f
 8004c34:	08004bf9 	.word	0x08004bf9
 8004c38:	08004bf9 	.word	0x08004bf9
 8004c3c:	08004bf9 	.word	0x08004bf9
 8004c40:	08004dcf 	.word	0x08004dcf
 8004c44:	08004da7 	.word	0x08004da7
 8004c48:	08004bf9 	.word	0x08004bf9
 8004c4c:	08004bf9 	.word	0x08004bf9
 8004c50:	08004d7d 	.word	0x08004d7d
 8004c54:	08004bf9 	.word	0x08004bf9
 8004c58:	08004bf9 	.word	0x08004bf9
 8004c5c:	08004bf9 	.word	0x08004bf9
 8004c60:	08004bf9 	.word	0x08004bf9
 8004c64:	08004d35 	.word	0x08004d35
 8004c68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c6c:	e7db      	b.n	8004c26 <_scanf_float+0x8e>
 8004c6e:	290e      	cmp	r1, #14
 8004c70:	d8c2      	bhi.n	8004bf8 <_scanf_float+0x60>
 8004c72:	a001      	add	r0, pc, #4	; (adr r0, 8004c78 <_scanf_float+0xe0>)
 8004c74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c78:	08004d27 	.word	0x08004d27
 8004c7c:	08004bf9 	.word	0x08004bf9
 8004c80:	08004d27 	.word	0x08004d27
 8004c84:	08004dbb 	.word	0x08004dbb
 8004c88:	08004bf9 	.word	0x08004bf9
 8004c8c:	08004cd5 	.word	0x08004cd5
 8004c90:	08004d11 	.word	0x08004d11
 8004c94:	08004d11 	.word	0x08004d11
 8004c98:	08004d11 	.word	0x08004d11
 8004c9c:	08004d11 	.word	0x08004d11
 8004ca0:	08004d11 	.word	0x08004d11
 8004ca4:	08004d11 	.word	0x08004d11
 8004ca8:	08004d11 	.word	0x08004d11
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004d11 	.word	0x08004d11
 8004cb4:	2b6e      	cmp	r3, #110	; 0x6e
 8004cb6:	d809      	bhi.n	8004ccc <_scanf_float+0x134>
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d8b2      	bhi.n	8004c22 <_scanf_float+0x8a>
 8004cbc:	2b54      	cmp	r3, #84	; 0x54
 8004cbe:	d077      	beq.n	8004db0 <_scanf_float+0x218>
 8004cc0:	2b59      	cmp	r3, #89	; 0x59
 8004cc2:	d199      	bne.n	8004bf8 <_scanf_float+0x60>
 8004cc4:	2d07      	cmp	r5, #7
 8004cc6:	d197      	bne.n	8004bf8 <_scanf_float+0x60>
 8004cc8:	2508      	movs	r5, #8
 8004cca:	e029      	b.n	8004d20 <_scanf_float+0x188>
 8004ccc:	2b74      	cmp	r3, #116	; 0x74
 8004cce:	d06f      	beq.n	8004db0 <_scanf_float+0x218>
 8004cd0:	2b79      	cmp	r3, #121	; 0x79
 8004cd2:	e7f6      	b.n	8004cc2 <_scanf_float+0x12a>
 8004cd4:	6821      	ldr	r1, [r4, #0]
 8004cd6:	05c8      	lsls	r0, r1, #23
 8004cd8:	d51a      	bpl.n	8004d10 <_scanf_float+0x178>
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ce0:	6021      	str	r1, [r4, #0]
 8004ce2:	f109 0901 	add.w	r9, r9, #1
 8004ce6:	b11b      	cbz	r3, 8004cf0 <_scanf_float+0x158>
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	3201      	adds	r2, #1
 8004cec:	9302      	str	r3, [sp, #8]
 8004cee:	60a2      	str	r2, [r4, #8]
 8004cf0:	68a3      	ldr	r3, [r4, #8]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	f340 8084 	ble.w	8004e10 <_scanf_float+0x278>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	e766      	b.n	8004bde <_scanf_float+0x46>
 8004d10:	eb1a 0f05 	cmn.w	sl, r5
 8004d14:	f47f af70 	bne.w	8004bf8 <_scanf_float+0x60>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	f806 3b01 	strb.w	r3, [r6], #1
 8004d24:	e7e4      	b.n	8004cf0 <_scanf_float+0x158>
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	0610      	lsls	r0, r2, #24
 8004d2a:	f57f af65 	bpl.w	8004bf8 <_scanf_float+0x60>
 8004d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d32:	e7f4      	b.n	8004d1e <_scanf_float+0x186>
 8004d34:	f1ba 0f00 	cmp.w	sl, #0
 8004d38:	d10e      	bne.n	8004d58 <_scanf_float+0x1c0>
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	d10e      	bne.n	8004d5e <_scanf_float+0x1c6>
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d4a:	d108      	bne.n	8004d5e <_scanf_float+0x1c6>
 8004d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	f04f 0a01 	mov.w	sl, #1
 8004d56:	e7e3      	b.n	8004d20 <_scanf_float+0x188>
 8004d58:	f1ba 0f02 	cmp.w	sl, #2
 8004d5c:	d055      	beq.n	8004e0a <_scanf_float+0x272>
 8004d5e:	2d01      	cmp	r5, #1
 8004d60:	d002      	beq.n	8004d68 <_scanf_float+0x1d0>
 8004d62:	2d04      	cmp	r5, #4
 8004d64:	f47f af48 	bne.w	8004bf8 <_scanf_float+0x60>
 8004d68:	3501      	adds	r5, #1
 8004d6a:	b2ed      	uxtb	r5, r5
 8004d6c:	e7d8      	b.n	8004d20 <_scanf_float+0x188>
 8004d6e:	f1ba 0f01 	cmp.w	sl, #1
 8004d72:	f47f af41 	bne.w	8004bf8 <_scanf_float+0x60>
 8004d76:	f04f 0a02 	mov.w	sl, #2
 8004d7a:	e7d1      	b.n	8004d20 <_scanf_float+0x188>
 8004d7c:	b97d      	cbnz	r5, 8004d9e <_scanf_float+0x206>
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	f47f af3c 	bne.w	8004bfe <_scanf_float+0x66>
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d90:	f47f af39 	bne.w	8004c06 <_scanf_float+0x6e>
 8004d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d98:	6022      	str	r2, [r4, #0]
 8004d9a:	2501      	movs	r5, #1
 8004d9c:	e7c0      	b.n	8004d20 <_scanf_float+0x188>
 8004d9e:	2d03      	cmp	r5, #3
 8004da0:	d0e2      	beq.n	8004d68 <_scanf_float+0x1d0>
 8004da2:	2d05      	cmp	r5, #5
 8004da4:	e7de      	b.n	8004d64 <_scanf_float+0x1cc>
 8004da6:	2d02      	cmp	r5, #2
 8004da8:	f47f af26 	bne.w	8004bf8 <_scanf_float+0x60>
 8004dac:	2503      	movs	r5, #3
 8004dae:	e7b7      	b.n	8004d20 <_scanf_float+0x188>
 8004db0:	2d06      	cmp	r5, #6
 8004db2:	f47f af21 	bne.w	8004bf8 <_scanf_float+0x60>
 8004db6:	2507      	movs	r5, #7
 8004db8:	e7b2      	b.n	8004d20 <_scanf_float+0x188>
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	0591      	lsls	r1, r2, #22
 8004dbe:	f57f af1b 	bpl.w	8004bf8 <_scanf_float+0x60>
 8004dc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004dcc:	e7a8      	b.n	8004d20 <_scanf_float+0x188>
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004dd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004dd8:	d006      	beq.n	8004de8 <_scanf_float+0x250>
 8004dda:	0550      	lsls	r0, r2, #21
 8004ddc:	f57f af0c 	bpl.w	8004bf8 <_scanf_float+0x60>
 8004de0:	f1b9 0f00 	cmp.w	r9, #0
 8004de4:	f43f af0f 	beq.w	8004c06 <_scanf_float+0x6e>
 8004de8:	0591      	lsls	r1, r2, #22
 8004dea:	bf58      	it	pl
 8004dec:	9901      	ldrpl	r1, [sp, #4]
 8004dee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004df2:	bf58      	it	pl
 8004df4:	eba9 0101 	subpl.w	r1, r9, r1
 8004df8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004dfc:	bf58      	it	pl
 8004dfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e02:	6022      	str	r2, [r4, #0]
 8004e04:	f04f 0900 	mov.w	r9, #0
 8004e08:	e78a      	b.n	8004d20 <_scanf_float+0x188>
 8004e0a:	f04f 0a03 	mov.w	sl, #3
 8004e0e:	e787      	b.n	8004d20 <_scanf_float+0x188>
 8004e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e14:	4639      	mov	r1, r7
 8004e16:	4640      	mov	r0, r8
 8004e18:	4798      	blx	r3
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f43f aedf 	beq.w	8004bde <_scanf_float+0x46>
 8004e20:	e6ea      	b.n	8004bf8 <_scanf_float+0x60>
 8004e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e2a:	463a      	mov	r2, r7
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4798      	blx	r3
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	e6ec      	b.n	8004c12 <_scanf_float+0x7a>
 8004e38:	1e6b      	subs	r3, r5, #1
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d825      	bhi.n	8004e8a <_scanf_float+0x2f2>
 8004e3e:	2d02      	cmp	r5, #2
 8004e40:	d836      	bhi.n	8004eb0 <_scanf_float+0x318>
 8004e42:	455e      	cmp	r6, fp
 8004e44:	f67f aee8 	bls.w	8004c18 <_scanf_float+0x80>
 8004e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e50:	463a      	mov	r2, r7
 8004e52:	4640      	mov	r0, r8
 8004e54:	4798      	blx	r3
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	e7f1      	b.n	8004e42 <_scanf_float+0x2aa>
 8004e5e:	9802      	ldr	r0, [sp, #8]
 8004e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004e68:	9002      	str	r0, [sp, #8]
 8004e6a:	463a      	mov	r2, r7
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4798      	blx	r3
 8004e70:	6923      	ldr	r3, [r4, #16]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	6123      	str	r3, [r4, #16]
 8004e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e7a:	fa5f fa8a 	uxtb.w	sl, sl
 8004e7e:	f1ba 0f02 	cmp.w	sl, #2
 8004e82:	d1ec      	bne.n	8004e5e <_scanf_float+0x2c6>
 8004e84:	3d03      	subs	r5, #3
 8004e86:	b2ed      	uxtb	r5, r5
 8004e88:	1b76      	subs	r6, r6, r5
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	05da      	lsls	r2, r3, #23
 8004e8e:	d52f      	bpl.n	8004ef0 <_scanf_float+0x358>
 8004e90:	055b      	lsls	r3, r3, #21
 8004e92:	d510      	bpl.n	8004eb6 <_scanf_float+0x31e>
 8004e94:	455e      	cmp	r6, fp
 8004e96:	f67f aebf 	bls.w	8004c18 <_scanf_float+0x80>
 8004e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4798      	blx	r3
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	e7f1      	b.n	8004e94 <_scanf_float+0x2fc>
 8004eb0:	46aa      	mov	sl, r5
 8004eb2:	9602      	str	r6, [sp, #8]
 8004eb4:	e7df      	b.n	8004e76 <_scanf_float+0x2de>
 8004eb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	2965      	cmp	r1, #101	; 0x65
 8004ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ec2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	d00c      	beq.n	8004ee4 <_scanf_float+0x34c>
 8004eca:	2945      	cmp	r1, #69	; 0x45
 8004ecc:	d00a      	beq.n	8004ee4 <_scanf_float+0x34c>
 8004ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4798      	blx	r3
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	1eb5      	subs	r5, r6, #2
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ee8:	463a      	mov	r2, r7
 8004eea:	4640      	mov	r0, r8
 8004eec:	4798      	blx	r3
 8004eee:	462e      	mov	r6, r5
 8004ef0:	6825      	ldr	r5, [r4, #0]
 8004ef2:	f015 0510 	ands.w	r5, r5, #16
 8004ef6:	d158      	bne.n	8004faa <_scanf_float+0x412>
 8004ef8:	7035      	strb	r5, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	d11c      	bne.n	8004f40 <_scanf_float+0x3a8>
 8004f06:	9b01      	ldr	r3, [sp, #4]
 8004f08:	454b      	cmp	r3, r9
 8004f0a:	eba3 0209 	sub.w	r2, r3, r9
 8004f0e:	d124      	bne.n	8004f5a <_scanf_float+0x3c2>
 8004f10:	2200      	movs	r2, #0
 8004f12:	4659      	mov	r1, fp
 8004f14:	4640      	mov	r0, r8
 8004f16:	f000 fef5 	bl	8005d04 <_strtod_r>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	6821      	ldr	r1, [r4, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f011 0f02 	tst.w	r1, #2
 8004f24:	ec57 6b10 	vmov	r6, r7, d0
 8004f28:	f103 0204 	add.w	r2, r3, #4
 8004f2c:	d020      	beq.n	8004f70 <_scanf_float+0x3d8>
 8004f2e:	9903      	ldr	r1, [sp, #12]
 8004f30:	600a      	str	r2, [r1, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	e9c3 6700 	strd	r6, r7, [r3]
 8004f38:	68e3      	ldr	r3, [r4, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60e3      	str	r3, [r4, #12]
 8004f3e:	e66c      	b.n	8004c1a <_scanf_float+0x82>
 8004f40:	9b04      	ldr	r3, [sp, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0e4      	beq.n	8004f10 <_scanf_float+0x378>
 8004f46:	9905      	ldr	r1, [sp, #20]
 8004f48:	230a      	movs	r3, #10
 8004f4a:	462a      	mov	r2, r5
 8004f4c:	3101      	adds	r1, #1
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f000 ff62 	bl	8005e18 <_strtol_r>
 8004f54:	9b04      	ldr	r3, [sp, #16]
 8004f56:	9e05      	ldr	r6, [sp, #20]
 8004f58:	1ac2      	subs	r2, r0, r3
 8004f5a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f5e:	429e      	cmp	r6, r3
 8004f60:	bf28      	it	cs
 8004f62:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004f66:	4912      	ldr	r1, [pc, #72]	; (8004fb0 <_scanf_float+0x418>)
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f883 	bl	8005074 <siprintf>
 8004f6e:	e7cf      	b.n	8004f10 <_scanf_float+0x378>
 8004f70:	f011 0f04 	tst.w	r1, #4
 8004f74:	9903      	ldr	r1, [sp, #12]
 8004f76:	600a      	str	r2, [r1, #0]
 8004f78:	d1db      	bne.n	8004f32 <_scanf_float+0x39a>
 8004f7a:	f8d3 8000 	ldr.w	r8, [r3]
 8004f7e:	ee10 2a10 	vmov	r2, s0
 8004f82:	ee10 0a10 	vmov	r0, s0
 8004f86:	463b      	mov	r3, r7
 8004f88:	4639      	mov	r1, r7
 8004f8a:	f7fb fdcf 	bl	8000b2c <__aeabi_dcmpun>
 8004f8e:	b128      	cbz	r0, 8004f9c <_scanf_float+0x404>
 8004f90:	4808      	ldr	r0, [pc, #32]	; (8004fb4 <_scanf_float+0x41c>)
 8004f92:	f000 f869 	bl	8005068 <nanf>
 8004f96:	ed88 0a00 	vstr	s0, [r8]
 8004f9a:	e7cd      	b.n	8004f38 <_scanf_float+0x3a0>
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb fe22 	bl	8000be8 <__aeabi_d2f>
 8004fa4:	f8c8 0000 	str.w	r0, [r8]
 8004fa8:	e7c6      	b.n	8004f38 <_scanf_float+0x3a0>
 8004faa:	2500      	movs	r5, #0
 8004fac:	e635      	b.n	8004c1a <_scanf_float+0x82>
 8004fae:	bf00      	nop
 8004fb0:	08009d10 	.word	0x08009d10
 8004fb4:	08009e1b 	.word	0x08009e1b

08004fb8 <iprintf>:
 8004fb8:	b40f      	push	{r0, r1, r2, r3}
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <iprintf+0x2c>)
 8004fbc:	b513      	push	{r0, r1, r4, lr}
 8004fbe:	681c      	ldr	r4, [r3, #0]
 8004fc0:	b124      	cbz	r4, 8004fcc <iprintf+0x14>
 8004fc2:	69a3      	ldr	r3, [r4, #24]
 8004fc4:	b913      	cbnz	r3, 8004fcc <iprintf+0x14>
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f001 fe16 	bl	8006bf8 <__sinit>
 8004fcc:	ab05      	add	r3, sp, #20
 8004fce:	9a04      	ldr	r2, [sp, #16]
 8004fd0:	68a1      	ldr	r1, [r4, #8]
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f003 f957 	bl	8008288 <_vfiprintf_r>
 8004fda:	b002      	add	sp, #8
 8004fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe0:	b004      	add	sp, #16
 8004fe2:	4770      	bx	lr
 8004fe4:	20000014 	.word	0x20000014

08004fe8 <rand>:
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <rand+0x60>)
 8004fea:	b510      	push	{r4, lr}
 8004fec:	681c      	ldr	r4, [r3, #0]
 8004fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ff0:	b9b3      	cbnz	r3, 8005020 <rand+0x38>
 8004ff2:	2018      	movs	r0, #24
 8004ff4:	f002 fa26 	bl	8007444 <malloc>
 8004ff8:	63a0      	str	r0, [r4, #56]	; 0x38
 8004ffa:	b928      	cbnz	r0, 8005008 <rand+0x20>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <rand+0x64>)
 8005000:	4813      	ldr	r0, [pc, #76]	; (8005050 <rand+0x68>)
 8005002:	214e      	movs	r1, #78	; 0x4e
 8005004:	f000 ff0a 	bl	8005e1c <__assert_func>
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <rand+0x6c>)
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <rand+0x70>)
 800500c:	e9c0 2300 	strd	r2, r3, [r0]
 8005010:	4b12      	ldr	r3, [pc, #72]	; (800505c <rand+0x74>)
 8005012:	6083      	str	r3, [r0, #8]
 8005014:	230b      	movs	r3, #11
 8005016:	8183      	strh	r3, [r0, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	2300      	movs	r3, #0
 800501c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005020:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005022:	480f      	ldr	r0, [pc, #60]	; (8005060 <rand+0x78>)
 8005024:	690a      	ldr	r2, [r1, #16]
 8005026:	694b      	ldr	r3, [r1, #20]
 8005028:	4c0e      	ldr	r4, [pc, #56]	; (8005064 <rand+0x7c>)
 800502a:	4350      	muls	r0, r2
 800502c:	fb04 0003 	mla	r0, r4, r3, r0
 8005030:	fba2 3404 	umull	r3, r4, r2, r4
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	4404      	add	r4, r0
 8005038:	f144 0000 	adc.w	r0, r4, #0
 800503c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005040:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005044:	bd10      	pop	{r4, pc}
 8005046:	bf00      	nop
 8005048:	20000014 	.word	0x20000014
 800504c:	08009d15 	.word	0x08009d15
 8005050:	08009d2c 	.word	0x08009d2c
 8005054:	abcd330e 	.word	0xabcd330e
 8005058:	e66d1234 	.word	0xe66d1234
 800505c:	0005deec 	.word	0x0005deec
 8005060:	5851f42d 	.word	0x5851f42d
 8005064:	4c957f2d 	.word	0x4c957f2d

08005068 <nanf>:
 8005068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005070 <nanf+0x8>
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	7fc00000 	.word	0x7fc00000

08005074 <siprintf>:
 8005074:	b40e      	push	{r1, r2, r3}
 8005076:	b500      	push	{lr}
 8005078:	b09c      	sub	sp, #112	; 0x70
 800507a:	ab1d      	add	r3, sp, #116	; 0x74
 800507c:	9002      	str	r0, [sp, #8]
 800507e:	9006      	str	r0, [sp, #24]
 8005080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005084:	4809      	ldr	r0, [pc, #36]	; (80050ac <siprintf+0x38>)
 8005086:	9107      	str	r1, [sp, #28]
 8005088:	9104      	str	r1, [sp, #16]
 800508a:	4909      	ldr	r1, [pc, #36]	; (80050b0 <siprintf+0x3c>)
 800508c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005090:	9105      	str	r1, [sp, #20]
 8005092:	6800      	ldr	r0, [r0, #0]
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	a902      	add	r1, sp, #8
 8005098:	f002 ffcc 	bl	8008034 <_svfiprintf_r>
 800509c:	9b02      	ldr	r3, [sp, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	b01c      	add	sp, #112	; 0x70
 80050a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a8:	b003      	add	sp, #12
 80050aa:	4770      	bx	lr
 80050ac:	20000014 	.word	0x20000014
 80050b0:	ffff0208 	.word	0xffff0208

080050b4 <sulp>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4604      	mov	r4, r0
 80050b8:	460d      	mov	r5, r1
 80050ba:	ec45 4b10 	vmov	d0, r4, r5
 80050be:	4616      	mov	r6, r2
 80050c0:	f002 fd54 	bl	8007b6c <__ulp>
 80050c4:	ec51 0b10 	vmov	r0, r1, d0
 80050c8:	b17e      	cbz	r6, 80050ea <sulp+0x36>
 80050ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80050ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	dd09      	ble.n	80050ea <sulp+0x36>
 80050d6:	051b      	lsls	r3, r3, #20
 80050d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050dc:	2400      	movs	r4, #0
 80050de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	f7fb fa87 	bl	80005f8 <__aeabi_dmul>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	0000      	movs	r0, r0
	...

080050f0 <_strtod_l>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	b0a3      	sub	sp, #140	; 0x8c
 80050f6:	461f      	mov	r7, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	931e      	str	r3, [sp, #120]	; 0x78
 80050fc:	4ba4      	ldr	r3, [pc, #656]	; (8005390 <_strtod_l+0x2a0>)
 80050fe:	9219      	str	r2, [sp, #100]	; 0x64
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	9307      	str	r3, [sp, #28]
 8005104:	4604      	mov	r4, r0
 8005106:	4618      	mov	r0, r3
 8005108:	4688      	mov	r8, r1
 800510a:	f7fb f861 	bl	80001d0 <strlen>
 800510e:	f04f 0a00 	mov.w	sl, #0
 8005112:	4605      	mov	r5, r0
 8005114:	f04f 0b00 	mov.w	fp, #0
 8005118:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800511c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	2a2b      	cmp	r2, #43	; 0x2b
 8005122:	d04c      	beq.n	80051be <_strtod_l+0xce>
 8005124:	d839      	bhi.n	800519a <_strtod_l+0xaa>
 8005126:	2a0d      	cmp	r2, #13
 8005128:	d832      	bhi.n	8005190 <_strtod_l+0xa0>
 800512a:	2a08      	cmp	r2, #8
 800512c:	d832      	bhi.n	8005194 <_strtod_l+0xa4>
 800512e:	2a00      	cmp	r2, #0
 8005130:	d03c      	beq.n	80051ac <_strtod_l+0xbc>
 8005132:	2300      	movs	r3, #0
 8005134:	930e      	str	r3, [sp, #56]	; 0x38
 8005136:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005138:	7833      	ldrb	r3, [r6, #0]
 800513a:	2b30      	cmp	r3, #48	; 0x30
 800513c:	f040 80b4 	bne.w	80052a8 <_strtod_l+0x1b8>
 8005140:	7873      	ldrb	r3, [r6, #1]
 8005142:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005146:	2b58      	cmp	r3, #88	; 0x58
 8005148:	d16c      	bne.n	8005224 <_strtod_l+0x134>
 800514a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	ab1e      	add	r3, sp, #120	; 0x78
 8005150:	9702      	str	r7, [sp, #8]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	4a8f      	ldr	r2, [pc, #572]	; (8005394 <_strtod_l+0x2a4>)
 8005156:	ab1f      	add	r3, sp, #124	; 0x7c
 8005158:	a91d      	add	r1, sp, #116	; 0x74
 800515a:	4620      	mov	r0, r4
 800515c:	f001 fe62 	bl	8006e24 <__gethex>
 8005160:	f010 0707 	ands.w	r7, r0, #7
 8005164:	4605      	mov	r5, r0
 8005166:	d005      	beq.n	8005174 <_strtod_l+0x84>
 8005168:	2f06      	cmp	r7, #6
 800516a:	d12a      	bne.n	80051c2 <_strtod_l+0xd2>
 800516c:	3601      	adds	r6, #1
 800516e:	2300      	movs	r3, #0
 8005170:	961d      	str	r6, [sp, #116]	; 0x74
 8005172:	930e      	str	r3, [sp, #56]	; 0x38
 8005174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 8596 	bne.w	8005ca8 <_strtod_l+0xbb8>
 800517c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800517e:	b1db      	cbz	r3, 80051b8 <_strtod_l+0xc8>
 8005180:	4652      	mov	r2, sl
 8005182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005186:	ec43 2b10 	vmov	d0, r2, r3
 800518a:	b023      	add	sp, #140	; 0x8c
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	2a20      	cmp	r2, #32
 8005192:	d1ce      	bne.n	8005132 <_strtod_l+0x42>
 8005194:	3301      	adds	r3, #1
 8005196:	931d      	str	r3, [sp, #116]	; 0x74
 8005198:	e7c0      	b.n	800511c <_strtod_l+0x2c>
 800519a:	2a2d      	cmp	r2, #45	; 0x2d
 800519c:	d1c9      	bne.n	8005132 <_strtod_l+0x42>
 800519e:	2201      	movs	r2, #1
 80051a0:	920e      	str	r2, [sp, #56]	; 0x38
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	921d      	str	r2, [sp, #116]	; 0x74
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1c4      	bne.n	8005136 <_strtod_l+0x46>
 80051ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 8576 	bne.w	8005ca4 <_strtod_l+0xbb4>
 80051b8:	4652      	mov	r2, sl
 80051ba:	465b      	mov	r3, fp
 80051bc:	e7e3      	b.n	8005186 <_strtod_l+0x96>
 80051be:	2200      	movs	r2, #0
 80051c0:	e7ee      	b.n	80051a0 <_strtod_l+0xb0>
 80051c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80051c4:	b13a      	cbz	r2, 80051d6 <_strtod_l+0xe6>
 80051c6:	2135      	movs	r1, #53	; 0x35
 80051c8:	a820      	add	r0, sp, #128	; 0x80
 80051ca:	f002 fdda 	bl	8007d82 <__copybits>
 80051ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80051d0:	4620      	mov	r0, r4
 80051d2:	f002 f99f 	bl	8007514 <_Bfree>
 80051d6:	3f01      	subs	r7, #1
 80051d8:	2f05      	cmp	r7, #5
 80051da:	d807      	bhi.n	80051ec <_strtod_l+0xfc>
 80051dc:	e8df f007 	tbb	[pc, r7]
 80051e0:	1d180b0e 	.word	0x1d180b0e
 80051e4:	030e      	.short	0x030e
 80051e6:	f04f 0b00 	mov.w	fp, #0
 80051ea:	46da      	mov	sl, fp
 80051ec:	0728      	lsls	r0, r5, #28
 80051ee:	d5c1      	bpl.n	8005174 <_strtod_l+0x84>
 80051f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80051f4:	e7be      	b.n	8005174 <_strtod_l+0x84>
 80051f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80051fa:	e7f7      	b.n	80051ec <_strtod_l+0xfc>
 80051fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005200:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005202:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005206:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800520a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800520e:	e7ed      	b.n	80051ec <_strtod_l+0xfc>
 8005210:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005398 <_strtod_l+0x2a8>
 8005214:	f04f 0a00 	mov.w	sl, #0
 8005218:	e7e8      	b.n	80051ec <_strtod_l+0xfc>
 800521a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800521e:	f04f 3aff 	mov.w	sl, #4294967295
 8005222:	e7e3      	b.n	80051ec <_strtod_l+0xfc>
 8005224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	921d      	str	r2, [sp, #116]	; 0x74
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b30      	cmp	r3, #48	; 0x30
 800522e:	d0f9      	beq.n	8005224 <_strtod_l+0x134>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d09f      	beq.n	8005174 <_strtod_l+0x84>
 8005234:	2301      	movs	r3, #1
 8005236:	f04f 0900 	mov.w	r9, #0
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800523e:	930a      	str	r3, [sp, #40]	; 0x28
 8005240:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005244:	464f      	mov	r7, r9
 8005246:	220a      	movs	r2, #10
 8005248:	981d      	ldr	r0, [sp, #116]	; 0x74
 800524a:	7806      	ldrb	r6, [r0, #0]
 800524c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005250:	b2d9      	uxtb	r1, r3
 8005252:	2909      	cmp	r1, #9
 8005254:	d92a      	bls.n	80052ac <_strtod_l+0x1bc>
 8005256:	9907      	ldr	r1, [sp, #28]
 8005258:	462a      	mov	r2, r5
 800525a:	f003 f9a0 	bl	800859e <strncmp>
 800525e:	b398      	cbz	r0, 80052c8 <_strtod_l+0x1d8>
 8005260:	2000      	movs	r0, #0
 8005262:	4633      	mov	r3, r6
 8005264:	463d      	mov	r5, r7
 8005266:	9007      	str	r0, [sp, #28]
 8005268:	4602      	mov	r2, r0
 800526a:	2b65      	cmp	r3, #101	; 0x65
 800526c:	d001      	beq.n	8005272 <_strtod_l+0x182>
 800526e:	2b45      	cmp	r3, #69	; 0x45
 8005270:	d118      	bne.n	80052a4 <_strtod_l+0x1b4>
 8005272:	b91d      	cbnz	r5, 800527c <_strtod_l+0x18c>
 8005274:	9b04      	ldr	r3, [sp, #16]
 8005276:	4303      	orrs	r3, r0
 8005278:	d098      	beq.n	80051ac <_strtod_l+0xbc>
 800527a:	2500      	movs	r5, #0
 800527c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005280:	f108 0301 	add.w	r3, r8, #1
 8005284:	931d      	str	r3, [sp, #116]	; 0x74
 8005286:	f898 3001 	ldrb.w	r3, [r8, #1]
 800528a:	2b2b      	cmp	r3, #43	; 0x2b
 800528c:	d075      	beq.n	800537a <_strtod_l+0x28a>
 800528e:	2b2d      	cmp	r3, #45	; 0x2d
 8005290:	d07b      	beq.n	800538a <_strtod_l+0x29a>
 8005292:	f04f 0c00 	mov.w	ip, #0
 8005296:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800529a:	2909      	cmp	r1, #9
 800529c:	f240 8082 	bls.w	80053a4 <_strtod_l+0x2b4>
 80052a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80052a4:	2600      	movs	r6, #0
 80052a6:	e09d      	b.n	80053e4 <_strtod_l+0x2f4>
 80052a8:	2300      	movs	r3, #0
 80052aa:	e7c4      	b.n	8005236 <_strtod_l+0x146>
 80052ac:	2f08      	cmp	r7, #8
 80052ae:	bfd8      	it	le
 80052b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80052b2:	f100 0001 	add.w	r0, r0, #1
 80052b6:	bfda      	itte	le
 80052b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80052bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80052be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80052c2:	3701      	adds	r7, #1
 80052c4:	901d      	str	r0, [sp, #116]	; 0x74
 80052c6:	e7bf      	b.n	8005248 <_strtod_l+0x158>
 80052c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052ca:	195a      	adds	r2, r3, r5
 80052cc:	921d      	str	r2, [sp, #116]	; 0x74
 80052ce:	5d5b      	ldrb	r3, [r3, r5]
 80052d0:	2f00      	cmp	r7, #0
 80052d2:	d037      	beq.n	8005344 <_strtod_l+0x254>
 80052d4:	9007      	str	r0, [sp, #28]
 80052d6:	463d      	mov	r5, r7
 80052d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80052dc:	2a09      	cmp	r2, #9
 80052de:	d912      	bls.n	8005306 <_strtod_l+0x216>
 80052e0:	2201      	movs	r2, #1
 80052e2:	e7c2      	b.n	800526a <_strtod_l+0x17a>
 80052e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	921d      	str	r2, [sp, #116]	; 0x74
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	3001      	adds	r0, #1
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	d0f8      	beq.n	80052e4 <_strtod_l+0x1f4>
 80052f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80052f6:	2a08      	cmp	r2, #8
 80052f8:	f200 84db 	bhi.w	8005cb2 <_strtod_l+0xbc2>
 80052fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80052fe:	9007      	str	r0, [sp, #28]
 8005300:	2000      	movs	r0, #0
 8005302:	920a      	str	r2, [sp, #40]	; 0x28
 8005304:	4605      	mov	r5, r0
 8005306:	3b30      	subs	r3, #48	; 0x30
 8005308:	f100 0201 	add.w	r2, r0, #1
 800530c:	d014      	beq.n	8005338 <_strtod_l+0x248>
 800530e:	9907      	ldr	r1, [sp, #28]
 8005310:	4411      	add	r1, r2
 8005312:	9107      	str	r1, [sp, #28]
 8005314:	462a      	mov	r2, r5
 8005316:	eb00 0e05 	add.w	lr, r0, r5
 800531a:	210a      	movs	r1, #10
 800531c:	4572      	cmp	r2, lr
 800531e:	d113      	bne.n	8005348 <_strtod_l+0x258>
 8005320:	182a      	adds	r2, r5, r0
 8005322:	2a08      	cmp	r2, #8
 8005324:	f105 0501 	add.w	r5, r5, #1
 8005328:	4405      	add	r5, r0
 800532a:	dc1c      	bgt.n	8005366 <_strtod_l+0x276>
 800532c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800532e:	220a      	movs	r2, #10
 8005330:	fb02 3301 	mla	r3, r2, r1, r3
 8005334:	9309      	str	r3, [sp, #36]	; 0x24
 8005336:	2200      	movs	r2, #0
 8005338:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	911d      	str	r1, [sp, #116]	; 0x74
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	4610      	mov	r0, r2
 8005342:	e7c9      	b.n	80052d8 <_strtod_l+0x1e8>
 8005344:	4638      	mov	r0, r7
 8005346:	e7d2      	b.n	80052ee <_strtod_l+0x1fe>
 8005348:	2a08      	cmp	r2, #8
 800534a:	dc04      	bgt.n	8005356 <_strtod_l+0x266>
 800534c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800534e:	434e      	muls	r6, r1
 8005350:	9609      	str	r6, [sp, #36]	; 0x24
 8005352:	3201      	adds	r2, #1
 8005354:	e7e2      	b.n	800531c <_strtod_l+0x22c>
 8005356:	f102 0c01 	add.w	ip, r2, #1
 800535a:	f1bc 0f10 	cmp.w	ip, #16
 800535e:	bfd8      	it	le
 8005360:	fb01 f909 	mulle.w	r9, r1, r9
 8005364:	e7f5      	b.n	8005352 <_strtod_l+0x262>
 8005366:	2d10      	cmp	r5, #16
 8005368:	bfdc      	itt	le
 800536a:	220a      	movle	r2, #10
 800536c:	fb02 3909 	mlale	r9, r2, r9, r3
 8005370:	e7e1      	b.n	8005336 <_strtod_l+0x246>
 8005372:	2300      	movs	r3, #0
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	2201      	movs	r2, #1
 8005378:	e77c      	b.n	8005274 <_strtod_l+0x184>
 800537a:	f04f 0c00 	mov.w	ip, #0
 800537e:	f108 0302 	add.w	r3, r8, #2
 8005382:	931d      	str	r3, [sp, #116]	; 0x74
 8005384:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005388:	e785      	b.n	8005296 <_strtod_l+0x1a6>
 800538a:	f04f 0c01 	mov.w	ip, #1
 800538e:	e7f6      	b.n	800537e <_strtod_l+0x28e>
 8005390:	0800a068 	.word	0x0800a068
 8005394:	08009d8c 	.word	0x08009d8c
 8005398:	7ff00000 	.word	0x7ff00000
 800539c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	911d      	str	r1, [sp, #116]	; 0x74
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d0f9      	beq.n	800539c <_strtod_l+0x2ac>
 80053a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80053ac:	2908      	cmp	r1, #8
 80053ae:	f63f af79 	bhi.w	80052a4 <_strtod_l+0x1b4>
 80053b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053b8:	9308      	str	r3, [sp, #32]
 80053ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053bc:	1c59      	adds	r1, r3, #1
 80053be:	911d      	str	r1, [sp, #116]	; 0x74
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80053c6:	2e09      	cmp	r6, #9
 80053c8:	d937      	bls.n	800543a <_strtod_l+0x34a>
 80053ca:	9e08      	ldr	r6, [sp, #32]
 80053cc:	1b89      	subs	r1, r1, r6
 80053ce:	2908      	cmp	r1, #8
 80053d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80053d4:	dc02      	bgt.n	80053dc <_strtod_l+0x2ec>
 80053d6:	4576      	cmp	r6, lr
 80053d8:	bfa8      	it	ge
 80053da:	4676      	movge	r6, lr
 80053dc:	f1bc 0f00 	cmp.w	ip, #0
 80053e0:	d000      	beq.n	80053e4 <_strtod_l+0x2f4>
 80053e2:	4276      	negs	r6, r6
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d14f      	bne.n	8005488 <_strtod_l+0x398>
 80053e8:	9904      	ldr	r1, [sp, #16]
 80053ea:	4301      	orrs	r1, r0
 80053ec:	f47f aec2 	bne.w	8005174 <_strtod_l+0x84>
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	f47f aedb 	bne.w	80051ac <_strtod_l+0xbc>
 80053f6:	2b69      	cmp	r3, #105	; 0x69
 80053f8:	d027      	beq.n	800544a <_strtod_l+0x35a>
 80053fa:	dc24      	bgt.n	8005446 <_strtod_l+0x356>
 80053fc:	2b49      	cmp	r3, #73	; 0x49
 80053fe:	d024      	beq.n	800544a <_strtod_l+0x35a>
 8005400:	2b4e      	cmp	r3, #78	; 0x4e
 8005402:	f47f aed3 	bne.w	80051ac <_strtod_l+0xbc>
 8005406:	499e      	ldr	r1, [pc, #632]	; (8005680 <_strtod_l+0x590>)
 8005408:	a81d      	add	r0, sp, #116	; 0x74
 800540a:	f001 ff63 	bl	80072d4 <__match>
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f aecc 	beq.w	80051ac <_strtod_l+0xbc>
 8005414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b28      	cmp	r3, #40	; 0x28
 800541a:	d12d      	bne.n	8005478 <_strtod_l+0x388>
 800541c:	4999      	ldr	r1, [pc, #612]	; (8005684 <_strtod_l+0x594>)
 800541e:	aa20      	add	r2, sp, #128	; 0x80
 8005420:	a81d      	add	r0, sp, #116	; 0x74
 8005422:	f001 ff6b 	bl	80072fc <__hexnan>
 8005426:	2805      	cmp	r0, #5
 8005428:	d126      	bne.n	8005478 <_strtod_l+0x388>
 800542a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800542c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005430:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005434:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005438:	e69c      	b.n	8005174 <_strtod_l+0x84>
 800543a:	210a      	movs	r1, #10
 800543c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005440:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005444:	e7b9      	b.n	80053ba <_strtod_l+0x2ca>
 8005446:	2b6e      	cmp	r3, #110	; 0x6e
 8005448:	e7db      	b.n	8005402 <_strtod_l+0x312>
 800544a:	498f      	ldr	r1, [pc, #572]	; (8005688 <_strtod_l+0x598>)
 800544c:	a81d      	add	r0, sp, #116	; 0x74
 800544e:	f001 ff41 	bl	80072d4 <__match>
 8005452:	2800      	cmp	r0, #0
 8005454:	f43f aeaa 	beq.w	80051ac <_strtod_l+0xbc>
 8005458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800545a:	498c      	ldr	r1, [pc, #560]	; (800568c <_strtod_l+0x59c>)
 800545c:	3b01      	subs	r3, #1
 800545e:	a81d      	add	r0, sp, #116	; 0x74
 8005460:	931d      	str	r3, [sp, #116]	; 0x74
 8005462:	f001 ff37 	bl	80072d4 <__match>
 8005466:	b910      	cbnz	r0, 800546e <_strtod_l+0x37e>
 8005468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800546a:	3301      	adds	r3, #1
 800546c:	931d      	str	r3, [sp, #116]	; 0x74
 800546e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800569c <_strtod_l+0x5ac>
 8005472:	f04f 0a00 	mov.w	sl, #0
 8005476:	e67d      	b.n	8005174 <_strtod_l+0x84>
 8005478:	4885      	ldr	r0, [pc, #532]	; (8005690 <_strtod_l+0x5a0>)
 800547a:	f003 f835 	bl	80084e8 <nan>
 800547e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005482:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005486:	e675      	b.n	8005174 <_strtod_l+0x84>
 8005488:	9b07      	ldr	r3, [sp, #28]
 800548a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800548c:	1af3      	subs	r3, r6, r3
 800548e:	2f00      	cmp	r7, #0
 8005490:	bf08      	it	eq
 8005492:	462f      	moveq	r7, r5
 8005494:	2d10      	cmp	r5, #16
 8005496:	9308      	str	r3, [sp, #32]
 8005498:	46a8      	mov	r8, r5
 800549a:	bfa8      	it	ge
 800549c:	f04f 0810 	movge.w	r8, #16
 80054a0:	f7fb f830 	bl	8000504 <__aeabi_ui2d>
 80054a4:	2d09      	cmp	r5, #9
 80054a6:	4682      	mov	sl, r0
 80054a8:	468b      	mov	fp, r1
 80054aa:	dd13      	ble.n	80054d4 <_strtod_l+0x3e4>
 80054ac:	4b79      	ldr	r3, [pc, #484]	; (8005694 <_strtod_l+0x5a4>)
 80054ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054b6:	f7fb f89f 	bl	80005f8 <__aeabi_dmul>
 80054ba:	4682      	mov	sl, r0
 80054bc:	4648      	mov	r0, r9
 80054be:	468b      	mov	fp, r1
 80054c0:	f7fb f820 	bl	8000504 <__aeabi_ui2d>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4650      	mov	r0, sl
 80054ca:	4659      	mov	r1, fp
 80054cc:	f7fa fede 	bl	800028c <__adddf3>
 80054d0:	4682      	mov	sl, r0
 80054d2:	468b      	mov	fp, r1
 80054d4:	2d0f      	cmp	r5, #15
 80054d6:	dc38      	bgt.n	800554a <_strtod_l+0x45a>
 80054d8:	9b08      	ldr	r3, [sp, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f43f ae4a 	beq.w	8005174 <_strtod_l+0x84>
 80054e0:	dd24      	ble.n	800552c <_strtod_l+0x43c>
 80054e2:	2b16      	cmp	r3, #22
 80054e4:	dc0b      	bgt.n	80054fe <_strtod_l+0x40e>
 80054e6:	4d6b      	ldr	r5, [pc, #428]	; (8005694 <_strtod_l+0x5a4>)
 80054e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80054ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80054f0:	4652      	mov	r2, sl
 80054f2:	465b      	mov	r3, fp
 80054f4:	f7fb f880 	bl	80005f8 <__aeabi_dmul>
 80054f8:	4682      	mov	sl, r0
 80054fa:	468b      	mov	fp, r1
 80054fc:	e63a      	b.n	8005174 <_strtod_l+0x84>
 80054fe:	9a08      	ldr	r2, [sp, #32]
 8005500:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005504:	4293      	cmp	r3, r2
 8005506:	db20      	blt.n	800554a <_strtod_l+0x45a>
 8005508:	4c62      	ldr	r4, [pc, #392]	; (8005694 <_strtod_l+0x5a4>)
 800550a:	f1c5 050f 	rsb	r5, r5, #15
 800550e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005512:	4652      	mov	r2, sl
 8005514:	465b      	mov	r3, fp
 8005516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551a:	f7fb f86d 	bl	80005f8 <__aeabi_dmul>
 800551e:	9b08      	ldr	r3, [sp, #32]
 8005520:	1b5d      	subs	r5, r3, r5
 8005522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800552a:	e7e3      	b.n	80054f4 <_strtod_l+0x404>
 800552c:	9b08      	ldr	r3, [sp, #32]
 800552e:	3316      	adds	r3, #22
 8005530:	db0b      	blt.n	800554a <_strtod_l+0x45a>
 8005532:	9b07      	ldr	r3, [sp, #28]
 8005534:	4a57      	ldr	r2, [pc, #348]	; (8005694 <_strtod_l+0x5a4>)
 8005536:	1b9e      	subs	r6, r3, r6
 8005538:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800553c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005540:	4650      	mov	r0, sl
 8005542:	4659      	mov	r1, fp
 8005544:	f7fb f982 	bl	800084c <__aeabi_ddiv>
 8005548:	e7d6      	b.n	80054f8 <_strtod_l+0x408>
 800554a:	9b08      	ldr	r3, [sp, #32]
 800554c:	eba5 0808 	sub.w	r8, r5, r8
 8005550:	4498      	add	r8, r3
 8005552:	f1b8 0f00 	cmp.w	r8, #0
 8005556:	dd71      	ble.n	800563c <_strtod_l+0x54c>
 8005558:	f018 030f 	ands.w	r3, r8, #15
 800555c:	d00a      	beq.n	8005574 <_strtod_l+0x484>
 800555e:	494d      	ldr	r1, [pc, #308]	; (8005694 <_strtod_l+0x5a4>)
 8005560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005564:	4652      	mov	r2, sl
 8005566:	465b      	mov	r3, fp
 8005568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800556c:	f7fb f844 	bl	80005f8 <__aeabi_dmul>
 8005570:	4682      	mov	sl, r0
 8005572:	468b      	mov	fp, r1
 8005574:	f038 080f 	bics.w	r8, r8, #15
 8005578:	d04d      	beq.n	8005616 <_strtod_l+0x526>
 800557a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800557e:	dd22      	ble.n	80055c6 <_strtod_l+0x4d6>
 8005580:	2500      	movs	r5, #0
 8005582:	462e      	mov	r6, r5
 8005584:	9509      	str	r5, [sp, #36]	; 0x24
 8005586:	9507      	str	r5, [sp, #28]
 8005588:	2322      	movs	r3, #34	; 0x22
 800558a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800569c <_strtod_l+0x5ac>
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	f04f 0a00 	mov.w	sl, #0
 8005594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	f43f adec 	beq.w	8005174 <_strtod_l+0x84>
 800559c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800559e:	4620      	mov	r0, r4
 80055a0:	f001 ffb8 	bl	8007514 <_Bfree>
 80055a4:	9907      	ldr	r1, [sp, #28]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f001 ffb4 	bl	8007514 <_Bfree>
 80055ac:	4631      	mov	r1, r6
 80055ae:	4620      	mov	r0, r4
 80055b0:	f001 ffb0 	bl	8007514 <_Bfree>
 80055b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055b6:	4620      	mov	r0, r4
 80055b8:	f001 ffac 	bl	8007514 <_Bfree>
 80055bc:	4629      	mov	r1, r5
 80055be:	4620      	mov	r0, r4
 80055c0:	f001 ffa8 	bl	8007514 <_Bfree>
 80055c4:	e5d6      	b.n	8005174 <_strtod_l+0x84>
 80055c6:	2300      	movs	r3, #0
 80055c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055cc:	4650      	mov	r0, sl
 80055ce:	4659      	mov	r1, fp
 80055d0:	4699      	mov	r9, r3
 80055d2:	f1b8 0f01 	cmp.w	r8, #1
 80055d6:	dc21      	bgt.n	800561c <_strtod_l+0x52c>
 80055d8:	b10b      	cbz	r3, 80055de <_strtod_l+0x4ee>
 80055da:	4682      	mov	sl, r0
 80055dc:	468b      	mov	fp, r1
 80055de:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <_strtod_l+0x5a8>)
 80055e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80055e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80055e8:	4652      	mov	r2, sl
 80055ea:	465b      	mov	r3, fp
 80055ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 80055f0:	f7fb f802 	bl	80005f8 <__aeabi_dmul>
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <_strtod_l+0x5ac>)
 80055f6:	460a      	mov	r2, r1
 80055f8:	400b      	ands	r3, r1
 80055fa:	4929      	ldr	r1, [pc, #164]	; (80056a0 <_strtod_l+0x5b0>)
 80055fc:	428b      	cmp	r3, r1
 80055fe:	4682      	mov	sl, r0
 8005600:	d8be      	bhi.n	8005580 <_strtod_l+0x490>
 8005602:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005606:	428b      	cmp	r3, r1
 8005608:	bf86      	itte	hi
 800560a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80056a4 <_strtod_l+0x5b4>
 800560e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005612:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005616:	2300      	movs	r3, #0
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	e081      	b.n	8005720 <_strtod_l+0x630>
 800561c:	f018 0f01 	tst.w	r8, #1
 8005620:	d007      	beq.n	8005632 <_strtod_l+0x542>
 8005622:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <_strtod_l+0x5a8>)
 8005624:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_dmul>
 8005630:	2301      	movs	r3, #1
 8005632:	f109 0901 	add.w	r9, r9, #1
 8005636:	ea4f 0868 	mov.w	r8, r8, asr #1
 800563a:	e7ca      	b.n	80055d2 <_strtod_l+0x4e2>
 800563c:	d0eb      	beq.n	8005616 <_strtod_l+0x526>
 800563e:	f1c8 0800 	rsb	r8, r8, #0
 8005642:	f018 020f 	ands.w	r2, r8, #15
 8005646:	d00a      	beq.n	800565e <_strtod_l+0x56e>
 8005648:	4b12      	ldr	r3, [pc, #72]	; (8005694 <_strtod_l+0x5a4>)
 800564a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564e:	4650      	mov	r0, sl
 8005650:	4659      	mov	r1, fp
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fb f8f9 	bl	800084c <__aeabi_ddiv>
 800565a:	4682      	mov	sl, r0
 800565c:	468b      	mov	fp, r1
 800565e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005662:	d0d8      	beq.n	8005616 <_strtod_l+0x526>
 8005664:	f1b8 0f1f 	cmp.w	r8, #31
 8005668:	dd1e      	ble.n	80056a8 <_strtod_l+0x5b8>
 800566a:	2500      	movs	r5, #0
 800566c:	462e      	mov	r6, r5
 800566e:	9509      	str	r5, [sp, #36]	; 0x24
 8005670:	9507      	str	r5, [sp, #28]
 8005672:	2322      	movs	r3, #34	; 0x22
 8005674:	f04f 0a00 	mov.w	sl, #0
 8005678:	f04f 0b00 	mov.w	fp, #0
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	e789      	b.n	8005594 <_strtod_l+0x4a4>
 8005680:	08009ce9 	.word	0x08009ce9
 8005684:	08009da0 	.word	0x08009da0
 8005688:	08009ce1 	.word	0x08009ce1
 800568c:	08009f20 	.word	0x08009f20
 8005690:	08009e1b 	.word	0x08009e1b
 8005694:	0800a108 	.word	0x0800a108
 8005698:	0800a0e0 	.word	0x0800a0e0
 800569c:	7ff00000 	.word	0x7ff00000
 80056a0:	7ca00000 	.word	0x7ca00000
 80056a4:	7fefffff 	.word	0x7fefffff
 80056a8:	f018 0310 	ands.w	r3, r8, #16
 80056ac:	bf18      	it	ne
 80056ae:	236a      	movne	r3, #106	; 0x6a
 80056b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005a68 <_strtod_l+0x978>
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	4650      	mov	r0, sl
 80056b8:	4659      	mov	r1, fp
 80056ba:	2300      	movs	r3, #0
 80056bc:	f018 0f01 	tst.w	r8, #1
 80056c0:	d004      	beq.n	80056cc <_strtod_l+0x5dc>
 80056c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056c6:	f7fa ff97 	bl	80005f8 <__aeabi_dmul>
 80056ca:	2301      	movs	r3, #1
 80056cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80056d0:	f109 0908 	add.w	r9, r9, #8
 80056d4:	d1f2      	bne.n	80056bc <_strtod_l+0x5cc>
 80056d6:	b10b      	cbz	r3, 80056dc <_strtod_l+0x5ec>
 80056d8:	4682      	mov	sl, r0
 80056da:	468b      	mov	fp, r1
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	b1bb      	cbz	r3, 8005710 <_strtod_l+0x620>
 80056e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80056e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	4659      	mov	r1, fp
 80056ec:	dd10      	ble.n	8005710 <_strtod_l+0x620>
 80056ee:	2b1f      	cmp	r3, #31
 80056f0:	f340 8128 	ble.w	8005944 <_strtod_l+0x854>
 80056f4:	2b34      	cmp	r3, #52	; 0x34
 80056f6:	bfde      	ittt	le
 80056f8:	3b20      	suble	r3, #32
 80056fa:	f04f 32ff 	movle.w	r2, #4294967295
 80056fe:	fa02 f303 	lslle.w	r3, r2, r3
 8005702:	f04f 0a00 	mov.w	sl, #0
 8005706:	bfcc      	ite	gt
 8005708:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800570c:	ea03 0b01 	andle.w	fp, r3, r1
 8005710:	2200      	movs	r2, #0
 8005712:	2300      	movs	r3, #0
 8005714:	4650      	mov	r0, sl
 8005716:	4659      	mov	r1, fp
 8005718:	f7fb f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800571c:	2800      	cmp	r0, #0
 800571e:	d1a4      	bne.n	800566a <_strtod_l+0x57a>
 8005720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005726:	462b      	mov	r3, r5
 8005728:	463a      	mov	r2, r7
 800572a:	4620      	mov	r0, r4
 800572c:	f001 ff5e 	bl	80075ec <__s2b>
 8005730:	9009      	str	r0, [sp, #36]	; 0x24
 8005732:	2800      	cmp	r0, #0
 8005734:	f43f af24 	beq.w	8005580 <_strtod_l+0x490>
 8005738:	9b07      	ldr	r3, [sp, #28]
 800573a:	1b9e      	subs	r6, r3, r6
 800573c:	9b08      	ldr	r3, [sp, #32]
 800573e:	2b00      	cmp	r3, #0
 8005740:	bfb4      	ite	lt
 8005742:	4633      	movlt	r3, r6
 8005744:	2300      	movge	r3, #0
 8005746:	9310      	str	r3, [sp, #64]	; 0x40
 8005748:	9b08      	ldr	r3, [sp, #32]
 800574a:	2500      	movs	r5, #0
 800574c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005750:	9318      	str	r3, [sp, #96]	; 0x60
 8005752:	462e      	mov	r6, r5
 8005754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005756:	4620      	mov	r0, r4
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	f001 fe9b 	bl	8007494 <_Balloc>
 800575e:	9007      	str	r0, [sp, #28]
 8005760:	2800      	cmp	r0, #0
 8005762:	f43f af11 	beq.w	8005588 <_strtod_l+0x498>
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	3202      	adds	r2, #2
 800576c:	f103 010c 	add.w	r1, r3, #12
 8005770:	0092      	lsls	r2, r2, #2
 8005772:	300c      	adds	r0, #12
 8005774:	f001 fe80 	bl	8007478 <memcpy>
 8005778:	ec4b ab10 	vmov	d0, sl, fp
 800577c:	aa20      	add	r2, sp, #128	; 0x80
 800577e:	a91f      	add	r1, sp, #124	; 0x7c
 8005780:	4620      	mov	r0, r4
 8005782:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005786:	f002 fa6d 	bl	8007c64 <__d2b>
 800578a:	901e      	str	r0, [sp, #120]	; 0x78
 800578c:	2800      	cmp	r0, #0
 800578e:	f43f aefb 	beq.w	8005588 <_strtod_l+0x498>
 8005792:	2101      	movs	r1, #1
 8005794:	4620      	mov	r0, r4
 8005796:	f001 ffc3 	bl	8007720 <__i2b>
 800579a:	4606      	mov	r6, r0
 800579c:	2800      	cmp	r0, #0
 800579e:	f43f aef3 	beq.w	8005588 <_strtod_l+0x498>
 80057a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057a4:	9904      	ldr	r1, [sp, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfab      	itete	ge
 80057aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80057ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80057ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80057b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80057b4:	bfac      	ite	ge
 80057b6:	eb03 0902 	addge.w	r9, r3, r2
 80057ba:	1ad7      	sublt	r7, r2, r3
 80057bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057be:	eba3 0801 	sub.w	r8, r3, r1
 80057c2:	4490      	add	r8, r2
 80057c4:	4ba3      	ldr	r3, [pc, #652]	; (8005a54 <_strtod_l+0x964>)
 80057c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80057ca:	4598      	cmp	r8, r3
 80057cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057d0:	f280 80cc 	bge.w	800596c <_strtod_l+0x87c>
 80057d4:	eba3 0308 	sub.w	r3, r3, r8
 80057d8:	2b1f      	cmp	r3, #31
 80057da:	eba2 0203 	sub.w	r2, r2, r3
 80057de:	f04f 0101 	mov.w	r1, #1
 80057e2:	f300 80b6 	bgt.w	8005952 <_strtod_l+0x862>
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	9311      	str	r3, [sp, #68]	; 0x44
 80057ec:	2300      	movs	r3, #0
 80057ee:	930c      	str	r3, [sp, #48]	; 0x30
 80057f0:	eb09 0802 	add.w	r8, r9, r2
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	45c1      	cmp	r9, r8
 80057f8:	4417      	add	r7, r2
 80057fa:	441f      	add	r7, r3
 80057fc:	464b      	mov	r3, r9
 80057fe:	bfa8      	it	ge
 8005800:	4643      	movge	r3, r8
 8005802:	42bb      	cmp	r3, r7
 8005804:	bfa8      	it	ge
 8005806:	463b      	movge	r3, r7
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfc2      	ittt	gt
 800580c:	eba8 0803 	subgt.w	r8, r8, r3
 8005810:	1aff      	subgt	r7, r7, r3
 8005812:	eba9 0903 	subgt.w	r9, r9, r3
 8005816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	dd17      	ble.n	800584c <_strtod_l+0x75c>
 800581c:	4631      	mov	r1, r6
 800581e:	461a      	mov	r2, r3
 8005820:	4620      	mov	r0, r4
 8005822:	f002 f839 	bl	8007898 <__pow5mult>
 8005826:	4606      	mov	r6, r0
 8005828:	2800      	cmp	r0, #0
 800582a:	f43f aead 	beq.w	8005588 <_strtod_l+0x498>
 800582e:	4601      	mov	r1, r0
 8005830:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005832:	4620      	mov	r0, r4
 8005834:	f001 ff8a 	bl	800774c <__multiply>
 8005838:	900f      	str	r0, [sp, #60]	; 0x3c
 800583a:	2800      	cmp	r0, #0
 800583c:	f43f aea4 	beq.w	8005588 <_strtod_l+0x498>
 8005840:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005842:	4620      	mov	r0, r4
 8005844:	f001 fe66 	bl	8007514 <_Bfree>
 8005848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800584a:	931e      	str	r3, [sp, #120]	; 0x78
 800584c:	f1b8 0f00 	cmp.w	r8, #0
 8005850:	f300 8091 	bgt.w	8005976 <_strtod_l+0x886>
 8005854:	9b08      	ldr	r3, [sp, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	dd08      	ble.n	800586c <_strtod_l+0x77c>
 800585a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800585c:	9907      	ldr	r1, [sp, #28]
 800585e:	4620      	mov	r0, r4
 8005860:	f002 f81a 	bl	8007898 <__pow5mult>
 8005864:	9007      	str	r0, [sp, #28]
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f ae8e 	beq.w	8005588 <_strtod_l+0x498>
 800586c:	2f00      	cmp	r7, #0
 800586e:	dd08      	ble.n	8005882 <_strtod_l+0x792>
 8005870:	9907      	ldr	r1, [sp, #28]
 8005872:	463a      	mov	r2, r7
 8005874:	4620      	mov	r0, r4
 8005876:	f002 f869 	bl	800794c <__lshift>
 800587a:	9007      	str	r0, [sp, #28]
 800587c:	2800      	cmp	r0, #0
 800587e:	f43f ae83 	beq.w	8005588 <_strtod_l+0x498>
 8005882:	f1b9 0f00 	cmp.w	r9, #0
 8005886:	dd08      	ble.n	800589a <_strtod_l+0x7aa>
 8005888:	4631      	mov	r1, r6
 800588a:	464a      	mov	r2, r9
 800588c:	4620      	mov	r0, r4
 800588e:	f002 f85d 	bl	800794c <__lshift>
 8005892:	4606      	mov	r6, r0
 8005894:	2800      	cmp	r0, #0
 8005896:	f43f ae77 	beq.w	8005588 <_strtod_l+0x498>
 800589a:	9a07      	ldr	r2, [sp, #28]
 800589c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800589e:	4620      	mov	r0, r4
 80058a0:	f002 f8dc 	bl	8007a5c <__mdiff>
 80058a4:	4605      	mov	r5, r0
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f43f ae6e 	beq.w	8005588 <_strtod_l+0x498>
 80058ac:	68c3      	ldr	r3, [r0, #12]
 80058ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b0:	2300      	movs	r3, #0
 80058b2:	60c3      	str	r3, [r0, #12]
 80058b4:	4631      	mov	r1, r6
 80058b6:	f002 f8b5 	bl	8007a24 <__mcmp>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	da65      	bge.n	800598a <_strtod_l+0x89a>
 80058be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058c0:	ea53 030a 	orrs.w	r3, r3, sl
 80058c4:	f040 8087 	bne.w	80059d6 <_strtod_l+0x8e6>
 80058c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8082 	bne.w	80059d6 <_strtod_l+0x8e6>
 80058d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058d6:	0d1b      	lsrs	r3, r3, #20
 80058d8:	051b      	lsls	r3, r3, #20
 80058da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058de:	d97a      	bls.n	80059d6 <_strtod_l+0x8e6>
 80058e0:	696b      	ldr	r3, [r5, #20]
 80058e2:	b913      	cbnz	r3, 80058ea <_strtod_l+0x7fa>
 80058e4:	692b      	ldr	r3, [r5, #16]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	dd75      	ble.n	80059d6 <_strtod_l+0x8e6>
 80058ea:	4629      	mov	r1, r5
 80058ec:	2201      	movs	r2, #1
 80058ee:	4620      	mov	r0, r4
 80058f0:	f002 f82c 	bl	800794c <__lshift>
 80058f4:	4631      	mov	r1, r6
 80058f6:	4605      	mov	r5, r0
 80058f8:	f002 f894 	bl	8007a24 <__mcmp>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	dd6a      	ble.n	80059d6 <_strtod_l+0x8e6>
 8005900:	9904      	ldr	r1, [sp, #16]
 8005902:	4a55      	ldr	r2, [pc, #340]	; (8005a58 <_strtod_l+0x968>)
 8005904:	465b      	mov	r3, fp
 8005906:	2900      	cmp	r1, #0
 8005908:	f000 8085 	beq.w	8005a16 <_strtod_l+0x926>
 800590c:	ea02 010b 	and.w	r1, r2, fp
 8005910:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005914:	dc7f      	bgt.n	8005a16 <_strtod_l+0x926>
 8005916:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800591a:	f77f aeaa 	ble.w	8005672 <_strtod_l+0x582>
 800591e:	4a4f      	ldr	r2, [pc, #316]	; (8005a5c <_strtod_l+0x96c>)
 8005920:	2300      	movs	r3, #0
 8005922:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005926:	4650      	mov	r0, sl
 8005928:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800592c:	4659      	mov	r1, fp
 800592e:	f7fa fe63 	bl	80005f8 <__aeabi_dmul>
 8005932:	460b      	mov	r3, r1
 8005934:	4303      	orrs	r3, r0
 8005936:	bf08      	it	eq
 8005938:	2322      	moveq	r3, #34	; 0x22
 800593a:	4682      	mov	sl, r0
 800593c:	468b      	mov	fp, r1
 800593e:	bf08      	it	eq
 8005940:	6023      	streq	r3, [r4, #0]
 8005942:	e62b      	b.n	800559c <_strtod_l+0x4ac>
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	ea03 0a0a 	and.w	sl, r3, sl
 8005950:	e6de      	b.n	8005710 <_strtod_l+0x620>
 8005952:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005956:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800595a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800595e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005962:	fa01 f308 	lsl.w	r3, r1, r8
 8005966:	930c      	str	r3, [sp, #48]	; 0x30
 8005968:	9111      	str	r1, [sp, #68]	; 0x44
 800596a:	e741      	b.n	80057f0 <_strtod_l+0x700>
 800596c:	2300      	movs	r3, #0
 800596e:	930c      	str	r3, [sp, #48]	; 0x30
 8005970:	2301      	movs	r3, #1
 8005972:	9311      	str	r3, [sp, #68]	; 0x44
 8005974:	e73c      	b.n	80057f0 <_strtod_l+0x700>
 8005976:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005978:	4642      	mov	r2, r8
 800597a:	4620      	mov	r0, r4
 800597c:	f001 ffe6 	bl	800794c <__lshift>
 8005980:	901e      	str	r0, [sp, #120]	; 0x78
 8005982:	2800      	cmp	r0, #0
 8005984:	f47f af66 	bne.w	8005854 <_strtod_l+0x764>
 8005988:	e5fe      	b.n	8005588 <_strtod_l+0x498>
 800598a:	465f      	mov	r7, fp
 800598c:	d16e      	bne.n	8005a6c <_strtod_l+0x97c>
 800598e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005994:	b342      	cbz	r2, 80059e8 <_strtod_l+0x8f8>
 8005996:	4a32      	ldr	r2, [pc, #200]	; (8005a60 <_strtod_l+0x970>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d128      	bne.n	80059ee <_strtod_l+0x8fe>
 800599c:	9b04      	ldr	r3, [sp, #16]
 800599e:	4650      	mov	r0, sl
 80059a0:	b1eb      	cbz	r3, 80059de <_strtod_l+0x8ee>
 80059a2:	4a2d      	ldr	r2, [pc, #180]	; (8005a58 <_strtod_l+0x968>)
 80059a4:	403a      	ands	r2, r7
 80059a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80059aa:	f04f 31ff 	mov.w	r1, #4294967295
 80059ae:	d819      	bhi.n	80059e4 <_strtod_l+0x8f4>
 80059b0:	0d12      	lsrs	r2, r2, #20
 80059b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	4298      	cmp	r0, r3
 80059bc:	d117      	bne.n	80059ee <_strtod_l+0x8fe>
 80059be:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <_strtod_l+0x974>)
 80059c0:	429f      	cmp	r7, r3
 80059c2:	d102      	bne.n	80059ca <_strtod_l+0x8da>
 80059c4:	3001      	adds	r0, #1
 80059c6:	f43f addf 	beq.w	8005588 <_strtod_l+0x498>
 80059ca:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <_strtod_l+0x968>)
 80059cc:	403b      	ands	r3, r7
 80059ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80059d2:	f04f 0a00 	mov.w	sl, #0
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1a0      	bne.n	800591e <_strtod_l+0x82e>
 80059dc:	e5de      	b.n	800559c <_strtod_l+0x4ac>
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	e7ea      	b.n	80059ba <_strtod_l+0x8ca>
 80059e4:	460b      	mov	r3, r1
 80059e6:	e7e8      	b.n	80059ba <_strtod_l+0x8ca>
 80059e8:	ea53 030a 	orrs.w	r3, r3, sl
 80059ec:	d088      	beq.n	8005900 <_strtod_l+0x810>
 80059ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059f0:	b1db      	cbz	r3, 8005a2a <_strtod_l+0x93a>
 80059f2:	423b      	tst	r3, r7
 80059f4:	d0ef      	beq.n	80059d6 <_strtod_l+0x8e6>
 80059f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059f8:	9a04      	ldr	r2, [sp, #16]
 80059fa:	4650      	mov	r0, sl
 80059fc:	4659      	mov	r1, fp
 80059fe:	b1c3      	cbz	r3, 8005a32 <_strtod_l+0x942>
 8005a00:	f7ff fb58 	bl	80050b4 <sulp>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a0c:	f7fa fc3e 	bl	800028c <__adddf3>
 8005a10:	4682      	mov	sl, r0
 8005a12:	468b      	mov	fp, r1
 8005a14:	e7df      	b.n	80059d6 <_strtod_l+0x8e6>
 8005a16:	4013      	ands	r3, r2
 8005a18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a24:	f04f 3aff 	mov.w	sl, #4294967295
 8005a28:	e7d5      	b.n	80059d6 <_strtod_l+0x8e6>
 8005a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a2c:	ea13 0f0a 	tst.w	r3, sl
 8005a30:	e7e0      	b.n	80059f4 <_strtod_l+0x904>
 8005a32:	f7ff fb3f 	bl	80050b4 <sulp>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a3e:	f7fa fc23 	bl	8000288 <__aeabi_dsub>
 8005a42:	2200      	movs	r2, #0
 8005a44:	2300      	movs	r3, #0
 8005a46:	4682      	mov	sl, r0
 8005a48:	468b      	mov	fp, r1
 8005a4a:	f7fb f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d0c1      	beq.n	80059d6 <_strtod_l+0x8e6>
 8005a52:	e60e      	b.n	8005672 <_strtod_l+0x582>
 8005a54:	fffffc02 	.word	0xfffffc02
 8005a58:	7ff00000 	.word	0x7ff00000
 8005a5c:	39500000 	.word	0x39500000
 8005a60:	000fffff 	.word	0x000fffff
 8005a64:	7fefffff 	.word	0x7fefffff
 8005a68:	08009db8 	.word	0x08009db8
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f002 f954 	bl	8007d1c <__ratio>
 8005a74:	ec59 8b10 	vmov	r8, r9, d0
 8005a78:	ee10 0a10 	vmov	r0, s0
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a82:	4649      	mov	r1, r9
 8005a84:	f7fb f834 	bl	8000af0 <__aeabi_dcmple>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d07c      	beq.n	8005b86 <_strtod_l+0xa96>
 8005a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04c      	beq.n	8005b2c <_strtod_l+0xa3c>
 8005a92:	4b95      	ldr	r3, [pc, #596]	; (8005ce8 <_strtod_l+0xbf8>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005a9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005ce8 <_strtod_l+0xbf8>
 8005a9e:	f04f 0800 	mov.w	r8, #0
 8005aa2:	4b92      	ldr	r3, [pc, #584]	; (8005cec <_strtod_l+0xbfc>)
 8005aa4:	403b      	ands	r3, r7
 8005aa6:	9311      	str	r3, [sp, #68]	; 0x44
 8005aa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005aaa:	4b91      	ldr	r3, [pc, #580]	; (8005cf0 <_strtod_l+0xc00>)
 8005aac:	429a      	cmp	r2, r3
 8005aae:	f040 80b2 	bne.w	8005c16 <_strtod_l+0xb26>
 8005ab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005abe:	ec4b ab10 	vmov	d0, sl, fp
 8005ac2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005ac6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005aca:	f002 f84f 	bl	8007b6c <__ulp>
 8005ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad2:	ec53 2b10 	vmov	r2, r3, d0
 8005ad6:	f7fa fd8f 	bl	80005f8 <__aeabi_dmul>
 8005ada:	4652      	mov	r2, sl
 8005adc:	465b      	mov	r3, fp
 8005ade:	f7fa fbd5 	bl	800028c <__adddf3>
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4981      	ldr	r1, [pc, #516]	; (8005cec <_strtod_l+0xbfc>)
 8005ae6:	4a83      	ldr	r2, [pc, #524]	; (8005cf4 <_strtod_l+0xc04>)
 8005ae8:	4019      	ands	r1, r3
 8005aea:	4291      	cmp	r1, r2
 8005aec:	4682      	mov	sl, r0
 8005aee:	d95e      	bls.n	8005bae <_strtod_l+0xabe>
 8005af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d103      	bne.n	8005b02 <_strtod_l+0xa12>
 8005afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afc:	3301      	adds	r3, #1
 8005afe:	f43f ad43 	beq.w	8005588 <_strtod_l+0x498>
 8005b02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005d00 <_strtod_l+0xc10>
 8005b06:	f04f 3aff 	mov.w	sl, #4294967295
 8005b0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f001 fd01 	bl	8007514 <_Bfree>
 8005b12:	9907      	ldr	r1, [sp, #28]
 8005b14:	4620      	mov	r0, r4
 8005b16:	f001 fcfd 	bl	8007514 <_Bfree>
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f001 fcf9 	bl	8007514 <_Bfree>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4620      	mov	r0, r4
 8005b26:	f001 fcf5 	bl	8007514 <_Bfree>
 8005b2a:	e613      	b.n	8005754 <_strtod_l+0x664>
 8005b2c:	f1ba 0f00 	cmp.w	sl, #0
 8005b30:	d11b      	bne.n	8005b6a <_strtod_l+0xa7a>
 8005b32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b36:	b9f3      	cbnz	r3, 8005b76 <_strtod_l+0xa86>
 8005b38:	4b6b      	ldr	r3, [pc, #428]	; (8005ce8 <_strtod_l+0xbf8>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f7fa ffcc 	bl	8000adc <__aeabi_dcmplt>
 8005b44:	b9d0      	cbnz	r0, 8005b7c <_strtod_l+0xa8c>
 8005b46:	4640      	mov	r0, r8
 8005b48:	4649      	mov	r1, r9
 8005b4a:	4b6b      	ldr	r3, [pc, #428]	; (8005cf8 <_strtod_l+0xc08>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f7fa fd53 	bl	80005f8 <__aeabi_dmul>
 8005b52:	4680      	mov	r8, r0
 8005b54:	4689      	mov	r9, r1
 8005b56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005b5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005b64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005b68:	e79b      	b.n	8005aa2 <_strtod_l+0x9b2>
 8005b6a:	f1ba 0f01 	cmp.w	sl, #1
 8005b6e:	d102      	bne.n	8005b76 <_strtod_l+0xa86>
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	f43f ad7e 	beq.w	8005672 <_strtod_l+0x582>
 8005b76:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <_strtod_l+0xc0c>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	e78c      	b.n	8005a96 <_strtod_l+0x9a6>
 8005b7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005cf8 <_strtod_l+0xc08>
 8005b80:	f04f 0800 	mov.w	r8, #0
 8005b84:	e7e7      	b.n	8005b56 <_strtod_l+0xa66>
 8005b86:	4b5c      	ldr	r3, [pc, #368]	; (8005cf8 <_strtod_l+0xc08>)
 8005b88:	4640      	mov	r0, r8
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b94:	4680      	mov	r8, r0
 8005b96:	4689      	mov	r9, r1
 8005b98:	b933      	cbnz	r3, 8005ba8 <_strtod_l+0xab8>
 8005b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b9e:	9012      	str	r0, [sp, #72]	; 0x48
 8005ba0:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ba2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005ba6:	e7dd      	b.n	8005b64 <_strtod_l+0xa74>
 8005ba8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005bac:	e7f9      	b.n	8005ba2 <_strtod_l+0xab2>
 8005bae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005bb2:	9b04      	ldr	r3, [sp, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1a8      	bne.n	8005b0a <_strtod_l+0xa1a>
 8005bb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bbe:	0d1b      	lsrs	r3, r3, #20
 8005bc0:	051b      	lsls	r3, r3, #20
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d1a1      	bne.n	8005b0a <_strtod_l+0xa1a>
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4649      	mov	r1, r9
 8005bca:	f7fb f875 	bl	8000cb8 <__aeabi_d2lz>
 8005bce:	f7fa fce5 	bl	800059c <__aeabi_l2d>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fb55 	bl	8000288 <__aeabi_dsub>
 8005bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005be0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005be4:	ea43 030a 	orr.w	r3, r3, sl
 8005be8:	4313      	orrs	r3, r2
 8005bea:	4680      	mov	r8, r0
 8005bec:	4689      	mov	r9, r1
 8005bee:	d053      	beq.n	8005c98 <_strtod_l+0xba8>
 8005bf0:	a335      	add	r3, pc, #212	; (adr r3, 8005cc8 <_strtod_l+0xbd8>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa ff71 	bl	8000adc <__aeabi_dcmplt>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	f47f acce 	bne.w	800559c <_strtod_l+0x4ac>
 8005c00:	a333      	add	r3, pc, #204	; (adr r3, 8005cd0 <_strtod_l+0xbe0>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f7fa ff85 	bl	8000b18 <__aeabi_dcmpgt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f43f af7b 	beq.w	8005b0a <_strtod_l+0xa1a>
 8005c14:	e4c2      	b.n	800559c <_strtod_l+0x4ac>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	b333      	cbz	r3, 8005c68 <_strtod_l+0xb78>
 8005c1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c20:	d822      	bhi.n	8005c68 <_strtod_l+0xb78>
 8005c22:	a32d      	add	r3, pc, #180	; (adr r3, 8005cd8 <_strtod_l+0xbe8>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa ff60 	bl	8000af0 <__aeabi_dcmple>
 8005c30:	b1a0      	cbz	r0, 8005c5c <_strtod_l+0xb6c>
 8005c32:	4649      	mov	r1, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	f7fa ffb7 	bl	8000ba8 <__aeabi_d2uiz>
 8005c3a:	2801      	cmp	r0, #1
 8005c3c:	bf38      	it	cc
 8005c3e:	2001      	movcc	r0, #1
 8005c40:	f7fa fc60 	bl	8000504 <__aeabi_ui2d>
 8005c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c46:	4680      	mov	r8, r0
 8005c48:	4689      	mov	r9, r1
 8005c4a:	bb13      	cbnz	r3, 8005c92 <_strtod_l+0xba2>
 8005c4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c50:	9014      	str	r0, [sp, #80]	; 0x50
 8005c52:	9315      	str	r3, [sp, #84]	; 0x54
 8005c54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	930d      	str	r3, [sp, #52]	; 0x34
 8005c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005c70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c74:	f001 ff7a 	bl	8007b6c <__ulp>
 8005c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c7c:	ec53 2b10 	vmov	r2, r3, d0
 8005c80:	f7fa fcba 	bl	80005f8 <__aeabi_dmul>
 8005c84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c88:	f7fa fb00 	bl	800028c <__adddf3>
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	468b      	mov	fp, r1
 8005c90:	e78f      	b.n	8005bb2 <_strtod_l+0xac2>
 8005c92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005c96:	e7dd      	b.n	8005c54 <_strtod_l+0xb64>
 8005c98:	a311      	add	r3, pc, #68	; (adr r3, 8005ce0 <_strtod_l+0xbf0>)
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f7fa ff1d 	bl	8000adc <__aeabi_dcmplt>
 8005ca2:	e7b4      	b.n	8005c0e <_strtod_l+0xb1e>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005caa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	f7ff ba65 	b.w	800517c <_strtod_l+0x8c>
 8005cb2:	2b65      	cmp	r3, #101	; 0x65
 8005cb4:	f43f ab5d 	beq.w	8005372 <_strtod_l+0x282>
 8005cb8:	2b45      	cmp	r3, #69	; 0x45
 8005cba:	f43f ab5a 	beq.w	8005372 <_strtod_l+0x282>
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f7ff bb92 	b.w	80053e8 <_strtod_l+0x2f8>
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	94a03595 	.word	0x94a03595
 8005ccc:	3fdfffff 	.word	0x3fdfffff
 8005cd0:	35afe535 	.word	0x35afe535
 8005cd4:	3fe00000 	.word	0x3fe00000
 8005cd8:	ffc00000 	.word	0xffc00000
 8005cdc:	41dfffff 	.word	0x41dfffff
 8005ce0:	94a03595 	.word	0x94a03595
 8005ce4:	3fcfffff 	.word	0x3fcfffff
 8005ce8:	3ff00000 	.word	0x3ff00000
 8005cec:	7ff00000 	.word	0x7ff00000
 8005cf0:	7fe00000 	.word	0x7fe00000
 8005cf4:	7c9fffff 	.word	0x7c9fffff
 8005cf8:	3fe00000 	.word	0x3fe00000
 8005cfc:	bff00000 	.word	0xbff00000
 8005d00:	7fefffff 	.word	0x7fefffff

08005d04 <_strtod_r>:
 8005d04:	4b01      	ldr	r3, [pc, #4]	; (8005d0c <_strtod_r+0x8>)
 8005d06:	f7ff b9f3 	b.w	80050f0 <_strtod_l>
 8005d0a:	bf00      	nop
 8005d0c:	2000007c 	.word	0x2000007c

08005d10 <_strtol_l.isra.0>:
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d16:	d001      	beq.n	8005d1c <_strtol_l.isra.0+0xc>
 8005d18:	2b24      	cmp	r3, #36	; 0x24
 8005d1a:	d906      	bls.n	8005d2a <_strtol_l.isra.0+0x1a>
 8005d1c:	f7fe faa0 	bl	8004260 <__errno>
 8005d20:	2316      	movs	r3, #22
 8005d22:	6003      	str	r3, [r0, #0]
 8005d24:	2000      	movs	r0, #0
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	4f3a      	ldr	r7, [pc, #232]	; (8005e14 <_strtol_l.isra.0+0x104>)
 8005d2c:	468e      	mov	lr, r1
 8005d2e:	4676      	mov	r6, lr
 8005d30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005d34:	5de5      	ldrb	r5, [r4, r7]
 8005d36:	f015 0508 	ands.w	r5, r5, #8
 8005d3a:	d1f8      	bne.n	8005d2e <_strtol_l.isra.0+0x1e>
 8005d3c:	2c2d      	cmp	r4, #45	; 0x2d
 8005d3e:	d134      	bne.n	8005daa <_strtol_l.isra.0+0x9a>
 8005d40:	f89e 4000 	ldrb.w	r4, [lr]
 8005d44:	f04f 0801 	mov.w	r8, #1
 8005d48:	f106 0e02 	add.w	lr, r6, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05c      	beq.n	8005e0a <_strtol_l.isra.0+0xfa>
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d10c      	bne.n	8005d6e <_strtol_l.isra.0+0x5e>
 8005d54:	2c30      	cmp	r4, #48	; 0x30
 8005d56:	d10a      	bne.n	8005d6e <_strtol_l.isra.0+0x5e>
 8005d58:	f89e 4000 	ldrb.w	r4, [lr]
 8005d5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d60:	2c58      	cmp	r4, #88	; 0x58
 8005d62:	d14d      	bne.n	8005e00 <_strtol_l.isra.0+0xf0>
 8005d64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f10e 0e02 	add.w	lr, lr, #2
 8005d6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005d72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d76:	2600      	movs	r6, #0
 8005d78:	fbbc f9f3 	udiv	r9, ip, r3
 8005d7c:	4635      	mov	r5, r6
 8005d7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005d86:	2f09      	cmp	r7, #9
 8005d88:	d818      	bhi.n	8005dbc <_strtol_l.isra.0+0xac>
 8005d8a:	463c      	mov	r4, r7
 8005d8c:	42a3      	cmp	r3, r4
 8005d8e:	dd24      	ble.n	8005dda <_strtol_l.isra.0+0xca>
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	db1f      	blt.n	8005dd4 <_strtol_l.isra.0+0xc4>
 8005d94:	45a9      	cmp	r9, r5
 8005d96:	d31d      	bcc.n	8005dd4 <_strtol_l.isra.0+0xc4>
 8005d98:	d101      	bne.n	8005d9e <_strtol_l.isra.0+0x8e>
 8005d9a:	45a2      	cmp	sl, r4
 8005d9c:	db1a      	blt.n	8005dd4 <_strtol_l.isra.0+0xc4>
 8005d9e:	fb05 4503 	mla	r5, r5, r3, r4
 8005da2:	2601      	movs	r6, #1
 8005da4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005da8:	e7eb      	b.n	8005d82 <_strtol_l.isra.0+0x72>
 8005daa:	2c2b      	cmp	r4, #43	; 0x2b
 8005dac:	bf08      	it	eq
 8005dae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005db2:	46a8      	mov	r8, r5
 8005db4:	bf08      	it	eq
 8005db6:	f106 0e02 	addeq.w	lr, r6, #2
 8005dba:	e7c7      	b.n	8005d4c <_strtol_l.isra.0+0x3c>
 8005dbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005dc0:	2f19      	cmp	r7, #25
 8005dc2:	d801      	bhi.n	8005dc8 <_strtol_l.isra.0+0xb8>
 8005dc4:	3c37      	subs	r4, #55	; 0x37
 8005dc6:	e7e1      	b.n	8005d8c <_strtol_l.isra.0+0x7c>
 8005dc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005dcc:	2f19      	cmp	r7, #25
 8005dce:	d804      	bhi.n	8005dda <_strtol_l.isra.0+0xca>
 8005dd0:	3c57      	subs	r4, #87	; 0x57
 8005dd2:	e7db      	b.n	8005d8c <_strtol_l.isra.0+0x7c>
 8005dd4:	f04f 36ff 	mov.w	r6, #4294967295
 8005dd8:	e7e4      	b.n	8005da4 <_strtol_l.isra.0+0x94>
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	da05      	bge.n	8005dea <_strtol_l.isra.0+0xda>
 8005dde:	2322      	movs	r3, #34	; 0x22
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	4665      	mov	r5, ip
 8005de4:	b942      	cbnz	r2, 8005df8 <_strtol_l.isra.0+0xe8>
 8005de6:	4628      	mov	r0, r5
 8005de8:	e79d      	b.n	8005d26 <_strtol_l.isra.0+0x16>
 8005dea:	f1b8 0f00 	cmp.w	r8, #0
 8005dee:	d000      	beq.n	8005df2 <_strtol_l.isra.0+0xe2>
 8005df0:	426d      	negs	r5, r5
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	d0f7      	beq.n	8005de6 <_strtol_l.isra.0+0xd6>
 8005df6:	b10e      	cbz	r6, 8005dfc <_strtol_l.isra.0+0xec>
 8005df8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	e7f2      	b.n	8005de6 <_strtol_l.isra.0+0xd6>
 8005e00:	2430      	movs	r4, #48	; 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1b3      	bne.n	8005d6e <_strtol_l.isra.0+0x5e>
 8005e06:	2308      	movs	r3, #8
 8005e08:	e7b1      	b.n	8005d6e <_strtol_l.isra.0+0x5e>
 8005e0a:	2c30      	cmp	r4, #48	; 0x30
 8005e0c:	d0a4      	beq.n	8005d58 <_strtol_l.isra.0+0x48>
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e7ad      	b.n	8005d6e <_strtol_l.isra.0+0x5e>
 8005e12:	bf00      	nop
 8005e14:	08009e1d 	.word	0x08009e1d

08005e18 <_strtol_r>:
 8005e18:	f7ff bf7a 	b.w	8005d10 <_strtol_l.isra.0>

08005e1c <__assert_func>:
 8005e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e1e:	4614      	mov	r4, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <__assert_func+0x2c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4605      	mov	r5, r0
 8005e28:	68d8      	ldr	r0, [r3, #12]
 8005e2a:	b14c      	cbz	r4, 8005e40 <__assert_func+0x24>
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <__assert_func+0x30>)
 8005e2e:	9100      	str	r1, [sp, #0]
 8005e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e34:	4906      	ldr	r1, [pc, #24]	; (8005e50 <__assert_func+0x34>)
 8005e36:	462b      	mov	r3, r5
 8005e38:	f000 ff5c 	bl	8006cf4 <fiprintf>
 8005e3c:	f002 fca2 	bl	8008784 <abort>
 8005e40:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <__assert_func+0x38>)
 8005e42:	461c      	mov	r4, r3
 8005e44:	e7f3      	b.n	8005e2e <__assert_func+0x12>
 8005e46:	bf00      	nop
 8005e48:	20000014 	.word	0x20000014
 8005e4c:	08009de0 	.word	0x08009de0
 8005e50:	08009ded 	.word	0x08009ded
 8005e54:	08009e1b 	.word	0x08009e1b

08005e58 <quorem>:
 8005e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	6903      	ldr	r3, [r0, #16]
 8005e5e:	690c      	ldr	r4, [r1, #16]
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	4607      	mov	r7, r0
 8005e64:	f2c0 8081 	blt.w	8005f6a <quorem+0x112>
 8005e68:	3c01      	subs	r4, #1
 8005e6a:	f101 0814 	add.w	r8, r1, #20
 8005e6e:	f100 0514 	add.w	r5, r0, #20
 8005e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e80:	3301      	adds	r3, #1
 8005e82:	429a      	cmp	r2, r3
 8005e84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e90:	d331      	bcc.n	8005ef6 <quorem+0x9e>
 8005e92:	f04f 0e00 	mov.w	lr, #0
 8005e96:	4640      	mov	r0, r8
 8005e98:	46ac      	mov	ip, r5
 8005e9a:	46f2      	mov	sl, lr
 8005e9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ea0:	b293      	uxth	r3, r2
 8005ea2:	fb06 e303 	mla	r3, r6, r3, lr
 8005ea6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	ebaa 0303 	sub.w	r3, sl, r3
 8005eb0:	0c12      	lsrs	r2, r2, #16
 8005eb2:	f8dc a000 	ldr.w	sl, [ip]
 8005eb6:	fb06 e202 	mla	r2, r6, r2, lr
 8005eba:	fa13 f38a 	uxtah	r3, r3, sl
 8005ebe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ec2:	fa1f fa82 	uxth.w	sl, r2
 8005ec6:	f8dc 2000 	ldr.w	r2, [ip]
 8005eca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005ece:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed8:	4581      	cmp	r9, r0
 8005eda:	f84c 3b04 	str.w	r3, [ip], #4
 8005ede:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ee2:	d2db      	bcs.n	8005e9c <quorem+0x44>
 8005ee4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ee8:	b92b      	cbnz	r3, 8005ef6 <quorem+0x9e>
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	429d      	cmp	r5, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	d32e      	bcc.n	8005f52 <quorem+0xfa>
 8005ef4:	613c      	str	r4, [r7, #16]
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f001 fd94 	bl	8007a24 <__mcmp>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	db24      	blt.n	8005f4a <quorem+0xf2>
 8005f00:	3601      	adds	r6, #1
 8005f02:	4628      	mov	r0, r5
 8005f04:	f04f 0c00 	mov.w	ip, #0
 8005f08:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f0c:	f8d0 e000 	ldr.w	lr, [r0]
 8005f10:	b293      	uxth	r3, r2
 8005f12:	ebac 0303 	sub.w	r3, ip, r3
 8005f16:	0c12      	lsrs	r2, r2, #16
 8005f18:	fa13 f38e 	uxtah	r3, r3, lr
 8005f1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f2a:	45c1      	cmp	r9, r8
 8005f2c:	f840 3b04 	str.w	r3, [r0], #4
 8005f30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f34:	d2e8      	bcs.n	8005f08 <quorem+0xb0>
 8005f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f3e:	b922      	cbnz	r2, 8005f4a <quorem+0xf2>
 8005f40:	3b04      	subs	r3, #4
 8005f42:	429d      	cmp	r5, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	d30a      	bcc.n	8005f5e <quorem+0x106>
 8005f48:	613c      	str	r4, [r7, #16]
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	b003      	add	sp, #12
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	d1cc      	bne.n	8005ef4 <quorem+0x9c>
 8005f5a:	3c01      	subs	r4, #1
 8005f5c:	e7c7      	b.n	8005eee <quorem+0x96>
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	3b04      	subs	r3, #4
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	d1f0      	bne.n	8005f48 <quorem+0xf0>
 8005f66:	3c01      	subs	r4, #1
 8005f68:	e7eb      	b.n	8005f42 <quorem+0xea>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e7ee      	b.n	8005f4c <quorem+0xf4>
	...

08005f70 <_dtoa_r>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	ed2d 8b02 	vpush	{d8}
 8005f78:	ec57 6b10 	vmov	r6, r7, d0
 8005f7c:	b095      	sub	sp, #84	; 0x54
 8005f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f90:	b975      	cbnz	r5, 8005fb0 <_dtoa_r+0x40>
 8005f92:	2010      	movs	r0, #16
 8005f94:	f001 fa56 	bl	8007444 <malloc>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f9c:	b920      	cbnz	r0, 8005fa8 <_dtoa_r+0x38>
 8005f9e:	4bb2      	ldr	r3, [pc, #712]	; (8006268 <_dtoa_r+0x2f8>)
 8005fa0:	21ea      	movs	r1, #234	; 0xea
 8005fa2:	48b2      	ldr	r0, [pc, #712]	; (800626c <_dtoa_r+0x2fc>)
 8005fa4:	f7ff ff3a 	bl	8005e1c <__assert_func>
 8005fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fac:	6005      	str	r5, [r0, #0]
 8005fae:	60c5      	str	r5, [r0, #12]
 8005fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	b151      	cbz	r1, 8005fcc <_dtoa_r+0x5c>
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	604a      	str	r2, [r1, #4]
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4093      	lsls	r3, r2
 8005fbe:	608b      	str	r3, [r1, #8]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f001 faa7 	bl	8007514 <_Bfree>
 8005fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	1e3b      	subs	r3, r7, #0
 8005fce:	bfb9      	ittee	lt
 8005fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	9303      	strlt	r3, [sp, #12]
 8005fd6:	2300      	movge	r3, #0
 8005fd8:	f8c8 3000 	strge.w	r3, [r8]
 8005fdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005fe0:	4ba3      	ldr	r3, [pc, #652]	; (8006270 <_dtoa_r+0x300>)
 8005fe2:	bfbc      	itt	lt
 8005fe4:	2201      	movlt	r2, #1
 8005fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8005fea:	ea33 0309 	bics.w	r3, r3, r9
 8005fee:	d11b      	bne.n	8006028 <_dtoa_r+0xb8>
 8005ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ffc:	4333      	orrs	r3, r6
 8005ffe:	f000 857a 	beq.w	8006af6 <_dtoa_r+0xb86>
 8006002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006004:	b963      	cbnz	r3, 8006020 <_dtoa_r+0xb0>
 8006006:	4b9b      	ldr	r3, [pc, #620]	; (8006274 <_dtoa_r+0x304>)
 8006008:	e024      	b.n	8006054 <_dtoa_r+0xe4>
 800600a:	4b9b      	ldr	r3, [pc, #620]	; (8006278 <_dtoa_r+0x308>)
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	9800      	ldr	r0, [sp, #0]
 8006016:	b015      	add	sp, #84	; 0x54
 8006018:	ecbd 8b02 	vpop	{d8}
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	4b94      	ldr	r3, [pc, #592]	; (8006274 <_dtoa_r+0x304>)
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	3303      	adds	r3, #3
 8006026:	e7f3      	b.n	8006010 <_dtoa_r+0xa0>
 8006028:	ed9d 7b02 	vldr	d7, [sp, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	ec51 0b17 	vmov	r0, r1, d7
 8006032:	2300      	movs	r3, #0
 8006034:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006038:	f7fa fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 800603c:	4680      	mov	r8, r0
 800603e:	b158      	cbz	r0, 8006058 <_dtoa_r+0xe8>
 8006040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006042:	2301      	movs	r3, #1
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8551 	beq.w	8006af0 <_dtoa_r+0xb80>
 800604e:	488b      	ldr	r0, [pc, #556]	; (800627c <_dtoa_r+0x30c>)
 8006050:	6018      	str	r0, [r3, #0]
 8006052:	1e43      	subs	r3, r0, #1
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	e7dd      	b.n	8006014 <_dtoa_r+0xa4>
 8006058:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800605c:	aa12      	add	r2, sp, #72	; 0x48
 800605e:	a913      	add	r1, sp, #76	; 0x4c
 8006060:	4620      	mov	r0, r4
 8006062:	f001 fdff 	bl	8007c64 <__d2b>
 8006066:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800606a:	4683      	mov	fp, r0
 800606c:	2d00      	cmp	r5, #0
 800606e:	d07c      	beq.n	800616a <_dtoa_r+0x1fa>
 8006070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006072:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800607a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800607e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800608a:	4b7d      	ldr	r3, [pc, #500]	; (8006280 <_dtoa_r+0x310>)
 800608c:	2200      	movs	r2, #0
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa f8f9 	bl	8000288 <__aeabi_dsub>
 8006096:	a36e      	add	r3, pc, #440	; (adr r3, 8006250 <_dtoa_r+0x2e0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa faac 	bl	80005f8 <__aeabi_dmul>
 80060a0:	a36d      	add	r3, pc, #436	; (adr r3, 8006258 <_dtoa_r+0x2e8>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa f8f1 	bl	800028c <__adddf3>
 80060aa:	4606      	mov	r6, r0
 80060ac:	4628      	mov	r0, r5
 80060ae:	460f      	mov	r7, r1
 80060b0:	f7fa fa38 	bl	8000524 <__aeabi_i2d>
 80060b4:	a36a      	add	r3, pc, #424	; (adr r3, 8006260 <_dtoa_r+0x2f0>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa fa9d 	bl	80005f8 <__aeabi_dmul>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4630      	mov	r0, r6
 80060c4:	4639      	mov	r1, r7
 80060c6:	f7fa f8e1 	bl	800028c <__adddf3>
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	f7fa fd43 	bl	8000b58 <__aeabi_d2iz>
 80060d2:	2200      	movs	r2, #0
 80060d4:	4682      	mov	sl, r0
 80060d6:	2300      	movs	r3, #0
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fcfe 	bl	8000adc <__aeabi_dcmplt>
 80060e0:	b148      	cbz	r0, 80060f6 <_dtoa_r+0x186>
 80060e2:	4650      	mov	r0, sl
 80060e4:	f7fa fa1e 	bl	8000524 <__aeabi_i2d>
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	f7fa fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f0:	b908      	cbnz	r0, 80060f6 <_dtoa_r+0x186>
 80060f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060f6:	f1ba 0f16 	cmp.w	sl, #22
 80060fa:	d854      	bhi.n	80061a6 <_dtoa_r+0x236>
 80060fc:	4b61      	ldr	r3, [pc, #388]	; (8006284 <_dtoa_r+0x314>)
 80060fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800610a:	f7fa fce7 	bl	8000adc <__aeabi_dcmplt>
 800610e:	2800      	cmp	r0, #0
 8006110:	d04b      	beq.n	80061aa <_dtoa_r+0x23a>
 8006112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006116:	2300      	movs	r3, #0
 8006118:	930e      	str	r3, [sp, #56]	; 0x38
 800611a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800611c:	1b5d      	subs	r5, r3, r5
 800611e:	1e6b      	subs	r3, r5, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	bf43      	ittte	mi
 8006124:	2300      	movmi	r3, #0
 8006126:	f1c5 0801 	rsbmi	r8, r5, #1
 800612a:	9304      	strmi	r3, [sp, #16]
 800612c:	f04f 0800 	movpl.w	r8, #0
 8006130:	f1ba 0f00 	cmp.w	sl, #0
 8006134:	db3b      	blt.n	80061ae <_dtoa_r+0x23e>
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800613c:	4453      	add	r3, sl
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	2300      	movs	r3, #0
 8006142:	9306      	str	r3, [sp, #24]
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	2b09      	cmp	r3, #9
 8006148:	d869      	bhi.n	800621e <_dtoa_r+0x2ae>
 800614a:	2b05      	cmp	r3, #5
 800614c:	bfc4      	itt	gt
 800614e:	3b04      	subgt	r3, #4
 8006150:	9305      	strgt	r3, [sp, #20]
 8006152:	9b05      	ldr	r3, [sp, #20]
 8006154:	f1a3 0302 	sub.w	r3, r3, #2
 8006158:	bfcc      	ite	gt
 800615a:	2500      	movgt	r5, #0
 800615c:	2501      	movle	r5, #1
 800615e:	2b03      	cmp	r3, #3
 8006160:	d869      	bhi.n	8006236 <_dtoa_r+0x2c6>
 8006162:	e8df f003 	tbb	[pc, r3]
 8006166:	4e2c      	.short	0x4e2c
 8006168:	5a4c      	.short	0x5a4c
 800616a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800616e:	441d      	add	r5, r3
 8006170:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006174:	2b20      	cmp	r3, #32
 8006176:	bfc1      	itttt	gt
 8006178:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800617c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006180:	fa09 f303 	lslgt.w	r3, r9, r3
 8006184:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006188:	bfda      	itte	le
 800618a:	f1c3 0320 	rsble	r3, r3, #32
 800618e:	fa06 f003 	lslle.w	r0, r6, r3
 8006192:	4318      	orrgt	r0, r3
 8006194:	f7fa f9b6 	bl	8000504 <__aeabi_ui2d>
 8006198:	2301      	movs	r3, #1
 800619a:	4606      	mov	r6, r0
 800619c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80061a0:	3d01      	subs	r5, #1
 80061a2:	9310      	str	r3, [sp, #64]	; 0x40
 80061a4:	e771      	b.n	800608a <_dtoa_r+0x11a>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7b6      	b.n	8006118 <_dtoa_r+0x1a8>
 80061aa:	900e      	str	r0, [sp, #56]	; 0x38
 80061ac:	e7b5      	b.n	800611a <_dtoa_r+0x1aa>
 80061ae:	f1ca 0300 	rsb	r3, sl, #0
 80061b2:	9306      	str	r3, [sp, #24]
 80061b4:	2300      	movs	r3, #0
 80061b6:	eba8 080a 	sub.w	r8, r8, sl
 80061ba:	930d      	str	r3, [sp, #52]	; 0x34
 80061bc:	e7c2      	b.n	8006144 <_dtoa_r+0x1d4>
 80061be:	2300      	movs	r3, #0
 80061c0:	9308      	str	r3, [sp, #32]
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dc39      	bgt.n	800623c <_dtoa_r+0x2cc>
 80061c8:	f04f 0901 	mov.w	r9, #1
 80061cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80061d0:	464b      	mov	r3, r9
 80061d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80061d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80061d8:	2200      	movs	r2, #0
 80061da:	6042      	str	r2, [r0, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	f102 0614 	add.w	r6, r2, #20
 80061e2:	429e      	cmp	r6, r3
 80061e4:	6841      	ldr	r1, [r0, #4]
 80061e6:	d92f      	bls.n	8006248 <_dtoa_r+0x2d8>
 80061e8:	4620      	mov	r0, r4
 80061ea:	f001 f953 	bl	8007494 <_Balloc>
 80061ee:	9000      	str	r0, [sp, #0]
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d14b      	bne.n	800628c <_dtoa_r+0x31c>
 80061f4:	4b24      	ldr	r3, [pc, #144]	; (8006288 <_dtoa_r+0x318>)
 80061f6:	4602      	mov	r2, r0
 80061f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061fc:	e6d1      	b.n	8005fa2 <_dtoa_r+0x32>
 80061fe:	2301      	movs	r3, #1
 8006200:	e7de      	b.n	80061c0 <_dtoa_r+0x250>
 8006202:	2300      	movs	r3, #0
 8006204:	9308      	str	r3, [sp, #32]
 8006206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006208:	eb0a 0903 	add.w	r9, sl, r3
 800620c:	f109 0301 	add.w	r3, r9, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	bfb8      	it	lt
 8006216:	2301      	movlt	r3, #1
 8006218:	e7dd      	b.n	80061d6 <_dtoa_r+0x266>
 800621a:	2301      	movs	r3, #1
 800621c:	e7f2      	b.n	8006204 <_dtoa_r+0x294>
 800621e:	2501      	movs	r5, #1
 8006220:	2300      	movs	r3, #0
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	9508      	str	r5, [sp, #32]
 8006226:	f04f 39ff 	mov.w	r9, #4294967295
 800622a:	2200      	movs	r2, #0
 800622c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006230:	2312      	movs	r3, #18
 8006232:	9209      	str	r2, [sp, #36]	; 0x24
 8006234:	e7cf      	b.n	80061d6 <_dtoa_r+0x266>
 8006236:	2301      	movs	r3, #1
 8006238:	9308      	str	r3, [sp, #32]
 800623a:	e7f4      	b.n	8006226 <_dtoa_r+0x2b6>
 800623c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006240:	f8cd 9004 	str.w	r9, [sp, #4]
 8006244:	464b      	mov	r3, r9
 8006246:	e7c6      	b.n	80061d6 <_dtoa_r+0x266>
 8006248:	3101      	adds	r1, #1
 800624a:	6041      	str	r1, [r0, #4]
 800624c:	0052      	lsls	r2, r2, #1
 800624e:	e7c6      	b.n	80061de <_dtoa_r+0x26e>
 8006250:	636f4361 	.word	0x636f4361
 8006254:	3fd287a7 	.word	0x3fd287a7
 8006258:	8b60c8b3 	.word	0x8b60c8b3
 800625c:	3fc68a28 	.word	0x3fc68a28
 8006260:	509f79fb 	.word	0x509f79fb
 8006264:	3fd34413 	.word	0x3fd34413
 8006268:	08009d15 	.word	0x08009d15
 800626c:	08009f2a 	.word	0x08009f2a
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	08009f26 	.word	0x08009f26
 8006278:	08009f1d 	.word	0x08009f1d
 800627c:	08009ced 	.word	0x08009ced
 8006280:	3ff80000 	.word	0x3ff80000
 8006284:	0800a108 	.word	0x0800a108
 8006288:	08009f89 	.word	0x08009f89
 800628c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628e:	9a00      	ldr	r2, [sp, #0]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	2b0e      	cmp	r3, #14
 8006296:	f200 80ad 	bhi.w	80063f4 <_dtoa_r+0x484>
 800629a:	2d00      	cmp	r5, #0
 800629c:	f000 80aa 	beq.w	80063f4 <_dtoa_r+0x484>
 80062a0:	f1ba 0f00 	cmp.w	sl, #0
 80062a4:	dd36      	ble.n	8006314 <_dtoa_r+0x3a4>
 80062a6:	4ac3      	ldr	r2, [pc, #780]	; (80065b4 <_dtoa_r+0x644>)
 80062a8:	f00a 030f 	and.w	r3, sl, #15
 80062ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062b0:	ed93 7b00 	vldr	d7, [r3]
 80062b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80062b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80062bc:	eeb0 8a47 	vmov.f32	s16, s14
 80062c0:	eef0 8a67 	vmov.f32	s17, s15
 80062c4:	d016      	beq.n	80062f4 <_dtoa_r+0x384>
 80062c6:	4bbc      	ldr	r3, [pc, #752]	; (80065b8 <_dtoa_r+0x648>)
 80062c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062d0:	f7fa fabc 	bl	800084c <__aeabi_ddiv>
 80062d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d8:	f007 070f 	and.w	r7, r7, #15
 80062dc:	2503      	movs	r5, #3
 80062de:	4eb6      	ldr	r6, [pc, #728]	; (80065b8 <_dtoa_r+0x648>)
 80062e0:	b957      	cbnz	r7, 80062f8 <_dtoa_r+0x388>
 80062e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e6:	ec53 2b18 	vmov	r2, r3, d8
 80062ea:	f7fa faaf 	bl	800084c <__aeabi_ddiv>
 80062ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f2:	e029      	b.n	8006348 <_dtoa_r+0x3d8>
 80062f4:	2502      	movs	r5, #2
 80062f6:	e7f2      	b.n	80062de <_dtoa_r+0x36e>
 80062f8:	07f9      	lsls	r1, r7, #31
 80062fa:	d508      	bpl.n	800630e <_dtoa_r+0x39e>
 80062fc:	ec51 0b18 	vmov	r0, r1, d8
 8006300:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006304:	f7fa f978 	bl	80005f8 <__aeabi_dmul>
 8006308:	ec41 0b18 	vmov	d8, r0, r1
 800630c:	3501      	adds	r5, #1
 800630e:	107f      	asrs	r7, r7, #1
 8006310:	3608      	adds	r6, #8
 8006312:	e7e5      	b.n	80062e0 <_dtoa_r+0x370>
 8006314:	f000 80a6 	beq.w	8006464 <_dtoa_r+0x4f4>
 8006318:	f1ca 0600 	rsb	r6, sl, #0
 800631c:	4ba5      	ldr	r3, [pc, #660]	; (80065b4 <_dtoa_r+0x644>)
 800631e:	4fa6      	ldr	r7, [pc, #664]	; (80065b8 <_dtoa_r+0x648>)
 8006320:	f006 020f 	and.w	r2, r6, #15
 8006324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006330:	f7fa f962 	bl	80005f8 <__aeabi_dmul>
 8006334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006338:	1136      	asrs	r6, r6, #4
 800633a:	2300      	movs	r3, #0
 800633c:	2502      	movs	r5, #2
 800633e:	2e00      	cmp	r6, #0
 8006340:	f040 8085 	bne.w	800644e <_dtoa_r+0x4de>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1d2      	bne.n	80062ee <_dtoa_r+0x37e>
 8006348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 808c 	beq.w	8006468 <_dtoa_r+0x4f8>
 8006350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006354:	4b99      	ldr	r3, [pc, #612]	; (80065bc <_dtoa_r+0x64c>)
 8006356:	2200      	movs	r2, #0
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fbbe 	bl	8000adc <__aeabi_dcmplt>
 8006360:	2800      	cmp	r0, #0
 8006362:	f000 8081 	beq.w	8006468 <_dtoa_r+0x4f8>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d07d      	beq.n	8006468 <_dtoa_r+0x4f8>
 800636c:	f1b9 0f00 	cmp.w	r9, #0
 8006370:	dd3c      	ble.n	80063ec <_dtoa_r+0x47c>
 8006372:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	2200      	movs	r2, #0
 800637a:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <_dtoa_r+0x650>)
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7fa f93a 	bl	80005f8 <__aeabi_dmul>
 8006384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006388:	3501      	adds	r5, #1
 800638a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800638e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006392:	4628      	mov	r0, r5
 8006394:	f7fa f8c6 	bl	8000524 <__aeabi_i2d>
 8006398:	4632      	mov	r2, r6
 800639a:	463b      	mov	r3, r7
 800639c:	f7fa f92c 	bl	80005f8 <__aeabi_dmul>
 80063a0:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <_dtoa_r+0x654>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	f7f9 ff72 	bl	800028c <__adddf3>
 80063a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d15c      	bne.n	8006472 <_dtoa_r+0x502>
 80063b8:	4b83      	ldr	r3, [pc, #524]	; (80065c8 <_dtoa_r+0x658>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7f9 ff62 	bl	8000288 <__aeabi_dsub>
 80063c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c8:	4606      	mov	r6, r0
 80063ca:	460f      	mov	r7, r1
 80063cc:	f7fa fba4 	bl	8000b18 <__aeabi_dcmpgt>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f040 8296 	bne.w	8006902 <_dtoa_r+0x992>
 80063d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063da:	4630      	mov	r0, r6
 80063dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7fa fb7b 	bl	8000adc <__aeabi_dcmplt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f040 8288 	bne.w	80068fc <_dtoa_r+0x98c>
 80063ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f2c0 8158 	blt.w	80066ac <_dtoa_r+0x73c>
 80063fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006400:	f300 8154 	bgt.w	80066ac <_dtoa_r+0x73c>
 8006404:	4b6b      	ldr	r3, [pc, #428]	; (80065b4 <_dtoa_r+0x644>)
 8006406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800640a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800640e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	f280 80e3 	bge.w	80065dc <_dtoa_r+0x66c>
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f300 80df 	bgt.w	80065dc <_dtoa_r+0x66c>
 800641e:	f040 826d 	bne.w	80068fc <_dtoa_r+0x98c>
 8006422:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <_dtoa_r+0x658>)
 8006424:	2200      	movs	r2, #0
 8006426:	4640      	mov	r0, r8
 8006428:	4649      	mov	r1, r9
 800642a:	f7fa f8e5 	bl	80005f8 <__aeabi_dmul>
 800642e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006432:	f7fa fb67 	bl	8000b04 <__aeabi_dcmpge>
 8006436:	9e01      	ldr	r6, [sp, #4]
 8006438:	4637      	mov	r7, r6
 800643a:	2800      	cmp	r0, #0
 800643c:	f040 8243 	bne.w	80068c6 <_dtoa_r+0x956>
 8006440:	9d00      	ldr	r5, [sp, #0]
 8006442:	2331      	movs	r3, #49	; 0x31
 8006444:	f805 3b01 	strb.w	r3, [r5], #1
 8006448:	f10a 0a01 	add.w	sl, sl, #1
 800644c:	e23f      	b.n	80068ce <_dtoa_r+0x95e>
 800644e:	07f2      	lsls	r2, r6, #31
 8006450:	d505      	bpl.n	800645e <_dtoa_r+0x4ee>
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	f7fa f8cf 	bl	80005f8 <__aeabi_dmul>
 800645a:	3501      	adds	r5, #1
 800645c:	2301      	movs	r3, #1
 800645e:	1076      	asrs	r6, r6, #1
 8006460:	3708      	adds	r7, #8
 8006462:	e76c      	b.n	800633e <_dtoa_r+0x3ce>
 8006464:	2502      	movs	r5, #2
 8006466:	e76f      	b.n	8006348 <_dtoa_r+0x3d8>
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	f8cd a01c 	str.w	sl, [sp, #28]
 800646e:	930c      	str	r3, [sp, #48]	; 0x30
 8006470:	e78d      	b.n	800638e <_dtoa_r+0x41e>
 8006472:	9900      	ldr	r1, [sp, #0]
 8006474:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006478:	4b4e      	ldr	r3, [pc, #312]	; (80065b4 <_dtoa_r+0x644>)
 800647a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800647e:	4401      	add	r1, r0
 8006480:	9102      	str	r1, [sp, #8]
 8006482:	9908      	ldr	r1, [sp, #32]
 8006484:	eeb0 8a47 	vmov.f32	s16, s14
 8006488:	eef0 8a67 	vmov.f32	s17, s15
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006494:	2900      	cmp	r1, #0
 8006496:	d045      	beq.n	8006524 <_dtoa_r+0x5b4>
 8006498:	494c      	ldr	r1, [pc, #304]	; (80065cc <_dtoa_r+0x65c>)
 800649a:	2000      	movs	r0, #0
 800649c:	f7fa f9d6 	bl	800084c <__aeabi_ddiv>
 80064a0:	ec53 2b18 	vmov	r2, r3, d8
 80064a4:	f7f9 fef0 	bl	8000288 <__aeabi_dsub>
 80064a8:	9d00      	ldr	r5, [sp, #0]
 80064aa:	ec41 0b18 	vmov	d8, r0, r1
 80064ae:	4639      	mov	r1, r7
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7fa fb51 	bl	8000b58 <__aeabi_d2iz>
 80064b6:	900c      	str	r0, [sp, #48]	; 0x30
 80064b8:	f7fa f834 	bl	8000524 <__aeabi_i2d>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7f9 fee0 	bl	8000288 <__aeabi_dsub>
 80064c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ca:	3330      	adds	r3, #48	; 0x30
 80064cc:	f805 3b01 	strb.w	r3, [r5], #1
 80064d0:	ec53 2b18 	vmov	r2, r3, d8
 80064d4:	4606      	mov	r6, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	f7fa fb00 	bl	8000adc <__aeabi_dcmplt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d165      	bne.n	80065ac <_dtoa_r+0x63c>
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	4935      	ldr	r1, [pc, #212]	; (80065bc <_dtoa_r+0x64c>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7f9 fece 	bl	8000288 <__aeabi_dsub>
 80064ec:	ec53 2b18 	vmov	r2, r3, d8
 80064f0:	f7fa faf4 	bl	8000adc <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f040 80b9 	bne.w	800666c <_dtoa_r+0x6fc>
 80064fa:	9b02      	ldr	r3, [sp, #8]
 80064fc:	429d      	cmp	r5, r3
 80064fe:	f43f af75 	beq.w	80063ec <_dtoa_r+0x47c>
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <_dtoa_r+0x650>)
 8006504:	ec51 0b18 	vmov	r0, r1, d8
 8006508:	2200      	movs	r2, #0
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <_dtoa_r+0x650>)
 8006510:	ec41 0b18 	vmov	d8, r0, r1
 8006514:	2200      	movs	r2, #0
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7fa f86d 	bl	80005f8 <__aeabi_dmul>
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	e7c4      	b.n	80064ae <_dtoa_r+0x53e>
 8006524:	ec51 0b17 	vmov	r0, r1, d7
 8006528:	f7fa f866 	bl	80005f8 <__aeabi_dmul>
 800652c:	9b02      	ldr	r3, [sp, #8]
 800652e:	9d00      	ldr	r5, [sp, #0]
 8006530:	930c      	str	r3, [sp, #48]	; 0x30
 8006532:	ec41 0b18 	vmov	d8, r0, r1
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	f7fa fb0d 	bl	8000b58 <__aeabi_d2iz>
 800653e:	9011      	str	r0, [sp, #68]	; 0x44
 8006540:	f7f9 fff0 	bl	8000524 <__aeabi_i2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4630      	mov	r0, r6
 800654a:	4639      	mov	r1, r7
 800654c:	f7f9 fe9c 	bl	8000288 <__aeabi_dsub>
 8006550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006552:	3330      	adds	r3, #48	; 0x30
 8006554:	f805 3b01 	strb.w	r3, [r5], #1
 8006558:	9b02      	ldr	r3, [sp, #8]
 800655a:	429d      	cmp	r5, r3
 800655c:	4606      	mov	r6, r0
 800655e:	460f      	mov	r7, r1
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	d134      	bne.n	80065d0 <_dtoa_r+0x660>
 8006566:	4b19      	ldr	r3, [pc, #100]	; (80065cc <_dtoa_r+0x65c>)
 8006568:	ec51 0b18 	vmov	r0, r1, d8
 800656c:	f7f9 fe8e 	bl	800028c <__adddf3>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7fa face 	bl	8000b18 <__aeabi_dcmpgt>
 800657c:	2800      	cmp	r0, #0
 800657e:	d175      	bne.n	800666c <_dtoa_r+0x6fc>
 8006580:	ec53 2b18 	vmov	r2, r3, d8
 8006584:	4911      	ldr	r1, [pc, #68]	; (80065cc <_dtoa_r+0x65c>)
 8006586:	2000      	movs	r0, #0
 8006588:	f7f9 fe7e 	bl	8000288 <__aeabi_dsub>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4630      	mov	r0, r6
 8006592:	4639      	mov	r1, r7
 8006594:	f7fa faa2 	bl	8000adc <__aeabi_dcmplt>
 8006598:	2800      	cmp	r0, #0
 800659a:	f43f af27 	beq.w	80063ec <_dtoa_r+0x47c>
 800659e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065a0:	1e6b      	subs	r3, r5, #1
 80065a2:	930c      	str	r3, [sp, #48]	; 0x30
 80065a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065a8:	2b30      	cmp	r3, #48	; 0x30
 80065aa:	d0f8      	beq.n	800659e <_dtoa_r+0x62e>
 80065ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80065b0:	e04a      	b.n	8006648 <_dtoa_r+0x6d8>
 80065b2:	bf00      	nop
 80065b4:	0800a108 	.word	0x0800a108
 80065b8:	0800a0e0 	.word	0x0800a0e0
 80065bc:	3ff00000 	.word	0x3ff00000
 80065c0:	40240000 	.word	0x40240000
 80065c4:	401c0000 	.word	0x401c0000
 80065c8:	40140000 	.word	0x40140000
 80065cc:	3fe00000 	.word	0x3fe00000
 80065d0:	4baf      	ldr	r3, [pc, #700]	; (8006890 <_dtoa_r+0x920>)
 80065d2:	f7fa f811 	bl	80005f8 <__aeabi_dmul>
 80065d6:	4606      	mov	r6, r0
 80065d8:	460f      	mov	r7, r1
 80065da:	e7ac      	b.n	8006536 <_dtoa_r+0x5c6>
 80065dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065e0:	9d00      	ldr	r5, [sp, #0]
 80065e2:	4642      	mov	r2, r8
 80065e4:	464b      	mov	r3, r9
 80065e6:	4630      	mov	r0, r6
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7fa f92f 	bl	800084c <__aeabi_ddiv>
 80065ee:	f7fa fab3 	bl	8000b58 <__aeabi_d2iz>
 80065f2:	9002      	str	r0, [sp, #8]
 80065f4:	f7f9 ff96 	bl	8000524 <__aeabi_i2d>
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	f7f9 fffc 	bl	80005f8 <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 fe3e 	bl	8000288 <__aeabi_dsub>
 800660c:	9e02      	ldr	r6, [sp, #8]
 800660e:	9f01      	ldr	r7, [sp, #4]
 8006610:	3630      	adds	r6, #48	; 0x30
 8006612:	f805 6b01 	strb.w	r6, [r5], #1
 8006616:	9e00      	ldr	r6, [sp, #0]
 8006618:	1bae      	subs	r6, r5, r6
 800661a:	42b7      	cmp	r7, r6
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	d137      	bne.n	8006692 <_dtoa_r+0x722>
 8006622:	f7f9 fe33 	bl	800028c <__adddf3>
 8006626:	4642      	mov	r2, r8
 8006628:	464b      	mov	r3, r9
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	f7fa fa73 	bl	8000b18 <__aeabi_dcmpgt>
 8006632:	b9c8      	cbnz	r0, 8006668 <_dtoa_r+0x6f8>
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006640:	b110      	cbz	r0, 8006648 <_dtoa_r+0x6d8>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	07d9      	lsls	r1, r3, #31
 8006646:	d40f      	bmi.n	8006668 <_dtoa_r+0x6f8>
 8006648:	4620      	mov	r0, r4
 800664a:	4659      	mov	r1, fp
 800664c:	f000 ff62 	bl	8007514 <_Bfree>
 8006650:	2300      	movs	r3, #0
 8006652:	702b      	strb	r3, [r5, #0]
 8006654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006656:	f10a 0001 	add.w	r0, sl, #1
 800665a:	6018      	str	r0, [r3, #0]
 800665c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800665e:	2b00      	cmp	r3, #0
 8006660:	f43f acd8 	beq.w	8006014 <_dtoa_r+0xa4>
 8006664:	601d      	str	r5, [r3, #0]
 8006666:	e4d5      	b.n	8006014 <_dtoa_r+0xa4>
 8006668:	f8cd a01c 	str.w	sl, [sp, #28]
 800666c:	462b      	mov	r3, r5
 800666e:	461d      	mov	r5, r3
 8006670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006674:	2a39      	cmp	r2, #57	; 0x39
 8006676:	d108      	bne.n	800668a <_dtoa_r+0x71a>
 8006678:	9a00      	ldr	r2, [sp, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d1f7      	bne.n	800666e <_dtoa_r+0x6fe>
 800667e:	9a07      	ldr	r2, [sp, #28]
 8006680:	9900      	ldr	r1, [sp, #0]
 8006682:	3201      	adds	r2, #1
 8006684:	9207      	str	r2, [sp, #28]
 8006686:	2230      	movs	r2, #48	; 0x30
 8006688:	700a      	strb	r2, [r1, #0]
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	3201      	adds	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	e78c      	b.n	80065ac <_dtoa_r+0x63c>
 8006692:	4b7f      	ldr	r3, [pc, #508]	; (8006890 <_dtoa_r+0x920>)
 8006694:	2200      	movs	r2, #0
 8006696:	f7f9 ffaf 	bl	80005f8 <__aeabi_dmul>
 800669a:	2200      	movs	r2, #0
 800669c:	2300      	movs	r3, #0
 800669e:	4606      	mov	r6, r0
 80066a0:	460f      	mov	r7, r1
 80066a2:	f7fa fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d09b      	beq.n	80065e2 <_dtoa_r+0x672>
 80066aa:	e7cd      	b.n	8006648 <_dtoa_r+0x6d8>
 80066ac:	9a08      	ldr	r2, [sp, #32]
 80066ae:	2a00      	cmp	r2, #0
 80066b0:	f000 80c4 	beq.w	800683c <_dtoa_r+0x8cc>
 80066b4:	9a05      	ldr	r2, [sp, #20]
 80066b6:	2a01      	cmp	r2, #1
 80066b8:	f300 80a8 	bgt.w	800680c <_dtoa_r+0x89c>
 80066bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066be:	2a00      	cmp	r2, #0
 80066c0:	f000 80a0 	beq.w	8006804 <_dtoa_r+0x894>
 80066c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066c8:	9e06      	ldr	r6, [sp, #24]
 80066ca:	4645      	mov	r5, r8
 80066cc:	9a04      	ldr	r2, [sp, #16]
 80066ce:	2101      	movs	r1, #1
 80066d0:	441a      	add	r2, r3
 80066d2:	4620      	mov	r0, r4
 80066d4:	4498      	add	r8, r3
 80066d6:	9204      	str	r2, [sp, #16]
 80066d8:	f001 f822 	bl	8007720 <__i2b>
 80066dc:	4607      	mov	r7, r0
 80066de:	2d00      	cmp	r5, #0
 80066e0:	dd0b      	ble.n	80066fa <_dtoa_r+0x78a>
 80066e2:	9b04      	ldr	r3, [sp, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd08      	ble.n	80066fa <_dtoa_r+0x78a>
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	9a04      	ldr	r2, [sp, #16]
 80066ec:	bfa8      	it	ge
 80066ee:	462b      	movge	r3, r5
 80066f0:	eba8 0803 	sub.w	r8, r8, r3
 80066f4:	1aed      	subs	r5, r5, r3
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	b1fb      	cbz	r3, 800673e <_dtoa_r+0x7ce>
 80066fe:	9b08      	ldr	r3, [sp, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 809f 	beq.w	8006844 <_dtoa_r+0x8d4>
 8006706:	2e00      	cmp	r6, #0
 8006708:	dd11      	ble.n	800672e <_dtoa_r+0x7be>
 800670a:	4639      	mov	r1, r7
 800670c:	4632      	mov	r2, r6
 800670e:	4620      	mov	r0, r4
 8006710:	f001 f8c2 	bl	8007898 <__pow5mult>
 8006714:	465a      	mov	r2, fp
 8006716:	4601      	mov	r1, r0
 8006718:	4607      	mov	r7, r0
 800671a:	4620      	mov	r0, r4
 800671c:	f001 f816 	bl	800774c <__multiply>
 8006720:	4659      	mov	r1, fp
 8006722:	9007      	str	r0, [sp, #28]
 8006724:	4620      	mov	r0, r4
 8006726:	f000 fef5 	bl	8007514 <_Bfree>
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	469b      	mov	fp, r3
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	1b9a      	subs	r2, r3, r6
 8006732:	d004      	beq.n	800673e <_dtoa_r+0x7ce>
 8006734:	4659      	mov	r1, fp
 8006736:	4620      	mov	r0, r4
 8006738:	f001 f8ae 	bl	8007898 <__pow5mult>
 800673c:	4683      	mov	fp, r0
 800673e:	2101      	movs	r1, #1
 8006740:	4620      	mov	r0, r4
 8006742:	f000 ffed 	bl	8007720 <__i2b>
 8006746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	4606      	mov	r6, r0
 800674c:	dd7c      	ble.n	8006848 <_dtoa_r+0x8d8>
 800674e:	461a      	mov	r2, r3
 8006750:	4601      	mov	r1, r0
 8006752:	4620      	mov	r0, r4
 8006754:	f001 f8a0 	bl	8007898 <__pow5mult>
 8006758:	9b05      	ldr	r3, [sp, #20]
 800675a:	2b01      	cmp	r3, #1
 800675c:	4606      	mov	r6, r0
 800675e:	dd76      	ble.n	800684e <_dtoa_r+0x8de>
 8006760:	2300      	movs	r3, #0
 8006762:	9306      	str	r3, [sp, #24]
 8006764:	6933      	ldr	r3, [r6, #16]
 8006766:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800676a:	6918      	ldr	r0, [r3, #16]
 800676c:	f000 ff88 	bl	8007680 <__hi0bits>
 8006770:	f1c0 0020 	rsb	r0, r0, #32
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	4418      	add	r0, r3
 8006778:	f010 001f 	ands.w	r0, r0, #31
 800677c:	f000 8086 	beq.w	800688c <_dtoa_r+0x91c>
 8006780:	f1c0 0320 	rsb	r3, r0, #32
 8006784:	2b04      	cmp	r3, #4
 8006786:	dd7f      	ble.n	8006888 <_dtoa_r+0x918>
 8006788:	f1c0 001c 	rsb	r0, r0, #28
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	4403      	add	r3, r0
 8006790:	4480      	add	r8, r0
 8006792:	4405      	add	r5, r0
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	f1b8 0f00 	cmp.w	r8, #0
 800679a:	dd05      	ble.n	80067a8 <_dtoa_r+0x838>
 800679c:	4659      	mov	r1, fp
 800679e:	4642      	mov	r2, r8
 80067a0:	4620      	mov	r0, r4
 80067a2:	f001 f8d3 	bl	800794c <__lshift>
 80067a6:	4683      	mov	fp, r0
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd05      	ble.n	80067ba <_dtoa_r+0x84a>
 80067ae:	4631      	mov	r1, r6
 80067b0:	461a      	mov	r2, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	f001 f8ca 	bl	800794c <__lshift>
 80067b8:	4606      	mov	r6, r0
 80067ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d069      	beq.n	8006894 <_dtoa_r+0x924>
 80067c0:	4631      	mov	r1, r6
 80067c2:	4658      	mov	r0, fp
 80067c4:	f001 f92e 	bl	8007a24 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	da63      	bge.n	8006894 <_dtoa_r+0x924>
 80067cc:	2300      	movs	r3, #0
 80067ce:	4659      	mov	r1, fp
 80067d0:	220a      	movs	r2, #10
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fec0 	bl	8007558 <__multadd>
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067de:	4683      	mov	fp, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 818f 	beq.w	8006b04 <_dtoa_r+0xb94>
 80067e6:	4639      	mov	r1, r7
 80067e8:	2300      	movs	r3, #0
 80067ea:	220a      	movs	r2, #10
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 feb3 	bl	8007558 <__multadd>
 80067f2:	f1b9 0f00 	cmp.w	r9, #0
 80067f6:	4607      	mov	r7, r0
 80067f8:	f300 808e 	bgt.w	8006918 <_dtoa_r+0x9a8>
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	dc50      	bgt.n	80068a4 <_dtoa_r+0x934>
 8006802:	e089      	b.n	8006918 <_dtoa_r+0x9a8>
 8006804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800680a:	e75d      	b.n	80066c8 <_dtoa_r+0x758>
 800680c:	9b01      	ldr	r3, [sp, #4]
 800680e:	1e5e      	subs	r6, r3, #1
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	42b3      	cmp	r3, r6
 8006814:	bfbf      	itttt	lt
 8006816:	9b06      	ldrlt	r3, [sp, #24]
 8006818:	9606      	strlt	r6, [sp, #24]
 800681a:	1af2      	sublt	r2, r6, r3
 800681c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800681e:	bfb6      	itet	lt
 8006820:	189b      	addlt	r3, r3, r2
 8006822:	1b9e      	subge	r6, r3, r6
 8006824:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	bfb8      	it	lt
 800682a:	2600      	movlt	r6, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfb5      	itete	lt
 8006830:	eba8 0503 	sublt.w	r5, r8, r3
 8006834:	9b01      	ldrge	r3, [sp, #4]
 8006836:	2300      	movlt	r3, #0
 8006838:	4645      	movge	r5, r8
 800683a:	e747      	b.n	80066cc <_dtoa_r+0x75c>
 800683c:	9e06      	ldr	r6, [sp, #24]
 800683e:	9f08      	ldr	r7, [sp, #32]
 8006840:	4645      	mov	r5, r8
 8006842:	e74c      	b.n	80066de <_dtoa_r+0x76e>
 8006844:	9a06      	ldr	r2, [sp, #24]
 8006846:	e775      	b.n	8006734 <_dtoa_r+0x7c4>
 8006848:	9b05      	ldr	r3, [sp, #20]
 800684a:	2b01      	cmp	r3, #1
 800684c:	dc18      	bgt.n	8006880 <_dtoa_r+0x910>
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	b9b3      	cbnz	r3, 8006880 <_dtoa_r+0x910>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	b9a3      	cbnz	r3, 8006884 <_dtoa_r+0x914>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006860:	0d1b      	lsrs	r3, r3, #20
 8006862:	051b      	lsls	r3, r3, #20
 8006864:	b12b      	cbz	r3, 8006872 <_dtoa_r+0x902>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	3301      	adds	r3, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	f108 0801 	add.w	r8, r8, #1
 8006870:	2301      	movs	r3, #1
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006876:	2b00      	cmp	r3, #0
 8006878:	f47f af74 	bne.w	8006764 <_dtoa_r+0x7f4>
 800687c:	2001      	movs	r0, #1
 800687e:	e779      	b.n	8006774 <_dtoa_r+0x804>
 8006880:	2300      	movs	r3, #0
 8006882:	e7f6      	b.n	8006872 <_dtoa_r+0x902>
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	e7f4      	b.n	8006872 <_dtoa_r+0x902>
 8006888:	d085      	beq.n	8006796 <_dtoa_r+0x826>
 800688a:	4618      	mov	r0, r3
 800688c:	301c      	adds	r0, #28
 800688e:	e77d      	b.n	800678c <_dtoa_r+0x81c>
 8006890:	40240000 	.word	0x40240000
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dc38      	bgt.n	800690c <_dtoa_r+0x99c>
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	2b02      	cmp	r3, #2
 800689e:	dd35      	ble.n	800690c <_dtoa_r+0x99c>
 80068a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80068a4:	f1b9 0f00 	cmp.w	r9, #0
 80068a8:	d10d      	bne.n	80068c6 <_dtoa_r+0x956>
 80068aa:	4631      	mov	r1, r6
 80068ac:	464b      	mov	r3, r9
 80068ae:	2205      	movs	r2, #5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fe51 	bl	8007558 <__multadd>
 80068b6:	4601      	mov	r1, r0
 80068b8:	4606      	mov	r6, r0
 80068ba:	4658      	mov	r0, fp
 80068bc:	f001 f8b2 	bl	8007a24 <__mcmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f73f adbd 	bgt.w	8006440 <_dtoa_r+0x4d0>
 80068c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c8:	9d00      	ldr	r5, [sp, #0]
 80068ca:	ea6f 0a03 	mvn.w	sl, r3
 80068ce:	f04f 0800 	mov.w	r8, #0
 80068d2:	4631      	mov	r1, r6
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fe1d 	bl	8007514 <_Bfree>
 80068da:	2f00      	cmp	r7, #0
 80068dc:	f43f aeb4 	beq.w	8006648 <_dtoa_r+0x6d8>
 80068e0:	f1b8 0f00 	cmp.w	r8, #0
 80068e4:	d005      	beq.n	80068f2 <_dtoa_r+0x982>
 80068e6:	45b8      	cmp	r8, r7
 80068e8:	d003      	beq.n	80068f2 <_dtoa_r+0x982>
 80068ea:	4641      	mov	r1, r8
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fe11 	bl	8007514 <_Bfree>
 80068f2:	4639      	mov	r1, r7
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 fe0d 	bl	8007514 <_Bfree>
 80068fa:	e6a5      	b.n	8006648 <_dtoa_r+0x6d8>
 80068fc:	2600      	movs	r6, #0
 80068fe:	4637      	mov	r7, r6
 8006900:	e7e1      	b.n	80068c6 <_dtoa_r+0x956>
 8006902:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006904:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006908:	4637      	mov	r7, r6
 800690a:	e599      	b.n	8006440 <_dtoa_r+0x4d0>
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80fd 	beq.w	8006b12 <_dtoa_r+0xba2>
 8006918:	2d00      	cmp	r5, #0
 800691a:	dd05      	ble.n	8006928 <_dtoa_r+0x9b8>
 800691c:	4639      	mov	r1, r7
 800691e:	462a      	mov	r2, r5
 8006920:	4620      	mov	r0, r4
 8006922:	f001 f813 	bl	800794c <__lshift>
 8006926:	4607      	mov	r7, r0
 8006928:	9b06      	ldr	r3, [sp, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d05c      	beq.n	80069e8 <_dtoa_r+0xa78>
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fdaf 	bl	8007494 <_Balloc>
 8006936:	4605      	mov	r5, r0
 8006938:	b928      	cbnz	r0, 8006946 <_dtoa_r+0x9d6>
 800693a:	4b80      	ldr	r3, [pc, #512]	; (8006b3c <_dtoa_r+0xbcc>)
 800693c:	4602      	mov	r2, r0
 800693e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006942:	f7ff bb2e 	b.w	8005fa2 <_dtoa_r+0x32>
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	3202      	adds	r2, #2
 800694a:	0092      	lsls	r2, r2, #2
 800694c:	f107 010c 	add.w	r1, r7, #12
 8006950:	300c      	adds	r0, #12
 8006952:	f000 fd91 	bl	8007478 <memcpy>
 8006956:	2201      	movs	r2, #1
 8006958:	4629      	mov	r1, r5
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fff6 	bl	800794c <__lshift>
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	444b      	add	r3, r9
 800696a:	9307      	str	r3, [sp, #28]
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	46b8      	mov	r8, r7
 8006974:	9306      	str	r3, [sp, #24]
 8006976:	4607      	mov	r7, r0
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	4631      	mov	r1, r6
 800697c:	3b01      	subs	r3, #1
 800697e:	4658      	mov	r0, fp
 8006980:	9302      	str	r3, [sp, #8]
 8006982:	f7ff fa69 	bl	8005e58 <quorem>
 8006986:	4603      	mov	r3, r0
 8006988:	3330      	adds	r3, #48	; 0x30
 800698a:	9004      	str	r0, [sp, #16]
 800698c:	4641      	mov	r1, r8
 800698e:	4658      	mov	r0, fp
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	f001 f847 	bl	8007a24 <__mcmp>
 8006996:	463a      	mov	r2, r7
 8006998:	4681      	mov	r9, r0
 800699a:	4631      	mov	r1, r6
 800699c:	4620      	mov	r0, r4
 800699e:	f001 f85d 	bl	8007a5c <__mdiff>
 80069a2:	68c2      	ldr	r2, [r0, #12]
 80069a4:	9b08      	ldr	r3, [sp, #32]
 80069a6:	4605      	mov	r5, r0
 80069a8:	bb02      	cbnz	r2, 80069ec <_dtoa_r+0xa7c>
 80069aa:	4601      	mov	r1, r0
 80069ac:	4658      	mov	r0, fp
 80069ae:	f001 f839 	bl	8007a24 <__mcmp>
 80069b2:	9b08      	ldr	r3, [sp, #32]
 80069b4:	4602      	mov	r2, r0
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80069be:	f000 fda9 	bl	8007514 <_Bfree>
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c6:	9d01      	ldr	r5, [sp, #4]
 80069c8:	ea43 0102 	orr.w	r1, r3, r2
 80069cc:	9b06      	ldr	r3, [sp, #24]
 80069ce:	430b      	orrs	r3, r1
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	d10d      	bne.n	80069f0 <_dtoa_r+0xa80>
 80069d4:	2b39      	cmp	r3, #57	; 0x39
 80069d6:	d029      	beq.n	8006a2c <_dtoa_r+0xabc>
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	dd01      	ble.n	80069e2 <_dtoa_r+0xa72>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	3331      	adds	r3, #49	; 0x31
 80069e2:	9a02      	ldr	r2, [sp, #8]
 80069e4:	7013      	strb	r3, [r2, #0]
 80069e6:	e774      	b.n	80068d2 <_dtoa_r+0x962>
 80069e8:	4638      	mov	r0, r7
 80069ea:	e7b9      	b.n	8006960 <_dtoa_r+0x9f0>
 80069ec:	2201      	movs	r2, #1
 80069ee:	e7e2      	b.n	80069b6 <_dtoa_r+0xa46>
 80069f0:	f1b9 0f00 	cmp.w	r9, #0
 80069f4:	db06      	blt.n	8006a04 <_dtoa_r+0xa94>
 80069f6:	9905      	ldr	r1, [sp, #20]
 80069f8:	ea41 0909 	orr.w	r9, r1, r9
 80069fc:	9906      	ldr	r1, [sp, #24]
 80069fe:	ea59 0101 	orrs.w	r1, r9, r1
 8006a02:	d120      	bne.n	8006a46 <_dtoa_r+0xad6>
 8006a04:	2a00      	cmp	r2, #0
 8006a06:	ddec      	ble.n	80069e2 <_dtoa_r+0xa72>
 8006a08:	4659      	mov	r1, fp
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	f000 ff9c 	bl	800794c <__lshift>
 8006a14:	4631      	mov	r1, r6
 8006a16:	4683      	mov	fp, r0
 8006a18:	f001 f804 	bl	8007a24 <__mcmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	dc02      	bgt.n	8006a28 <_dtoa_r+0xab8>
 8006a22:	d1de      	bne.n	80069e2 <_dtoa_r+0xa72>
 8006a24:	07da      	lsls	r2, r3, #31
 8006a26:	d5dc      	bpl.n	80069e2 <_dtoa_r+0xa72>
 8006a28:	2b39      	cmp	r3, #57	; 0x39
 8006a2a:	d1d8      	bne.n	80069de <_dtoa_r+0xa6e>
 8006a2c:	9a02      	ldr	r2, [sp, #8]
 8006a2e:	2339      	movs	r3, #57	; 0x39
 8006a30:	7013      	strb	r3, [r2, #0]
 8006a32:	462b      	mov	r3, r5
 8006a34:	461d      	mov	r5, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a3c:	2a39      	cmp	r2, #57	; 0x39
 8006a3e:	d050      	beq.n	8006ae2 <_dtoa_r+0xb72>
 8006a40:	3201      	adds	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e745      	b.n	80068d2 <_dtoa_r+0x962>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	dd03      	ble.n	8006a52 <_dtoa_r+0xae2>
 8006a4a:	2b39      	cmp	r3, #57	; 0x39
 8006a4c:	d0ee      	beq.n	8006a2c <_dtoa_r+0xabc>
 8006a4e:	3301      	adds	r3, #1
 8006a50:	e7c7      	b.n	80069e2 <_dtoa_r+0xa72>
 8006a52:	9a01      	ldr	r2, [sp, #4]
 8006a54:	9907      	ldr	r1, [sp, #28]
 8006a56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a5a:	428a      	cmp	r2, r1
 8006a5c:	d02a      	beq.n	8006ab4 <_dtoa_r+0xb44>
 8006a5e:	4659      	mov	r1, fp
 8006a60:	2300      	movs	r3, #0
 8006a62:	220a      	movs	r2, #10
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fd77 	bl	8007558 <__multadd>
 8006a6a:	45b8      	cmp	r8, r7
 8006a6c:	4683      	mov	fp, r0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	f04f 020a 	mov.w	r2, #10
 8006a76:	4641      	mov	r1, r8
 8006a78:	4620      	mov	r0, r4
 8006a7a:	d107      	bne.n	8006a8c <_dtoa_r+0xb1c>
 8006a7c:	f000 fd6c 	bl	8007558 <__multadd>
 8006a80:	4680      	mov	r8, r0
 8006a82:	4607      	mov	r7, r0
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	3301      	adds	r3, #1
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	e775      	b.n	8006978 <_dtoa_r+0xa08>
 8006a8c:	f000 fd64 	bl	8007558 <__multadd>
 8006a90:	4639      	mov	r1, r7
 8006a92:	4680      	mov	r8, r0
 8006a94:	2300      	movs	r3, #0
 8006a96:	220a      	movs	r2, #10
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fd5d 	bl	8007558 <__multadd>
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	e7f0      	b.n	8006a84 <_dtoa_r+0xb14>
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	9a00      	ldr	r2, [sp, #0]
 8006aa8:	bfcc      	ite	gt
 8006aaa:	464d      	movgt	r5, r9
 8006aac:	2501      	movle	r5, #1
 8006aae:	4415      	add	r5, r2
 8006ab0:	f04f 0800 	mov.w	r8, #0
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4620      	mov	r0, r4
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	f000 ff46 	bl	800794c <__lshift>
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4683      	mov	fp, r0
 8006ac4:	f000 ffae 	bl	8007a24 <__mcmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	dcb2      	bgt.n	8006a32 <_dtoa_r+0xac2>
 8006acc:	d102      	bne.n	8006ad4 <_dtoa_r+0xb64>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d4ae      	bmi.n	8006a32 <_dtoa_r+0xac2>
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006adc:	2a30      	cmp	r2, #48	; 0x30
 8006ade:	d0fa      	beq.n	8006ad6 <_dtoa_r+0xb66>
 8006ae0:	e6f7      	b.n	80068d2 <_dtoa_r+0x962>
 8006ae2:	9a00      	ldr	r2, [sp, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1a5      	bne.n	8006a34 <_dtoa_r+0xac4>
 8006ae8:	f10a 0a01 	add.w	sl, sl, #1
 8006aec:	2331      	movs	r3, #49	; 0x31
 8006aee:	e779      	b.n	80069e4 <_dtoa_r+0xa74>
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <_dtoa_r+0xbd0>)
 8006af2:	f7ff baaf 	b.w	8006054 <_dtoa_r+0xe4>
 8006af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f aa86 	bne.w	800600a <_dtoa_r+0x9a>
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <_dtoa_r+0xbd4>)
 8006b00:	f7ff baa8 	b.w	8006054 <_dtoa_r+0xe4>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	dc03      	bgt.n	8006b12 <_dtoa_r+0xba2>
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	f73f aec9 	bgt.w	80068a4 <_dtoa_r+0x934>
 8006b12:	9d00      	ldr	r5, [sp, #0]
 8006b14:	4631      	mov	r1, r6
 8006b16:	4658      	mov	r0, fp
 8006b18:	f7ff f99e 	bl	8005e58 <quorem>
 8006b1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b20:	f805 3b01 	strb.w	r3, [r5], #1
 8006b24:	9a00      	ldr	r2, [sp, #0]
 8006b26:	1aaa      	subs	r2, r5, r2
 8006b28:	4591      	cmp	r9, r2
 8006b2a:	ddba      	ble.n	8006aa2 <_dtoa_r+0xb32>
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	2300      	movs	r3, #0
 8006b30:	220a      	movs	r2, #10
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fd10 	bl	8007558 <__multadd>
 8006b38:	4683      	mov	fp, r0
 8006b3a:	e7eb      	b.n	8006b14 <_dtoa_r+0xba4>
 8006b3c:	08009f89 	.word	0x08009f89
 8006b40:	08009cec 	.word	0x08009cec
 8006b44:	08009f1d 	.word	0x08009f1d

08006b48 <std>:
 8006b48:	2300      	movs	r3, #0
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b56:	6083      	str	r3, [r0, #8]
 8006b58:	8181      	strh	r1, [r0, #12]
 8006b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b5c:	81c2      	strh	r2, [r0, #14]
 8006b5e:	6183      	str	r3, [r0, #24]
 8006b60:	4619      	mov	r1, r3
 8006b62:	2208      	movs	r2, #8
 8006b64:	305c      	adds	r0, #92	; 0x5c
 8006b66:	f7fd fba5 	bl	80042b4 <memset>
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <std+0x38>)
 8006b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <std+0x3c>)
 8006b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <std+0x40>)
 8006b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <std+0x44>)
 8006b78:	6224      	str	r4, [r4, #32]
 8006b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	bf00      	nop
 8006b80:	08008519 	.word	0x08008519
 8006b84:	0800853b 	.word	0x0800853b
 8006b88:	08008573 	.word	0x08008573
 8006b8c:	08008597 	.word	0x08008597

08006b90 <_cleanup_r>:
 8006b90:	4901      	ldr	r1, [pc, #4]	; (8006b98 <_cleanup_r+0x8>)
 8006b92:	f000 b8c1 	b.w	8006d18 <_fwalk_reent>
 8006b96:	bf00      	nop
 8006b98:	080088c1 	.word	0x080088c1

08006b9c <__sfmoreglue>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	1e4a      	subs	r2, r1, #1
 8006ba0:	2568      	movs	r5, #104	; 0x68
 8006ba2:	4355      	muls	r5, r2
 8006ba4:	460e      	mov	r6, r1
 8006ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006baa:	f001 f98d 	bl	8007ec8 <_malloc_r>
 8006bae:	4604      	mov	r4, r0
 8006bb0:	b140      	cbz	r0, 8006bc4 <__sfmoreglue+0x28>
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8006bb8:	300c      	adds	r0, #12
 8006bba:	60a0      	str	r0, [r4, #8]
 8006bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bc0:	f7fd fb78 	bl	80042b4 <memset>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}

08006bc8 <__sfp_lock_acquire>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__sfp_lock_acquire+0x8>)
 8006bca:	f000 bc38 	b.w	800743e <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	20004a3c 	.word	0x20004a3c

08006bd4 <__sfp_lock_release>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sfp_lock_release+0x8>)
 8006bd6:	f000 bc33 	b.w	8007440 <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	20004a3c 	.word	0x20004a3c

08006be0 <__sinit_lock_acquire>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__sinit_lock_acquire+0x8>)
 8006be2:	f000 bc2c 	b.w	800743e <__retarget_lock_acquire_recursive>
 8006be6:	bf00      	nop
 8006be8:	20004a37 	.word	0x20004a37

08006bec <__sinit_lock_release>:
 8006bec:	4801      	ldr	r0, [pc, #4]	; (8006bf4 <__sinit_lock_release+0x8>)
 8006bee:	f000 bc27 	b.w	8007440 <__retarget_lock_release_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	20004a37 	.word	0x20004a37

08006bf8 <__sinit>:
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	f7ff fff0 	bl	8006be0 <__sinit_lock_acquire>
 8006c00:	69a3      	ldr	r3, [r4, #24]
 8006c02:	b11b      	cbz	r3, 8006c0c <__sinit+0x14>
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f7ff bff0 	b.w	8006bec <__sinit_lock_release>
 8006c0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c10:	6523      	str	r3, [r4, #80]	; 0x50
 8006c12:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <__sinit+0x68>)
 8006c14:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <__sinit+0x6c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c1a:	42a3      	cmp	r3, r4
 8006c1c:	bf04      	itt	eq
 8006c1e:	2301      	moveq	r3, #1
 8006c20:	61a3      	streq	r3, [r4, #24]
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 f820 	bl	8006c68 <__sfp>
 8006c28:	6060      	str	r0, [r4, #4]
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 f81c 	bl	8006c68 <__sfp>
 8006c30:	60a0      	str	r0, [r4, #8]
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 f818 	bl	8006c68 <__sfp>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	60e0      	str	r0, [r4, #12]
 8006c3c:	2104      	movs	r1, #4
 8006c3e:	6860      	ldr	r0, [r4, #4]
 8006c40:	f7ff ff82 	bl	8006b48 <std>
 8006c44:	68a0      	ldr	r0, [r4, #8]
 8006c46:	2201      	movs	r2, #1
 8006c48:	2109      	movs	r1, #9
 8006c4a:	f7ff ff7d 	bl	8006b48 <std>
 8006c4e:	68e0      	ldr	r0, [r4, #12]
 8006c50:	2202      	movs	r2, #2
 8006c52:	2112      	movs	r1, #18
 8006c54:	f7ff ff78 	bl	8006b48 <std>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	61a3      	str	r3, [r4, #24]
 8006c5c:	e7d2      	b.n	8006c04 <__sinit+0xc>
 8006c5e:	bf00      	nop
 8006c60:	08009cd8 	.word	0x08009cd8
 8006c64:	08006b91 	.word	0x08006b91

08006c68 <__sfp>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	4607      	mov	r7, r0
 8006c6c:	f7ff ffac 	bl	8006bc8 <__sfp_lock_acquire>
 8006c70:	4b1e      	ldr	r3, [pc, #120]	; (8006cec <__sfp+0x84>)
 8006c72:	681e      	ldr	r6, [r3, #0]
 8006c74:	69b3      	ldr	r3, [r6, #24]
 8006c76:	b913      	cbnz	r3, 8006c7e <__sfp+0x16>
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff ffbd 	bl	8006bf8 <__sinit>
 8006c7e:	3648      	adds	r6, #72	; 0x48
 8006c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	d503      	bpl.n	8006c90 <__sfp+0x28>
 8006c88:	6833      	ldr	r3, [r6, #0]
 8006c8a:	b30b      	cbz	r3, 8006cd0 <__sfp+0x68>
 8006c8c:	6836      	ldr	r6, [r6, #0]
 8006c8e:	e7f7      	b.n	8006c80 <__sfp+0x18>
 8006c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c94:	b9d5      	cbnz	r5, 8006ccc <__sfp+0x64>
 8006c96:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <__sfp+0x88>)
 8006c98:	60e3      	str	r3, [r4, #12]
 8006c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8006ca0:	f000 fbcc 	bl	800743c <__retarget_lock_init_recursive>
 8006ca4:	f7ff ff96 	bl	8006bd4 <__sfp_lock_release>
 8006ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cb0:	6025      	str	r5, [r4, #0]
 8006cb2:	61a5      	str	r5, [r4, #24]
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cbc:	f7fd fafa 	bl	80042b4 <memset>
 8006cc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ccc:	3468      	adds	r4, #104	; 0x68
 8006cce:	e7d9      	b.n	8006c84 <__sfp+0x1c>
 8006cd0:	2104      	movs	r1, #4
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f7ff ff62 	bl	8006b9c <__sfmoreglue>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	6030      	str	r0, [r6, #0]
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1d5      	bne.n	8006c8c <__sfp+0x24>
 8006ce0:	f7ff ff78 	bl	8006bd4 <__sfp_lock_release>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	e7ee      	b.n	8006cc8 <__sfp+0x60>
 8006cea:	bf00      	nop
 8006cec:	08009cd8 	.word	0x08009cd8
 8006cf0:	ffff0001 	.word	0xffff0001

08006cf4 <fiprintf>:
 8006cf4:	b40e      	push	{r1, r2, r3}
 8006cf6:	b503      	push	{r0, r1, lr}
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	ab03      	add	r3, sp, #12
 8006cfc:	4805      	ldr	r0, [pc, #20]	; (8006d14 <fiprintf+0x20>)
 8006cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d02:	6800      	ldr	r0, [r0, #0]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	f001 fabf 	bl	8008288 <_vfiprintf_r>
 8006d0a:	b002      	add	sp, #8
 8006d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d10:	b003      	add	sp, #12
 8006d12:	4770      	bx	lr
 8006d14:	20000014 	.word	0x20000014

08006d18 <_fwalk_reent>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	4688      	mov	r8, r1
 8006d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d24:	2700      	movs	r7, #0
 8006d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d2e:	d505      	bpl.n	8006d3c <_fwalk_reent+0x24>
 8006d30:	6824      	ldr	r4, [r4, #0]
 8006d32:	2c00      	cmp	r4, #0
 8006d34:	d1f7      	bne.n	8006d26 <_fwalk_reent+0xe>
 8006d36:	4638      	mov	r0, r7
 8006d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3c:	89ab      	ldrh	r3, [r5, #12]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d907      	bls.n	8006d52 <_fwalk_reent+0x3a>
 8006d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d46:	3301      	adds	r3, #1
 8006d48:	d003      	beq.n	8006d52 <_fwalk_reent+0x3a>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	47c0      	blx	r8
 8006d50:	4307      	orrs	r7, r0
 8006d52:	3568      	adds	r5, #104	; 0x68
 8006d54:	e7e9      	b.n	8006d2a <_fwalk_reent+0x12>

08006d56 <rshift>:
 8006d56:	6903      	ldr	r3, [r0, #16]
 8006d58:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d60:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006d64:	f100 0414 	add.w	r4, r0, #20
 8006d68:	dd45      	ble.n	8006df6 <rshift+0xa0>
 8006d6a:	f011 011f 	ands.w	r1, r1, #31
 8006d6e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d72:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d76:	d10c      	bne.n	8006d92 <rshift+0x3c>
 8006d78:	f100 0710 	add.w	r7, r0, #16
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	42b1      	cmp	r1, r6
 8006d80:	d334      	bcc.n	8006dec <rshift+0x96>
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	1eea      	subs	r2, r5, #3
 8006d88:	4296      	cmp	r6, r2
 8006d8a:	bf38      	it	cc
 8006d8c:	2300      	movcc	r3, #0
 8006d8e:	4423      	add	r3, r4
 8006d90:	e015      	b.n	8006dbe <rshift+0x68>
 8006d92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d96:	f1c1 0820 	rsb	r8, r1, #32
 8006d9a:	40cf      	lsrs	r7, r1
 8006d9c:	f105 0e04 	add.w	lr, r5, #4
 8006da0:	46a1      	mov	r9, r4
 8006da2:	4576      	cmp	r6, lr
 8006da4:	46f4      	mov	ip, lr
 8006da6:	d815      	bhi.n	8006dd4 <rshift+0x7e>
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	009a      	lsls	r2, r3, #2
 8006dac:	3a04      	subs	r2, #4
 8006dae:	3501      	adds	r5, #1
 8006db0:	42ae      	cmp	r6, r5
 8006db2:	bf38      	it	cc
 8006db4:	2200      	movcc	r2, #0
 8006db6:	18a3      	adds	r3, r4, r2
 8006db8:	50a7      	str	r7, [r4, r2]
 8006dba:	b107      	cbz	r7, 8006dbe <rshift+0x68>
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	1b1a      	subs	r2, r3, r4
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006dc6:	bf08      	it	eq
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	6102      	str	r2, [r0, #16]
 8006dcc:	bf08      	it	eq
 8006dce:	6143      	streq	r3, [r0, #20]
 8006dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dd4:	f8dc c000 	ldr.w	ip, [ip]
 8006dd8:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ddc:	ea4c 0707 	orr.w	r7, ip, r7
 8006de0:	f849 7b04 	str.w	r7, [r9], #4
 8006de4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006de8:	40cf      	lsrs	r7, r1
 8006dea:	e7da      	b.n	8006da2 <rshift+0x4c>
 8006dec:	f851 cb04 	ldr.w	ip, [r1], #4
 8006df0:	f847 cf04 	str.w	ip, [r7, #4]!
 8006df4:	e7c3      	b.n	8006d7e <rshift+0x28>
 8006df6:	4623      	mov	r3, r4
 8006df8:	e7e1      	b.n	8006dbe <rshift+0x68>

08006dfa <__hexdig_fun>:
 8006dfa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d802      	bhi.n	8006e08 <__hexdig_fun+0xe>
 8006e02:	3820      	subs	r0, #32
 8006e04:	b2c0      	uxtb	r0, r0
 8006e06:	4770      	bx	lr
 8006e08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d801      	bhi.n	8006e14 <__hexdig_fun+0x1a>
 8006e10:	3847      	subs	r0, #71	; 0x47
 8006e12:	e7f7      	b.n	8006e04 <__hexdig_fun+0xa>
 8006e14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d801      	bhi.n	8006e20 <__hexdig_fun+0x26>
 8006e1c:	3827      	subs	r0, #39	; 0x27
 8006e1e:	e7f1      	b.n	8006e04 <__hexdig_fun+0xa>
 8006e20:	2000      	movs	r0, #0
 8006e22:	4770      	bx	lr

08006e24 <__gethex>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	ed2d 8b02 	vpush	{d8}
 8006e2c:	b089      	sub	sp, #36	; 0x24
 8006e2e:	ee08 0a10 	vmov	s16, r0
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	4bbc      	ldr	r3, [pc, #752]	; (8007128 <__gethex+0x304>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	468b      	mov	fp, r1
 8006e3e:	4690      	mov	r8, r2
 8006e40:	f7f9 f9c6 	bl	80001d0 <strlen>
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	f8db 2000 	ldr.w	r2, [fp]
 8006e4a:	4403      	add	r3, r0
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	1c93      	adds	r3, r2, #2
 8006e56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006e5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006e5e:	32fe      	adds	r2, #254	; 0xfe
 8006e60:	18d1      	adds	r1, r2, r3
 8006e62:	461f      	mov	r7, r3
 8006e64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e68:	9100      	str	r1, [sp, #0]
 8006e6a:	2830      	cmp	r0, #48	; 0x30
 8006e6c:	d0f8      	beq.n	8006e60 <__gethex+0x3c>
 8006e6e:	f7ff ffc4 	bl	8006dfa <__hexdig_fun>
 8006e72:	4604      	mov	r4, r0
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d13a      	bne.n	8006eee <__gethex+0xca>
 8006e78:	9901      	ldr	r1, [sp, #4]
 8006e7a:	4652      	mov	r2, sl
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f001 fb8e 	bl	800859e <strncmp>
 8006e82:	4605      	mov	r5, r0
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d168      	bne.n	8006f5a <__gethex+0x136>
 8006e88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006e8c:	eb07 060a 	add.w	r6, r7, sl
 8006e90:	f7ff ffb3 	bl	8006dfa <__hexdig_fun>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d062      	beq.n	8006f5e <__gethex+0x13a>
 8006e98:	4633      	mov	r3, r6
 8006e9a:	7818      	ldrb	r0, [r3, #0]
 8006e9c:	2830      	cmp	r0, #48	; 0x30
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	f103 0301 	add.w	r3, r3, #1
 8006ea4:	d0f9      	beq.n	8006e9a <__gethex+0x76>
 8006ea6:	f7ff ffa8 	bl	8006dfa <__hexdig_fun>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	fab0 f480 	clz	r4, r0
 8006eb0:	0964      	lsrs	r4, r4, #5
 8006eb2:	4635      	mov	r5, r6
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	463a      	mov	r2, r7
 8006eb8:	4616      	mov	r6, r2
 8006eba:	3201      	adds	r2, #1
 8006ebc:	7830      	ldrb	r0, [r6, #0]
 8006ebe:	f7ff ff9c 	bl	8006dfa <__hexdig_fun>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d1f8      	bne.n	8006eb8 <__gethex+0x94>
 8006ec6:	9901      	ldr	r1, [sp, #4]
 8006ec8:	4652      	mov	r2, sl
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f001 fb67 	bl	800859e <strncmp>
 8006ed0:	b980      	cbnz	r0, 8006ef4 <__gethex+0xd0>
 8006ed2:	b94d      	cbnz	r5, 8006ee8 <__gethex+0xc4>
 8006ed4:	eb06 050a 	add.w	r5, r6, sl
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4616      	mov	r6, r2
 8006edc:	3201      	adds	r2, #1
 8006ede:	7830      	ldrb	r0, [r6, #0]
 8006ee0:	f7ff ff8b 	bl	8006dfa <__hexdig_fun>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d1f8      	bne.n	8006eda <__gethex+0xb6>
 8006ee8:	1bad      	subs	r5, r5, r6
 8006eea:	00ad      	lsls	r5, r5, #2
 8006eec:	e004      	b.n	8006ef8 <__gethex+0xd4>
 8006eee:	2400      	movs	r4, #0
 8006ef0:	4625      	mov	r5, r4
 8006ef2:	e7e0      	b.n	8006eb6 <__gethex+0x92>
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	d1f7      	bne.n	8006ee8 <__gethex+0xc4>
 8006ef8:	7833      	ldrb	r3, [r6, #0]
 8006efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006efe:	2b50      	cmp	r3, #80	; 0x50
 8006f00:	d13b      	bne.n	8006f7a <__gethex+0x156>
 8006f02:	7873      	ldrb	r3, [r6, #1]
 8006f04:	2b2b      	cmp	r3, #43	; 0x2b
 8006f06:	d02c      	beq.n	8006f62 <__gethex+0x13e>
 8006f08:	2b2d      	cmp	r3, #45	; 0x2d
 8006f0a:	d02e      	beq.n	8006f6a <__gethex+0x146>
 8006f0c:	1c71      	adds	r1, r6, #1
 8006f0e:	f04f 0900 	mov.w	r9, #0
 8006f12:	7808      	ldrb	r0, [r1, #0]
 8006f14:	f7ff ff71 	bl	8006dfa <__hexdig_fun>
 8006f18:	1e43      	subs	r3, r0, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b18      	cmp	r3, #24
 8006f1e:	d82c      	bhi.n	8006f7a <__gethex+0x156>
 8006f20:	f1a0 0210 	sub.w	r2, r0, #16
 8006f24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f28:	f7ff ff67 	bl	8006dfa <__hexdig_fun>
 8006f2c:	1e43      	subs	r3, r0, #1
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b18      	cmp	r3, #24
 8006f32:	d91d      	bls.n	8006f70 <__gethex+0x14c>
 8006f34:	f1b9 0f00 	cmp.w	r9, #0
 8006f38:	d000      	beq.n	8006f3c <__gethex+0x118>
 8006f3a:	4252      	negs	r2, r2
 8006f3c:	4415      	add	r5, r2
 8006f3e:	f8cb 1000 	str.w	r1, [fp]
 8006f42:	b1e4      	cbz	r4, 8006f7e <__gethex+0x15a>
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bf14      	ite	ne
 8006f4a:	2700      	movne	r7, #0
 8006f4c:	2706      	moveq	r7, #6
 8006f4e:	4638      	mov	r0, r7
 8006f50:	b009      	add	sp, #36	; 0x24
 8006f52:	ecbd 8b02 	vpop	{d8}
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	463e      	mov	r6, r7
 8006f5c:	4625      	mov	r5, r4
 8006f5e:	2401      	movs	r4, #1
 8006f60:	e7ca      	b.n	8006ef8 <__gethex+0xd4>
 8006f62:	f04f 0900 	mov.w	r9, #0
 8006f66:	1cb1      	adds	r1, r6, #2
 8006f68:	e7d3      	b.n	8006f12 <__gethex+0xee>
 8006f6a:	f04f 0901 	mov.w	r9, #1
 8006f6e:	e7fa      	b.n	8006f66 <__gethex+0x142>
 8006f70:	230a      	movs	r3, #10
 8006f72:	fb03 0202 	mla	r2, r3, r2, r0
 8006f76:	3a10      	subs	r2, #16
 8006f78:	e7d4      	b.n	8006f24 <__gethex+0x100>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	e7df      	b.n	8006f3e <__gethex+0x11a>
 8006f7e:	1bf3      	subs	r3, r6, r7
 8006f80:	3b01      	subs	r3, #1
 8006f82:	4621      	mov	r1, r4
 8006f84:	2b07      	cmp	r3, #7
 8006f86:	dc0b      	bgt.n	8006fa0 <__gethex+0x17c>
 8006f88:	ee18 0a10 	vmov	r0, s16
 8006f8c:	f000 fa82 	bl	8007494 <_Balloc>
 8006f90:	4604      	mov	r4, r0
 8006f92:	b940      	cbnz	r0, 8006fa6 <__gethex+0x182>
 8006f94:	4b65      	ldr	r3, [pc, #404]	; (800712c <__gethex+0x308>)
 8006f96:	4602      	mov	r2, r0
 8006f98:	21de      	movs	r1, #222	; 0xde
 8006f9a:	4865      	ldr	r0, [pc, #404]	; (8007130 <__gethex+0x30c>)
 8006f9c:	f7fe ff3e 	bl	8005e1c <__assert_func>
 8006fa0:	3101      	adds	r1, #1
 8006fa2:	105b      	asrs	r3, r3, #1
 8006fa4:	e7ee      	b.n	8006f84 <__gethex+0x160>
 8006fa6:	f100 0914 	add.w	r9, r0, #20
 8006faa:	f04f 0b00 	mov.w	fp, #0
 8006fae:	f1ca 0301 	rsb	r3, sl, #1
 8006fb2:	f8cd 9008 	str.w	r9, [sp, #8]
 8006fb6:	f8cd b000 	str.w	fp, [sp]
 8006fba:	9306      	str	r3, [sp, #24]
 8006fbc:	42b7      	cmp	r7, r6
 8006fbe:	d340      	bcc.n	8007042 <__gethex+0x21e>
 8006fc0:	9802      	ldr	r0, [sp, #8]
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	f840 3b04 	str.w	r3, [r0], #4
 8006fc8:	eba0 0009 	sub.w	r0, r0, r9
 8006fcc:	1080      	asrs	r0, r0, #2
 8006fce:	0146      	lsls	r6, r0, #5
 8006fd0:	6120      	str	r0, [r4, #16]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fb54 	bl	8007680 <__hi0bits>
 8006fd8:	1a30      	subs	r0, r6, r0
 8006fda:	f8d8 6000 	ldr.w	r6, [r8]
 8006fde:	42b0      	cmp	r0, r6
 8006fe0:	dd63      	ble.n	80070aa <__gethex+0x286>
 8006fe2:	1b87      	subs	r7, r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 feee 	bl	8007dc8 <__any_on>
 8006fec:	4682      	mov	sl, r0
 8006fee:	b1a8      	cbz	r0, 800701c <__gethex+0x1f8>
 8006ff0:	1e7b      	subs	r3, r7, #1
 8006ff2:	1159      	asrs	r1, r3, #5
 8006ff4:	f003 021f 	and.w	r2, r3, #31
 8006ff8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ffc:	f04f 0a01 	mov.w	sl, #1
 8007000:	fa0a f202 	lsl.w	r2, sl, r2
 8007004:	420a      	tst	r2, r1
 8007006:	d009      	beq.n	800701c <__gethex+0x1f8>
 8007008:	4553      	cmp	r3, sl
 800700a:	dd05      	ble.n	8007018 <__gethex+0x1f4>
 800700c:	1eb9      	subs	r1, r7, #2
 800700e:	4620      	mov	r0, r4
 8007010:	f000 feda 	bl	8007dc8 <__any_on>
 8007014:	2800      	cmp	r0, #0
 8007016:	d145      	bne.n	80070a4 <__gethex+0x280>
 8007018:	f04f 0a02 	mov.w	sl, #2
 800701c:	4639      	mov	r1, r7
 800701e:	4620      	mov	r0, r4
 8007020:	f7ff fe99 	bl	8006d56 <rshift>
 8007024:	443d      	add	r5, r7
 8007026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800702a:	42ab      	cmp	r3, r5
 800702c:	da4c      	bge.n	80070c8 <__gethex+0x2a4>
 800702e:	ee18 0a10 	vmov	r0, s16
 8007032:	4621      	mov	r1, r4
 8007034:	f000 fa6e 	bl	8007514 <_Bfree>
 8007038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800703a:	2300      	movs	r3, #0
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	27a3      	movs	r7, #163	; 0xa3
 8007040:	e785      	b.n	8006f4e <__gethex+0x12a>
 8007042:	1e73      	subs	r3, r6, #1
 8007044:	9a05      	ldr	r2, [sp, #20]
 8007046:	9303      	str	r3, [sp, #12]
 8007048:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800704c:	4293      	cmp	r3, r2
 800704e:	d019      	beq.n	8007084 <__gethex+0x260>
 8007050:	f1bb 0f20 	cmp.w	fp, #32
 8007054:	d107      	bne.n	8007066 <__gethex+0x242>
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	9a00      	ldr	r2, [sp, #0]
 800705a:	f843 2b04 	str.w	r2, [r3], #4
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	2300      	movs	r3, #0
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	469b      	mov	fp, r3
 8007066:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800706a:	f7ff fec6 	bl	8006dfa <__hexdig_fun>
 800706e:	9b00      	ldr	r3, [sp, #0]
 8007070:	f000 000f 	and.w	r0, r0, #15
 8007074:	fa00 f00b 	lsl.w	r0, r0, fp
 8007078:	4303      	orrs	r3, r0
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	f10b 0b04 	add.w	fp, fp, #4
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	e00d      	b.n	80070a0 <__gethex+0x27c>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	9a06      	ldr	r2, [sp, #24]
 8007088:	4413      	add	r3, r2
 800708a:	42bb      	cmp	r3, r7
 800708c:	d3e0      	bcc.n	8007050 <__gethex+0x22c>
 800708e:	4618      	mov	r0, r3
 8007090:	9901      	ldr	r1, [sp, #4]
 8007092:	9307      	str	r3, [sp, #28]
 8007094:	4652      	mov	r2, sl
 8007096:	f001 fa82 	bl	800859e <strncmp>
 800709a:	9b07      	ldr	r3, [sp, #28]
 800709c:	2800      	cmp	r0, #0
 800709e:	d1d7      	bne.n	8007050 <__gethex+0x22c>
 80070a0:	461e      	mov	r6, r3
 80070a2:	e78b      	b.n	8006fbc <__gethex+0x198>
 80070a4:	f04f 0a03 	mov.w	sl, #3
 80070a8:	e7b8      	b.n	800701c <__gethex+0x1f8>
 80070aa:	da0a      	bge.n	80070c2 <__gethex+0x29e>
 80070ac:	1a37      	subs	r7, r6, r0
 80070ae:	4621      	mov	r1, r4
 80070b0:	ee18 0a10 	vmov	r0, s16
 80070b4:	463a      	mov	r2, r7
 80070b6:	f000 fc49 	bl	800794c <__lshift>
 80070ba:	1bed      	subs	r5, r5, r7
 80070bc:	4604      	mov	r4, r0
 80070be:	f100 0914 	add.w	r9, r0, #20
 80070c2:	f04f 0a00 	mov.w	sl, #0
 80070c6:	e7ae      	b.n	8007026 <__gethex+0x202>
 80070c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80070cc:	42a8      	cmp	r0, r5
 80070ce:	dd72      	ble.n	80071b6 <__gethex+0x392>
 80070d0:	1b45      	subs	r5, r0, r5
 80070d2:	42ae      	cmp	r6, r5
 80070d4:	dc36      	bgt.n	8007144 <__gethex+0x320>
 80070d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d02a      	beq.n	8007134 <__gethex+0x310>
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d02c      	beq.n	800713c <__gethex+0x318>
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d115      	bne.n	8007112 <__gethex+0x2ee>
 80070e6:	42ae      	cmp	r6, r5
 80070e8:	d113      	bne.n	8007112 <__gethex+0x2ee>
 80070ea:	2e01      	cmp	r6, #1
 80070ec:	d10b      	bne.n	8007106 <__gethex+0x2e2>
 80070ee:	9a04      	ldr	r2, [sp, #16]
 80070f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	2301      	movs	r3, #1
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	f8c9 3000 	str.w	r3, [r9]
 80070fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007100:	2762      	movs	r7, #98	; 0x62
 8007102:	601c      	str	r4, [r3, #0]
 8007104:	e723      	b.n	8006f4e <__gethex+0x12a>
 8007106:	1e71      	subs	r1, r6, #1
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fe5d 	bl	8007dc8 <__any_on>
 800710e:	2800      	cmp	r0, #0
 8007110:	d1ed      	bne.n	80070ee <__gethex+0x2ca>
 8007112:	ee18 0a10 	vmov	r0, s16
 8007116:	4621      	mov	r1, r4
 8007118:	f000 f9fc 	bl	8007514 <_Bfree>
 800711c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800711e:	2300      	movs	r3, #0
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	2750      	movs	r7, #80	; 0x50
 8007124:	e713      	b.n	8006f4e <__gethex+0x12a>
 8007126:	bf00      	nop
 8007128:	0800a068 	.word	0x0800a068
 800712c:	08009f89 	.word	0x08009f89
 8007130:	08009ffc 	.word	0x08009ffc
 8007134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1eb      	bne.n	8007112 <__gethex+0x2ee>
 800713a:	e7d8      	b.n	80070ee <__gethex+0x2ca>
 800713c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1d5      	bne.n	80070ee <__gethex+0x2ca>
 8007142:	e7e6      	b.n	8007112 <__gethex+0x2ee>
 8007144:	1e6f      	subs	r7, r5, #1
 8007146:	f1ba 0f00 	cmp.w	sl, #0
 800714a:	d131      	bne.n	80071b0 <__gethex+0x38c>
 800714c:	b127      	cbz	r7, 8007158 <__gethex+0x334>
 800714e:	4639      	mov	r1, r7
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fe39 	bl	8007dc8 <__any_on>
 8007156:	4682      	mov	sl, r0
 8007158:	117b      	asrs	r3, r7, #5
 800715a:	2101      	movs	r1, #1
 800715c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007160:	f007 071f 	and.w	r7, r7, #31
 8007164:	fa01 f707 	lsl.w	r7, r1, r7
 8007168:	421f      	tst	r7, r3
 800716a:	4629      	mov	r1, r5
 800716c:	4620      	mov	r0, r4
 800716e:	bf18      	it	ne
 8007170:	f04a 0a02 	orrne.w	sl, sl, #2
 8007174:	1b76      	subs	r6, r6, r5
 8007176:	f7ff fdee 	bl	8006d56 <rshift>
 800717a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800717e:	2702      	movs	r7, #2
 8007180:	f1ba 0f00 	cmp.w	sl, #0
 8007184:	d048      	beq.n	8007218 <__gethex+0x3f4>
 8007186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d015      	beq.n	80071ba <__gethex+0x396>
 800718e:	2b03      	cmp	r3, #3
 8007190:	d017      	beq.n	80071c2 <__gethex+0x39e>
 8007192:	2b01      	cmp	r3, #1
 8007194:	d109      	bne.n	80071aa <__gethex+0x386>
 8007196:	f01a 0f02 	tst.w	sl, #2
 800719a:	d006      	beq.n	80071aa <__gethex+0x386>
 800719c:	f8d9 0000 	ldr.w	r0, [r9]
 80071a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80071a4:	f01a 0f01 	tst.w	sl, #1
 80071a8:	d10e      	bne.n	80071c8 <__gethex+0x3a4>
 80071aa:	f047 0710 	orr.w	r7, r7, #16
 80071ae:	e033      	b.n	8007218 <__gethex+0x3f4>
 80071b0:	f04f 0a01 	mov.w	sl, #1
 80071b4:	e7d0      	b.n	8007158 <__gethex+0x334>
 80071b6:	2701      	movs	r7, #1
 80071b8:	e7e2      	b.n	8007180 <__gethex+0x35c>
 80071ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071bc:	f1c3 0301 	rsb	r3, r3, #1
 80071c0:	9315      	str	r3, [sp, #84]	; 0x54
 80071c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <__gethex+0x386>
 80071c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80071cc:	f104 0314 	add.w	r3, r4, #20
 80071d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80071d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80071d8:	f04f 0c00 	mov.w	ip, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80071e6:	d01c      	beq.n	8007222 <__gethex+0x3fe>
 80071e8:	3201      	adds	r2, #1
 80071ea:	6002      	str	r2, [r0, #0]
 80071ec:	2f02      	cmp	r7, #2
 80071ee:	f104 0314 	add.w	r3, r4, #20
 80071f2:	d13f      	bne.n	8007274 <__gethex+0x450>
 80071f4:	f8d8 2000 	ldr.w	r2, [r8]
 80071f8:	3a01      	subs	r2, #1
 80071fa:	42b2      	cmp	r2, r6
 80071fc:	d10a      	bne.n	8007214 <__gethex+0x3f0>
 80071fe:	1171      	asrs	r1, r6, #5
 8007200:	2201      	movs	r2, #1
 8007202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007206:	f006 061f 	and.w	r6, r6, #31
 800720a:	fa02 f606 	lsl.w	r6, r2, r6
 800720e:	421e      	tst	r6, r3
 8007210:	bf18      	it	ne
 8007212:	4617      	movne	r7, r2
 8007214:	f047 0720 	orr.w	r7, r7, #32
 8007218:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800721a:	601c      	str	r4, [r3, #0]
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	601d      	str	r5, [r3, #0]
 8007220:	e695      	b.n	8006f4e <__gethex+0x12a>
 8007222:	4299      	cmp	r1, r3
 8007224:	f843 cc04 	str.w	ip, [r3, #-4]
 8007228:	d8d8      	bhi.n	80071dc <__gethex+0x3b8>
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	459b      	cmp	fp, r3
 800722e:	db19      	blt.n	8007264 <__gethex+0x440>
 8007230:	6861      	ldr	r1, [r4, #4]
 8007232:	ee18 0a10 	vmov	r0, s16
 8007236:	3101      	adds	r1, #1
 8007238:	f000 f92c 	bl	8007494 <_Balloc>
 800723c:	4681      	mov	r9, r0
 800723e:	b918      	cbnz	r0, 8007248 <__gethex+0x424>
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <__gethex+0x488>)
 8007242:	4602      	mov	r2, r0
 8007244:	2184      	movs	r1, #132	; 0x84
 8007246:	e6a8      	b.n	8006f9a <__gethex+0x176>
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	3202      	adds	r2, #2
 800724c:	f104 010c 	add.w	r1, r4, #12
 8007250:	0092      	lsls	r2, r2, #2
 8007252:	300c      	adds	r0, #12
 8007254:	f000 f910 	bl	8007478 <memcpy>
 8007258:	4621      	mov	r1, r4
 800725a:	ee18 0a10 	vmov	r0, s16
 800725e:	f000 f959 	bl	8007514 <_Bfree>
 8007262:	464c      	mov	r4, r9
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800726c:	6122      	str	r2, [r4, #16]
 800726e:	2201      	movs	r2, #1
 8007270:	615a      	str	r2, [r3, #20]
 8007272:	e7bb      	b.n	80071ec <__gethex+0x3c8>
 8007274:	6922      	ldr	r2, [r4, #16]
 8007276:	455a      	cmp	r2, fp
 8007278:	dd0b      	ble.n	8007292 <__gethex+0x46e>
 800727a:	2101      	movs	r1, #1
 800727c:	4620      	mov	r0, r4
 800727e:	f7ff fd6a 	bl	8006d56 <rshift>
 8007282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007286:	3501      	adds	r5, #1
 8007288:	42ab      	cmp	r3, r5
 800728a:	f6ff aed0 	blt.w	800702e <__gethex+0x20a>
 800728e:	2701      	movs	r7, #1
 8007290:	e7c0      	b.n	8007214 <__gethex+0x3f0>
 8007292:	f016 061f 	ands.w	r6, r6, #31
 8007296:	d0fa      	beq.n	800728e <__gethex+0x46a>
 8007298:	449a      	add	sl, r3
 800729a:	f1c6 0620 	rsb	r6, r6, #32
 800729e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80072a2:	f000 f9ed 	bl	8007680 <__hi0bits>
 80072a6:	42b0      	cmp	r0, r6
 80072a8:	dbe7      	blt.n	800727a <__gethex+0x456>
 80072aa:	e7f0      	b.n	800728e <__gethex+0x46a>
 80072ac:	08009f89 	.word	0x08009f89

080072b0 <L_shift>:
 80072b0:	f1c2 0208 	rsb	r2, r2, #8
 80072b4:	0092      	lsls	r2, r2, #2
 80072b6:	b570      	push	{r4, r5, r6, lr}
 80072b8:	f1c2 0620 	rsb	r6, r2, #32
 80072bc:	6843      	ldr	r3, [r0, #4]
 80072be:	6804      	ldr	r4, [r0, #0]
 80072c0:	fa03 f506 	lsl.w	r5, r3, r6
 80072c4:	432c      	orrs	r4, r5
 80072c6:	40d3      	lsrs	r3, r2
 80072c8:	6004      	str	r4, [r0, #0]
 80072ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80072ce:	4288      	cmp	r0, r1
 80072d0:	d3f4      	bcc.n	80072bc <L_shift+0xc>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}

080072d4 <__match>:
 80072d4:	b530      	push	{r4, r5, lr}
 80072d6:	6803      	ldr	r3, [r0, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072de:	b914      	cbnz	r4, 80072e6 <__match+0x12>
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	2001      	movs	r0, #1
 80072e4:	bd30      	pop	{r4, r5, pc}
 80072e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80072ee:	2d19      	cmp	r5, #25
 80072f0:	bf98      	it	ls
 80072f2:	3220      	addls	r2, #32
 80072f4:	42a2      	cmp	r2, r4
 80072f6:	d0f0      	beq.n	80072da <__match+0x6>
 80072f8:	2000      	movs	r0, #0
 80072fa:	e7f3      	b.n	80072e4 <__match+0x10>

080072fc <__hexnan>:
 80072fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007300:	680b      	ldr	r3, [r1, #0]
 8007302:	6801      	ldr	r1, [r0, #0]
 8007304:	115e      	asrs	r6, r3, #5
 8007306:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800730a:	f013 031f 	ands.w	r3, r3, #31
 800730e:	b087      	sub	sp, #28
 8007310:	bf18      	it	ne
 8007312:	3604      	addne	r6, #4
 8007314:	2500      	movs	r5, #0
 8007316:	1f37      	subs	r7, r6, #4
 8007318:	4682      	mov	sl, r0
 800731a:	4690      	mov	r8, r2
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007322:	46b9      	mov	r9, r7
 8007324:	463c      	mov	r4, r7
 8007326:	9502      	str	r5, [sp, #8]
 8007328:	46ab      	mov	fp, r5
 800732a:	784a      	ldrb	r2, [r1, #1]
 800732c:	1c4b      	adds	r3, r1, #1
 800732e:	9303      	str	r3, [sp, #12]
 8007330:	b342      	cbz	r2, 8007384 <__hexnan+0x88>
 8007332:	4610      	mov	r0, r2
 8007334:	9105      	str	r1, [sp, #20]
 8007336:	9204      	str	r2, [sp, #16]
 8007338:	f7ff fd5f 	bl	8006dfa <__hexdig_fun>
 800733c:	2800      	cmp	r0, #0
 800733e:	d14f      	bne.n	80073e0 <__hexnan+0xe4>
 8007340:	9a04      	ldr	r2, [sp, #16]
 8007342:	9905      	ldr	r1, [sp, #20]
 8007344:	2a20      	cmp	r2, #32
 8007346:	d818      	bhi.n	800737a <__hexnan+0x7e>
 8007348:	9b02      	ldr	r3, [sp, #8]
 800734a:	459b      	cmp	fp, r3
 800734c:	dd13      	ble.n	8007376 <__hexnan+0x7a>
 800734e:	454c      	cmp	r4, r9
 8007350:	d206      	bcs.n	8007360 <__hexnan+0x64>
 8007352:	2d07      	cmp	r5, #7
 8007354:	dc04      	bgt.n	8007360 <__hexnan+0x64>
 8007356:	462a      	mov	r2, r5
 8007358:	4649      	mov	r1, r9
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff ffa8 	bl	80072b0 <L_shift>
 8007360:	4544      	cmp	r4, r8
 8007362:	d950      	bls.n	8007406 <__hexnan+0x10a>
 8007364:	2300      	movs	r3, #0
 8007366:	f1a4 0904 	sub.w	r9, r4, #4
 800736a:	f844 3c04 	str.w	r3, [r4, #-4]
 800736e:	f8cd b008 	str.w	fp, [sp, #8]
 8007372:	464c      	mov	r4, r9
 8007374:	461d      	mov	r5, r3
 8007376:	9903      	ldr	r1, [sp, #12]
 8007378:	e7d7      	b.n	800732a <__hexnan+0x2e>
 800737a:	2a29      	cmp	r2, #41	; 0x29
 800737c:	d156      	bne.n	800742c <__hexnan+0x130>
 800737e:	3102      	adds	r1, #2
 8007380:	f8ca 1000 	str.w	r1, [sl]
 8007384:	f1bb 0f00 	cmp.w	fp, #0
 8007388:	d050      	beq.n	800742c <__hexnan+0x130>
 800738a:	454c      	cmp	r4, r9
 800738c:	d206      	bcs.n	800739c <__hexnan+0xa0>
 800738e:	2d07      	cmp	r5, #7
 8007390:	dc04      	bgt.n	800739c <__hexnan+0xa0>
 8007392:	462a      	mov	r2, r5
 8007394:	4649      	mov	r1, r9
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff ff8a 	bl	80072b0 <L_shift>
 800739c:	4544      	cmp	r4, r8
 800739e:	d934      	bls.n	800740a <__hexnan+0x10e>
 80073a0:	f1a8 0204 	sub.w	r2, r8, #4
 80073a4:	4623      	mov	r3, r4
 80073a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80073aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80073ae:	429f      	cmp	r7, r3
 80073b0:	d2f9      	bcs.n	80073a6 <__hexnan+0xaa>
 80073b2:	1b3b      	subs	r3, r7, r4
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	3304      	adds	r3, #4
 80073ba:	3401      	adds	r4, #1
 80073bc:	3e03      	subs	r6, #3
 80073be:	42b4      	cmp	r4, r6
 80073c0:	bf88      	it	hi
 80073c2:	2304      	movhi	r3, #4
 80073c4:	4443      	add	r3, r8
 80073c6:	2200      	movs	r2, #0
 80073c8:	f843 2b04 	str.w	r2, [r3], #4
 80073cc:	429f      	cmp	r7, r3
 80073ce:	d2fb      	bcs.n	80073c8 <__hexnan+0xcc>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	b91b      	cbnz	r3, 80073dc <__hexnan+0xe0>
 80073d4:	4547      	cmp	r7, r8
 80073d6:	d127      	bne.n	8007428 <__hexnan+0x12c>
 80073d8:	2301      	movs	r3, #1
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	2005      	movs	r0, #5
 80073de:	e026      	b.n	800742e <__hexnan+0x132>
 80073e0:	3501      	adds	r5, #1
 80073e2:	2d08      	cmp	r5, #8
 80073e4:	f10b 0b01 	add.w	fp, fp, #1
 80073e8:	dd06      	ble.n	80073f8 <__hexnan+0xfc>
 80073ea:	4544      	cmp	r4, r8
 80073ec:	d9c3      	bls.n	8007376 <__hexnan+0x7a>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80073f4:	2501      	movs	r5, #1
 80073f6:	3c04      	subs	r4, #4
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	f000 000f 	and.w	r0, r0, #15
 80073fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007402:	6022      	str	r2, [r4, #0]
 8007404:	e7b7      	b.n	8007376 <__hexnan+0x7a>
 8007406:	2508      	movs	r5, #8
 8007408:	e7b5      	b.n	8007376 <__hexnan+0x7a>
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0df      	beq.n	80073d0 <__hexnan+0xd4>
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	f1c3 0320 	rsb	r3, r3, #32
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
 800741c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007420:	401a      	ands	r2, r3
 8007422:	f846 2c04 	str.w	r2, [r6, #-4]
 8007426:	e7d3      	b.n	80073d0 <__hexnan+0xd4>
 8007428:	3f04      	subs	r7, #4
 800742a:	e7d1      	b.n	80073d0 <__hexnan+0xd4>
 800742c:	2004      	movs	r0, #4
 800742e:	b007      	add	sp, #28
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007434 <_localeconv_r>:
 8007434:	4800      	ldr	r0, [pc, #0]	; (8007438 <_localeconv_r+0x4>)
 8007436:	4770      	bx	lr
 8007438:	2000016c 	.word	0x2000016c

0800743c <__retarget_lock_init_recursive>:
 800743c:	4770      	bx	lr

0800743e <__retarget_lock_acquire_recursive>:
 800743e:	4770      	bx	lr

08007440 <__retarget_lock_release_recursive>:
 8007440:	4770      	bx	lr
	...

08007444 <malloc>:
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <malloc+0xc>)
 8007446:	4601      	mov	r1, r0
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	f000 bd3d 	b.w	8007ec8 <_malloc_r>
 800744e:	bf00      	nop
 8007450:	20000014 	.word	0x20000014

08007454 <__ascii_mbtowc>:
 8007454:	b082      	sub	sp, #8
 8007456:	b901      	cbnz	r1, 800745a <__ascii_mbtowc+0x6>
 8007458:	a901      	add	r1, sp, #4
 800745a:	b142      	cbz	r2, 800746e <__ascii_mbtowc+0x1a>
 800745c:	b14b      	cbz	r3, 8007472 <__ascii_mbtowc+0x1e>
 800745e:	7813      	ldrb	r3, [r2, #0]
 8007460:	600b      	str	r3, [r1, #0]
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	1e10      	subs	r0, r2, #0
 8007466:	bf18      	it	ne
 8007468:	2001      	movne	r0, #1
 800746a:	b002      	add	sp, #8
 800746c:	4770      	bx	lr
 800746e:	4610      	mov	r0, r2
 8007470:	e7fb      	b.n	800746a <__ascii_mbtowc+0x16>
 8007472:	f06f 0001 	mvn.w	r0, #1
 8007476:	e7f8      	b.n	800746a <__ascii_mbtowc+0x16>

08007478 <memcpy>:
 8007478:	440a      	add	r2, r1
 800747a:	4291      	cmp	r1, r2
 800747c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007480:	d100      	bne.n	8007484 <memcpy+0xc>
 8007482:	4770      	bx	lr
 8007484:	b510      	push	{r4, lr}
 8007486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800748e:	4291      	cmp	r1, r2
 8007490:	d1f9      	bne.n	8007486 <memcpy+0xe>
 8007492:	bd10      	pop	{r4, pc}

08007494 <_Balloc>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007498:	4604      	mov	r4, r0
 800749a:	460d      	mov	r5, r1
 800749c:	b976      	cbnz	r6, 80074bc <_Balloc+0x28>
 800749e:	2010      	movs	r0, #16
 80074a0:	f7ff ffd0 	bl	8007444 <malloc>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6260      	str	r0, [r4, #36]	; 0x24
 80074a8:	b920      	cbnz	r0, 80074b4 <_Balloc+0x20>
 80074aa:	4b18      	ldr	r3, [pc, #96]	; (800750c <_Balloc+0x78>)
 80074ac:	4818      	ldr	r0, [pc, #96]	; (8007510 <_Balloc+0x7c>)
 80074ae:	2166      	movs	r1, #102	; 0x66
 80074b0:	f7fe fcb4 	bl	8005e1c <__assert_func>
 80074b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b8:	6006      	str	r6, [r0, #0]
 80074ba:	60c6      	str	r6, [r0, #12]
 80074bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074be:	68f3      	ldr	r3, [r6, #12]
 80074c0:	b183      	cbz	r3, 80074e4 <_Balloc+0x50>
 80074c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074ca:	b9b8      	cbnz	r0, 80074fc <_Balloc+0x68>
 80074cc:	2101      	movs	r1, #1
 80074ce:	fa01 f605 	lsl.w	r6, r1, r5
 80074d2:	1d72      	adds	r2, r6, #5
 80074d4:	0092      	lsls	r2, r2, #2
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 fc97 	bl	8007e0a <_calloc_r>
 80074dc:	b160      	cbz	r0, 80074f8 <_Balloc+0x64>
 80074de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074e2:	e00e      	b.n	8007502 <_Balloc+0x6e>
 80074e4:	2221      	movs	r2, #33	; 0x21
 80074e6:	2104      	movs	r1, #4
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fc8e 	bl	8007e0a <_calloc_r>
 80074ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f0:	60f0      	str	r0, [r6, #12]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e4      	bne.n	80074c2 <_Balloc+0x2e>
 80074f8:	2000      	movs	r0, #0
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	6802      	ldr	r2, [r0, #0]
 80074fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007502:	2300      	movs	r3, #0
 8007504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007508:	e7f7      	b.n	80074fa <_Balloc+0x66>
 800750a:	bf00      	nop
 800750c:	08009d15 	.word	0x08009d15
 8007510:	0800a07c 	.word	0x0800a07c

08007514 <_Bfree>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007518:	4605      	mov	r5, r0
 800751a:	460c      	mov	r4, r1
 800751c:	b976      	cbnz	r6, 800753c <_Bfree+0x28>
 800751e:	2010      	movs	r0, #16
 8007520:	f7ff ff90 	bl	8007444 <malloc>
 8007524:	4602      	mov	r2, r0
 8007526:	6268      	str	r0, [r5, #36]	; 0x24
 8007528:	b920      	cbnz	r0, 8007534 <_Bfree+0x20>
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <_Bfree+0x3c>)
 800752c:	4809      	ldr	r0, [pc, #36]	; (8007554 <_Bfree+0x40>)
 800752e:	218a      	movs	r1, #138	; 0x8a
 8007530:	f7fe fc74 	bl	8005e1c <__assert_func>
 8007534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007538:	6006      	str	r6, [r0, #0]
 800753a:	60c6      	str	r6, [r0, #12]
 800753c:	b13c      	cbz	r4, 800754e <_Bfree+0x3a>
 800753e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007540:	6862      	ldr	r2, [r4, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007548:	6021      	str	r1, [r4, #0]
 800754a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	08009d15 	.word	0x08009d15
 8007554:	0800a07c 	.word	0x0800a07c

08007558 <__multadd>:
 8007558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755c:	690e      	ldr	r6, [r1, #16]
 800755e:	4607      	mov	r7, r0
 8007560:	4698      	mov	r8, r3
 8007562:	460c      	mov	r4, r1
 8007564:	f101 0014 	add.w	r0, r1, #20
 8007568:	2300      	movs	r3, #0
 800756a:	6805      	ldr	r5, [r0, #0]
 800756c:	b2a9      	uxth	r1, r5
 800756e:	fb02 8101 	mla	r1, r2, r1, r8
 8007572:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007576:	0c2d      	lsrs	r5, r5, #16
 8007578:	fb02 c505 	mla	r5, r2, r5, ip
 800757c:	b289      	uxth	r1, r1
 800757e:	3301      	adds	r3, #1
 8007580:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007584:	429e      	cmp	r6, r3
 8007586:	f840 1b04 	str.w	r1, [r0], #4
 800758a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800758e:	dcec      	bgt.n	800756a <__multadd+0x12>
 8007590:	f1b8 0f00 	cmp.w	r8, #0
 8007594:	d022      	beq.n	80075dc <__multadd+0x84>
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	42b3      	cmp	r3, r6
 800759a:	dc19      	bgt.n	80075d0 <__multadd+0x78>
 800759c:	6861      	ldr	r1, [r4, #4]
 800759e:	4638      	mov	r0, r7
 80075a0:	3101      	adds	r1, #1
 80075a2:	f7ff ff77 	bl	8007494 <_Balloc>
 80075a6:	4605      	mov	r5, r0
 80075a8:	b928      	cbnz	r0, 80075b6 <__multadd+0x5e>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <__multadd+0x8c>)
 80075ae:	480e      	ldr	r0, [pc, #56]	; (80075e8 <__multadd+0x90>)
 80075b0:	21b5      	movs	r1, #181	; 0xb5
 80075b2:	f7fe fc33 	bl	8005e1c <__assert_func>
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	3202      	adds	r2, #2
 80075ba:	f104 010c 	add.w	r1, r4, #12
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	300c      	adds	r0, #12
 80075c2:	f7ff ff59 	bl	8007478 <memcpy>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff ffa3 	bl	8007514 <_Bfree>
 80075ce:	462c      	mov	r4, r5
 80075d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80075d4:	3601      	adds	r6, #1
 80075d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80075da:	6126      	str	r6, [r4, #16]
 80075dc:	4620      	mov	r0, r4
 80075de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e2:	bf00      	nop
 80075e4:	08009f89 	.word	0x08009f89
 80075e8:	0800a07c 	.word	0x0800a07c

080075ec <__s2b>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	4615      	mov	r5, r2
 80075f4:	461f      	mov	r7, r3
 80075f6:	2209      	movs	r2, #9
 80075f8:	3308      	adds	r3, #8
 80075fa:	4606      	mov	r6, r0
 80075fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007600:	2100      	movs	r1, #0
 8007602:	2201      	movs	r2, #1
 8007604:	429a      	cmp	r2, r3
 8007606:	db09      	blt.n	800761c <__s2b+0x30>
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff43 	bl	8007494 <_Balloc>
 800760e:	b940      	cbnz	r0, 8007622 <__s2b+0x36>
 8007610:	4602      	mov	r2, r0
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <__s2b+0x8c>)
 8007614:	4819      	ldr	r0, [pc, #100]	; (800767c <__s2b+0x90>)
 8007616:	21ce      	movs	r1, #206	; 0xce
 8007618:	f7fe fc00 	bl	8005e1c <__assert_func>
 800761c:	0052      	lsls	r2, r2, #1
 800761e:	3101      	adds	r1, #1
 8007620:	e7f0      	b.n	8007604 <__s2b+0x18>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	6143      	str	r3, [r0, #20]
 8007626:	2d09      	cmp	r5, #9
 8007628:	f04f 0301 	mov.w	r3, #1
 800762c:	6103      	str	r3, [r0, #16]
 800762e:	dd16      	ble.n	800765e <__s2b+0x72>
 8007630:	f104 0909 	add.w	r9, r4, #9
 8007634:	46c8      	mov	r8, r9
 8007636:	442c      	add	r4, r5
 8007638:	f818 3b01 	ldrb.w	r3, [r8], #1
 800763c:	4601      	mov	r1, r0
 800763e:	3b30      	subs	r3, #48	; 0x30
 8007640:	220a      	movs	r2, #10
 8007642:	4630      	mov	r0, r6
 8007644:	f7ff ff88 	bl	8007558 <__multadd>
 8007648:	45a0      	cmp	r8, r4
 800764a:	d1f5      	bne.n	8007638 <__s2b+0x4c>
 800764c:	f1a5 0408 	sub.w	r4, r5, #8
 8007650:	444c      	add	r4, r9
 8007652:	1b2d      	subs	r5, r5, r4
 8007654:	1963      	adds	r3, r4, r5
 8007656:	42bb      	cmp	r3, r7
 8007658:	db04      	blt.n	8007664 <__s2b+0x78>
 800765a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765e:	340a      	adds	r4, #10
 8007660:	2509      	movs	r5, #9
 8007662:	e7f6      	b.n	8007652 <__s2b+0x66>
 8007664:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007668:	4601      	mov	r1, r0
 800766a:	3b30      	subs	r3, #48	; 0x30
 800766c:	220a      	movs	r2, #10
 800766e:	4630      	mov	r0, r6
 8007670:	f7ff ff72 	bl	8007558 <__multadd>
 8007674:	e7ee      	b.n	8007654 <__s2b+0x68>
 8007676:	bf00      	nop
 8007678:	08009f89 	.word	0x08009f89
 800767c:	0800a07c 	.word	0x0800a07c

08007680 <__hi0bits>:
 8007680:	0c03      	lsrs	r3, r0, #16
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	b9d3      	cbnz	r3, 80076bc <__hi0bits+0x3c>
 8007686:	0400      	lsls	r0, r0, #16
 8007688:	2310      	movs	r3, #16
 800768a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800768e:	bf04      	itt	eq
 8007690:	0200      	lsleq	r0, r0, #8
 8007692:	3308      	addeq	r3, #8
 8007694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007698:	bf04      	itt	eq
 800769a:	0100      	lsleq	r0, r0, #4
 800769c:	3304      	addeq	r3, #4
 800769e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076a2:	bf04      	itt	eq
 80076a4:	0080      	lsleq	r0, r0, #2
 80076a6:	3302      	addeq	r3, #2
 80076a8:	2800      	cmp	r0, #0
 80076aa:	db05      	blt.n	80076b8 <__hi0bits+0x38>
 80076ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076b0:	f103 0301 	add.w	r3, r3, #1
 80076b4:	bf08      	it	eq
 80076b6:	2320      	moveq	r3, #32
 80076b8:	4618      	mov	r0, r3
 80076ba:	4770      	bx	lr
 80076bc:	2300      	movs	r3, #0
 80076be:	e7e4      	b.n	800768a <__hi0bits+0xa>

080076c0 <__lo0bits>:
 80076c0:	6803      	ldr	r3, [r0, #0]
 80076c2:	f013 0207 	ands.w	r2, r3, #7
 80076c6:	4601      	mov	r1, r0
 80076c8:	d00b      	beq.n	80076e2 <__lo0bits+0x22>
 80076ca:	07da      	lsls	r2, r3, #31
 80076cc:	d424      	bmi.n	8007718 <__lo0bits+0x58>
 80076ce:	0798      	lsls	r0, r3, #30
 80076d0:	bf49      	itett	mi
 80076d2:	085b      	lsrmi	r3, r3, #1
 80076d4:	089b      	lsrpl	r3, r3, #2
 80076d6:	2001      	movmi	r0, #1
 80076d8:	600b      	strmi	r3, [r1, #0]
 80076da:	bf5c      	itt	pl
 80076dc:	600b      	strpl	r3, [r1, #0]
 80076de:	2002      	movpl	r0, #2
 80076e0:	4770      	bx	lr
 80076e2:	b298      	uxth	r0, r3
 80076e4:	b9b0      	cbnz	r0, 8007714 <__lo0bits+0x54>
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	2010      	movs	r0, #16
 80076ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076ee:	bf04      	itt	eq
 80076f0:	0a1b      	lsreq	r3, r3, #8
 80076f2:	3008      	addeq	r0, #8
 80076f4:	071a      	lsls	r2, r3, #28
 80076f6:	bf04      	itt	eq
 80076f8:	091b      	lsreq	r3, r3, #4
 80076fa:	3004      	addeq	r0, #4
 80076fc:	079a      	lsls	r2, r3, #30
 80076fe:	bf04      	itt	eq
 8007700:	089b      	lsreq	r3, r3, #2
 8007702:	3002      	addeq	r0, #2
 8007704:	07da      	lsls	r2, r3, #31
 8007706:	d403      	bmi.n	8007710 <__lo0bits+0x50>
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f100 0001 	add.w	r0, r0, #1
 800770e:	d005      	beq.n	800771c <__lo0bits+0x5c>
 8007710:	600b      	str	r3, [r1, #0]
 8007712:	4770      	bx	lr
 8007714:	4610      	mov	r0, r2
 8007716:	e7e8      	b.n	80076ea <__lo0bits+0x2a>
 8007718:	2000      	movs	r0, #0
 800771a:	4770      	bx	lr
 800771c:	2020      	movs	r0, #32
 800771e:	4770      	bx	lr

08007720 <__i2b>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	2101      	movs	r1, #1
 8007726:	f7ff feb5 	bl	8007494 <_Balloc>
 800772a:	4602      	mov	r2, r0
 800772c:	b928      	cbnz	r0, 800773a <__i2b+0x1a>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <__i2b+0x24>)
 8007730:	4805      	ldr	r0, [pc, #20]	; (8007748 <__i2b+0x28>)
 8007732:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007736:	f7fe fb71 	bl	8005e1c <__assert_func>
 800773a:	2301      	movs	r3, #1
 800773c:	6144      	str	r4, [r0, #20]
 800773e:	6103      	str	r3, [r0, #16]
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	08009f89 	.word	0x08009f89
 8007748:	0800a07c 	.word	0x0800a07c

0800774c <__multiply>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	4614      	mov	r4, r2
 8007752:	690a      	ldr	r2, [r1, #16]
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	429a      	cmp	r2, r3
 8007758:	bfb8      	it	lt
 800775a:	460b      	movlt	r3, r1
 800775c:	460d      	mov	r5, r1
 800775e:	bfbc      	itt	lt
 8007760:	4625      	movlt	r5, r4
 8007762:	461c      	movlt	r4, r3
 8007764:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007768:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800776c:	68ab      	ldr	r3, [r5, #8]
 800776e:	6869      	ldr	r1, [r5, #4]
 8007770:	eb0a 0709 	add.w	r7, sl, r9
 8007774:	42bb      	cmp	r3, r7
 8007776:	b085      	sub	sp, #20
 8007778:	bfb8      	it	lt
 800777a:	3101      	addlt	r1, #1
 800777c:	f7ff fe8a 	bl	8007494 <_Balloc>
 8007780:	b930      	cbnz	r0, 8007790 <__multiply+0x44>
 8007782:	4602      	mov	r2, r0
 8007784:	4b42      	ldr	r3, [pc, #264]	; (8007890 <__multiply+0x144>)
 8007786:	4843      	ldr	r0, [pc, #268]	; (8007894 <__multiply+0x148>)
 8007788:	f240 115d 	movw	r1, #349	; 0x15d
 800778c:	f7fe fb46 	bl	8005e1c <__assert_func>
 8007790:	f100 0614 	add.w	r6, r0, #20
 8007794:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007798:	4633      	mov	r3, r6
 800779a:	2200      	movs	r2, #0
 800779c:	4543      	cmp	r3, r8
 800779e:	d31e      	bcc.n	80077de <__multiply+0x92>
 80077a0:	f105 0c14 	add.w	ip, r5, #20
 80077a4:	f104 0314 	add.w	r3, r4, #20
 80077a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80077b0:	9202      	str	r2, [sp, #8]
 80077b2:	ebac 0205 	sub.w	r2, ip, r5
 80077b6:	3a15      	subs	r2, #21
 80077b8:	f022 0203 	bic.w	r2, r2, #3
 80077bc:	3204      	adds	r2, #4
 80077be:	f105 0115 	add.w	r1, r5, #21
 80077c2:	458c      	cmp	ip, r1
 80077c4:	bf38      	it	cc
 80077c6:	2204      	movcc	r2, #4
 80077c8:	9201      	str	r2, [sp, #4]
 80077ca:	9a02      	ldr	r2, [sp, #8]
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d808      	bhi.n	80077e4 <__multiply+0x98>
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	dc55      	bgt.n	8007882 <__multiply+0x136>
 80077d6:	6107      	str	r7, [r0, #16]
 80077d8:	b005      	add	sp, #20
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077de:	f843 2b04 	str.w	r2, [r3], #4
 80077e2:	e7db      	b.n	800779c <__multiply+0x50>
 80077e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80077e8:	f1ba 0f00 	cmp.w	sl, #0
 80077ec:	d020      	beq.n	8007830 <__multiply+0xe4>
 80077ee:	f105 0e14 	add.w	lr, r5, #20
 80077f2:	46b1      	mov	r9, r6
 80077f4:	2200      	movs	r2, #0
 80077f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80077fa:	f8d9 b000 	ldr.w	fp, [r9]
 80077fe:	b2a1      	uxth	r1, r4
 8007800:	fa1f fb8b 	uxth.w	fp, fp
 8007804:	fb0a b101 	mla	r1, sl, r1, fp
 8007808:	4411      	add	r1, r2
 800780a:	f8d9 2000 	ldr.w	r2, [r9]
 800780e:	0c24      	lsrs	r4, r4, #16
 8007810:	0c12      	lsrs	r2, r2, #16
 8007812:	fb0a 2404 	mla	r4, sl, r4, r2
 8007816:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800781a:	b289      	uxth	r1, r1
 800781c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007820:	45f4      	cmp	ip, lr
 8007822:	f849 1b04 	str.w	r1, [r9], #4
 8007826:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800782a:	d8e4      	bhi.n	80077f6 <__multiply+0xaa>
 800782c:	9901      	ldr	r1, [sp, #4]
 800782e:	5072      	str	r2, [r6, r1]
 8007830:	9a03      	ldr	r2, [sp, #12]
 8007832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007836:	3304      	adds	r3, #4
 8007838:	f1b9 0f00 	cmp.w	r9, #0
 800783c:	d01f      	beq.n	800787e <__multiply+0x132>
 800783e:	6834      	ldr	r4, [r6, #0]
 8007840:	f105 0114 	add.w	r1, r5, #20
 8007844:	46b6      	mov	lr, r6
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	880a      	ldrh	r2, [r1, #0]
 800784c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007850:	fb09 b202 	mla	r2, r9, r2, fp
 8007854:	4492      	add	sl, r2
 8007856:	b2a4      	uxth	r4, r4
 8007858:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800785c:	f84e 4b04 	str.w	r4, [lr], #4
 8007860:	f851 4b04 	ldr.w	r4, [r1], #4
 8007864:	f8be 2000 	ldrh.w	r2, [lr]
 8007868:	0c24      	lsrs	r4, r4, #16
 800786a:	fb09 2404 	mla	r4, r9, r4, r2
 800786e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007872:	458c      	cmp	ip, r1
 8007874:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007878:	d8e7      	bhi.n	800784a <__multiply+0xfe>
 800787a:	9a01      	ldr	r2, [sp, #4]
 800787c:	50b4      	str	r4, [r6, r2]
 800787e:	3604      	adds	r6, #4
 8007880:	e7a3      	b.n	80077ca <__multiply+0x7e>
 8007882:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1a5      	bne.n	80077d6 <__multiply+0x8a>
 800788a:	3f01      	subs	r7, #1
 800788c:	e7a1      	b.n	80077d2 <__multiply+0x86>
 800788e:	bf00      	nop
 8007890:	08009f89 	.word	0x08009f89
 8007894:	0800a07c 	.word	0x0800a07c

08007898 <__pow5mult>:
 8007898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800789c:	4615      	mov	r5, r2
 800789e:	f012 0203 	ands.w	r2, r2, #3
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	d007      	beq.n	80078b8 <__pow5mult+0x20>
 80078a8:	4c25      	ldr	r4, [pc, #148]	; (8007940 <__pow5mult+0xa8>)
 80078aa:	3a01      	subs	r2, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078b2:	f7ff fe51 	bl	8007558 <__multadd>
 80078b6:	4607      	mov	r7, r0
 80078b8:	10ad      	asrs	r5, r5, #2
 80078ba:	d03d      	beq.n	8007938 <__pow5mult+0xa0>
 80078bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078be:	b97c      	cbnz	r4, 80078e0 <__pow5mult+0x48>
 80078c0:	2010      	movs	r0, #16
 80078c2:	f7ff fdbf 	bl	8007444 <malloc>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6270      	str	r0, [r6, #36]	; 0x24
 80078ca:	b928      	cbnz	r0, 80078d8 <__pow5mult+0x40>
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <__pow5mult+0xac>)
 80078ce:	481e      	ldr	r0, [pc, #120]	; (8007948 <__pow5mult+0xb0>)
 80078d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078d4:	f7fe faa2 	bl	8005e1c <__assert_func>
 80078d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078dc:	6004      	str	r4, [r0, #0]
 80078de:	60c4      	str	r4, [r0, #12]
 80078e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078e8:	b94c      	cbnz	r4, 80078fe <__pow5mult+0x66>
 80078ea:	f240 2171 	movw	r1, #625	; 0x271
 80078ee:	4630      	mov	r0, r6
 80078f0:	f7ff ff16 	bl	8007720 <__i2b>
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078fa:	4604      	mov	r4, r0
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	f04f 0900 	mov.w	r9, #0
 8007902:	07eb      	lsls	r3, r5, #31
 8007904:	d50a      	bpl.n	800791c <__pow5mult+0x84>
 8007906:	4639      	mov	r1, r7
 8007908:	4622      	mov	r2, r4
 800790a:	4630      	mov	r0, r6
 800790c:	f7ff ff1e 	bl	800774c <__multiply>
 8007910:	4639      	mov	r1, r7
 8007912:	4680      	mov	r8, r0
 8007914:	4630      	mov	r0, r6
 8007916:	f7ff fdfd 	bl	8007514 <_Bfree>
 800791a:	4647      	mov	r7, r8
 800791c:	106d      	asrs	r5, r5, #1
 800791e:	d00b      	beq.n	8007938 <__pow5mult+0xa0>
 8007920:	6820      	ldr	r0, [r4, #0]
 8007922:	b938      	cbnz	r0, 8007934 <__pow5mult+0x9c>
 8007924:	4622      	mov	r2, r4
 8007926:	4621      	mov	r1, r4
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ff0f 	bl	800774c <__multiply>
 800792e:	6020      	str	r0, [r4, #0]
 8007930:	f8c0 9000 	str.w	r9, [r0]
 8007934:	4604      	mov	r4, r0
 8007936:	e7e4      	b.n	8007902 <__pow5mult+0x6a>
 8007938:	4638      	mov	r0, r7
 800793a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793e:	bf00      	nop
 8007940:	0800a1d0 	.word	0x0800a1d0
 8007944:	08009d15 	.word	0x08009d15
 8007948:	0800a07c 	.word	0x0800a07c

0800794c <__lshift>:
 800794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	6849      	ldr	r1, [r1, #4]
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800795a:	68a3      	ldr	r3, [r4, #8]
 800795c:	4607      	mov	r7, r0
 800795e:	4691      	mov	r9, r2
 8007960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007964:	f108 0601 	add.w	r6, r8, #1
 8007968:	42b3      	cmp	r3, r6
 800796a:	db0b      	blt.n	8007984 <__lshift+0x38>
 800796c:	4638      	mov	r0, r7
 800796e:	f7ff fd91 	bl	8007494 <_Balloc>
 8007972:	4605      	mov	r5, r0
 8007974:	b948      	cbnz	r0, 800798a <__lshift+0x3e>
 8007976:	4602      	mov	r2, r0
 8007978:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <__lshift+0xd0>)
 800797a:	4829      	ldr	r0, [pc, #164]	; (8007a20 <__lshift+0xd4>)
 800797c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007980:	f7fe fa4c 	bl	8005e1c <__assert_func>
 8007984:	3101      	adds	r1, #1
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	e7ee      	b.n	8007968 <__lshift+0x1c>
 800798a:	2300      	movs	r3, #0
 800798c:	f100 0114 	add.w	r1, r0, #20
 8007990:	f100 0210 	add.w	r2, r0, #16
 8007994:	4618      	mov	r0, r3
 8007996:	4553      	cmp	r3, sl
 8007998:	db33      	blt.n	8007a02 <__lshift+0xb6>
 800799a:	6920      	ldr	r0, [r4, #16]
 800799c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079a0:	f104 0314 	add.w	r3, r4, #20
 80079a4:	f019 091f 	ands.w	r9, r9, #31
 80079a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079b0:	d02b      	beq.n	8007a0a <__lshift+0xbe>
 80079b2:	f1c9 0e20 	rsb	lr, r9, #32
 80079b6:	468a      	mov	sl, r1
 80079b8:	2200      	movs	r2, #0
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	fa00 f009 	lsl.w	r0, r0, r9
 80079c0:	4302      	orrs	r2, r0
 80079c2:	f84a 2b04 	str.w	r2, [sl], #4
 80079c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ca:	459c      	cmp	ip, r3
 80079cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80079d0:	d8f3      	bhi.n	80079ba <__lshift+0x6e>
 80079d2:	ebac 0304 	sub.w	r3, ip, r4
 80079d6:	3b15      	subs	r3, #21
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	3304      	adds	r3, #4
 80079de:	f104 0015 	add.w	r0, r4, #21
 80079e2:	4584      	cmp	ip, r0
 80079e4:	bf38      	it	cc
 80079e6:	2304      	movcc	r3, #4
 80079e8:	50ca      	str	r2, [r1, r3]
 80079ea:	b10a      	cbz	r2, 80079f0 <__lshift+0xa4>
 80079ec:	f108 0602 	add.w	r6, r8, #2
 80079f0:	3e01      	subs	r6, #1
 80079f2:	4638      	mov	r0, r7
 80079f4:	612e      	str	r6, [r5, #16]
 80079f6:	4621      	mov	r1, r4
 80079f8:	f7ff fd8c 	bl	8007514 <_Bfree>
 80079fc:	4628      	mov	r0, r5
 80079fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a06:	3301      	adds	r3, #1
 8007a08:	e7c5      	b.n	8007996 <__lshift+0x4a>
 8007a0a:	3904      	subs	r1, #4
 8007a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a14:	459c      	cmp	ip, r3
 8007a16:	d8f9      	bhi.n	8007a0c <__lshift+0xc0>
 8007a18:	e7ea      	b.n	80079f0 <__lshift+0xa4>
 8007a1a:	bf00      	nop
 8007a1c:	08009f89 	.word	0x08009f89
 8007a20:	0800a07c 	.word	0x0800a07c

08007a24 <__mcmp>:
 8007a24:	b530      	push	{r4, r5, lr}
 8007a26:	6902      	ldr	r2, [r0, #16]
 8007a28:	690c      	ldr	r4, [r1, #16]
 8007a2a:	1b12      	subs	r2, r2, r4
 8007a2c:	d10e      	bne.n	8007a4c <__mcmp+0x28>
 8007a2e:	f100 0314 	add.w	r3, r0, #20
 8007a32:	3114      	adds	r1, #20
 8007a34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a44:	42a5      	cmp	r5, r4
 8007a46:	d003      	beq.n	8007a50 <__mcmp+0x2c>
 8007a48:	d305      	bcc.n	8007a56 <__mcmp+0x32>
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	bd30      	pop	{r4, r5, pc}
 8007a50:	4283      	cmp	r3, r0
 8007a52:	d3f3      	bcc.n	8007a3c <__mcmp+0x18>
 8007a54:	e7fa      	b.n	8007a4c <__mcmp+0x28>
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	e7f7      	b.n	8007a4c <__mcmp+0x28>

08007a5c <__mdiff>:
 8007a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	460c      	mov	r4, r1
 8007a62:	4606      	mov	r6, r0
 8007a64:	4611      	mov	r1, r2
 8007a66:	4620      	mov	r0, r4
 8007a68:	4617      	mov	r7, r2
 8007a6a:	f7ff ffdb 	bl	8007a24 <__mcmp>
 8007a6e:	1e05      	subs	r5, r0, #0
 8007a70:	d110      	bne.n	8007a94 <__mdiff+0x38>
 8007a72:	4629      	mov	r1, r5
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff fd0d 	bl	8007494 <_Balloc>
 8007a7a:	b930      	cbnz	r0, 8007a8a <__mdiff+0x2e>
 8007a7c:	4b39      	ldr	r3, [pc, #228]	; (8007b64 <__mdiff+0x108>)
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f240 2132 	movw	r1, #562	; 0x232
 8007a84:	4838      	ldr	r0, [pc, #224]	; (8007b68 <__mdiff+0x10c>)
 8007a86:	f7fe f9c9 	bl	8005e1c <__assert_func>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	bfa4      	itt	ge
 8007a96:	463b      	movge	r3, r7
 8007a98:	4627      	movge	r7, r4
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	bfa6      	itte	ge
 8007aa0:	461c      	movge	r4, r3
 8007aa2:	2500      	movge	r5, #0
 8007aa4:	2501      	movlt	r5, #1
 8007aa6:	f7ff fcf5 	bl	8007494 <_Balloc>
 8007aaa:	b920      	cbnz	r0, 8007ab6 <__mdiff+0x5a>
 8007aac:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <__mdiff+0x108>)
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ab4:	e7e6      	b.n	8007a84 <__mdiff+0x28>
 8007ab6:	693e      	ldr	r6, [r7, #16]
 8007ab8:	60c5      	str	r5, [r0, #12]
 8007aba:	6925      	ldr	r5, [r4, #16]
 8007abc:	f107 0114 	add.w	r1, r7, #20
 8007ac0:	f104 0914 	add.w	r9, r4, #20
 8007ac4:	f100 0e14 	add.w	lr, r0, #20
 8007ac8:	f107 0210 	add.w	r2, r7, #16
 8007acc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ad0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ad4:	46f2      	mov	sl, lr
 8007ad6:	2700      	movs	r7, #0
 8007ad8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007adc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ae0:	fa1f f883 	uxth.w	r8, r3
 8007ae4:	fa17 f78b 	uxtah	r7, r7, fp
 8007ae8:	0c1b      	lsrs	r3, r3, #16
 8007aea:	eba7 0808 	sub.w	r8, r7, r8
 8007aee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007af2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007af6:	fa1f f888 	uxth.w	r8, r8
 8007afa:	141f      	asrs	r7, r3, #16
 8007afc:	454d      	cmp	r5, r9
 8007afe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b02:	f84a 3b04 	str.w	r3, [sl], #4
 8007b06:	d8e7      	bhi.n	8007ad8 <__mdiff+0x7c>
 8007b08:	1b2b      	subs	r3, r5, r4
 8007b0a:	3b15      	subs	r3, #21
 8007b0c:	f023 0303 	bic.w	r3, r3, #3
 8007b10:	3304      	adds	r3, #4
 8007b12:	3415      	adds	r4, #21
 8007b14:	42a5      	cmp	r5, r4
 8007b16:	bf38      	it	cc
 8007b18:	2304      	movcc	r3, #4
 8007b1a:	4419      	add	r1, r3
 8007b1c:	4473      	add	r3, lr
 8007b1e:	469e      	mov	lr, r3
 8007b20:	460d      	mov	r5, r1
 8007b22:	4565      	cmp	r5, ip
 8007b24:	d30e      	bcc.n	8007b44 <__mdiff+0xe8>
 8007b26:	f10c 0203 	add.w	r2, ip, #3
 8007b2a:	1a52      	subs	r2, r2, r1
 8007b2c:	f022 0203 	bic.w	r2, r2, #3
 8007b30:	3903      	subs	r1, #3
 8007b32:	458c      	cmp	ip, r1
 8007b34:	bf38      	it	cc
 8007b36:	2200      	movcc	r2, #0
 8007b38:	441a      	add	r2, r3
 8007b3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b3e:	b17b      	cbz	r3, 8007b60 <__mdiff+0x104>
 8007b40:	6106      	str	r6, [r0, #16]
 8007b42:	e7a5      	b.n	8007a90 <__mdiff+0x34>
 8007b44:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b48:	fa17 f488 	uxtah	r4, r7, r8
 8007b4c:	1422      	asrs	r2, r4, #16
 8007b4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b52:	b2a4      	uxth	r4, r4
 8007b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b58:	f84e 4b04 	str.w	r4, [lr], #4
 8007b5c:	1417      	asrs	r7, r2, #16
 8007b5e:	e7e0      	b.n	8007b22 <__mdiff+0xc6>
 8007b60:	3e01      	subs	r6, #1
 8007b62:	e7ea      	b.n	8007b3a <__mdiff+0xde>
 8007b64:	08009f89 	.word	0x08009f89
 8007b68:	0800a07c 	.word	0x0800a07c

08007b6c <__ulp>:
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	ed8d 0b00 	vstr	d0, [sp]
 8007b72:	9b01      	ldr	r3, [sp, #4]
 8007b74:	4912      	ldr	r1, [pc, #72]	; (8007bc0 <__ulp+0x54>)
 8007b76:	4019      	ands	r1, r3
 8007b78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	dd05      	ble.n	8007b8c <__ulp+0x20>
 8007b80:	2200      	movs	r2, #0
 8007b82:	460b      	mov	r3, r1
 8007b84:	ec43 2b10 	vmov	d0, r2, r3
 8007b88:	b002      	add	sp, #8
 8007b8a:	4770      	bx	lr
 8007b8c:	4249      	negs	r1, r1
 8007b8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007b92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	da04      	bge.n	8007baa <__ulp+0x3e>
 8007ba0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ba4:	fa41 f300 	asr.w	r3, r1, r0
 8007ba8:	e7ec      	b.n	8007b84 <__ulp+0x18>
 8007baa:	f1a0 0114 	sub.w	r1, r0, #20
 8007bae:	291e      	cmp	r1, #30
 8007bb0:	bfda      	itte	le
 8007bb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007bb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8007bba:	2101      	movgt	r1, #1
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	e7e1      	b.n	8007b84 <__ulp+0x18>
 8007bc0:	7ff00000 	.word	0x7ff00000

08007bc4 <__b2d>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	6905      	ldr	r5, [r0, #16]
 8007bc8:	f100 0714 	add.w	r7, r0, #20
 8007bcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007bd0:	1f2e      	subs	r6, r5, #4
 8007bd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff fd52 	bl	8007680 <__hi0bits>
 8007bdc:	f1c0 0320 	rsb	r3, r0, #32
 8007be0:	280a      	cmp	r0, #10
 8007be2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007c60 <__b2d+0x9c>
 8007be6:	600b      	str	r3, [r1, #0]
 8007be8:	dc14      	bgt.n	8007c14 <__b2d+0x50>
 8007bea:	f1c0 0e0b 	rsb	lr, r0, #11
 8007bee:	fa24 f10e 	lsr.w	r1, r4, lr
 8007bf2:	42b7      	cmp	r7, r6
 8007bf4:	ea41 030c 	orr.w	r3, r1, ip
 8007bf8:	bf34      	ite	cc
 8007bfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bfe:	2100      	movcs	r1, #0
 8007c00:	3015      	adds	r0, #21
 8007c02:	fa04 f000 	lsl.w	r0, r4, r0
 8007c06:	fa21 f10e 	lsr.w	r1, r1, lr
 8007c0a:	ea40 0201 	orr.w	r2, r0, r1
 8007c0e:	ec43 2b10 	vmov	d0, r2, r3
 8007c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c14:	42b7      	cmp	r7, r6
 8007c16:	bf3a      	itte	cc
 8007c18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007c20:	2100      	movcs	r1, #0
 8007c22:	380b      	subs	r0, #11
 8007c24:	d017      	beq.n	8007c56 <__b2d+0x92>
 8007c26:	f1c0 0c20 	rsb	ip, r0, #32
 8007c2a:	fa04 f500 	lsl.w	r5, r4, r0
 8007c2e:	42be      	cmp	r6, r7
 8007c30:	fa21 f40c 	lsr.w	r4, r1, ip
 8007c34:	ea45 0504 	orr.w	r5, r5, r4
 8007c38:	bf8c      	ite	hi
 8007c3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007c3e:	2400      	movls	r4, #0
 8007c40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007c44:	fa01 f000 	lsl.w	r0, r1, r0
 8007c48:	fa24 f40c 	lsr.w	r4, r4, ip
 8007c4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c50:	ea40 0204 	orr.w	r2, r0, r4
 8007c54:	e7db      	b.n	8007c0e <__b2d+0x4a>
 8007c56:	ea44 030c 	orr.w	r3, r4, ip
 8007c5a:	460a      	mov	r2, r1
 8007c5c:	e7d7      	b.n	8007c0e <__b2d+0x4a>
 8007c5e:	bf00      	nop
 8007c60:	3ff00000 	.word	0x3ff00000

08007c64 <__d2b>:
 8007c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c68:	4689      	mov	r9, r1
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	ec57 6b10 	vmov	r6, r7, d0
 8007c70:	4690      	mov	r8, r2
 8007c72:	f7ff fc0f 	bl	8007494 <_Balloc>
 8007c76:	4604      	mov	r4, r0
 8007c78:	b930      	cbnz	r0, 8007c88 <__d2b+0x24>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <__d2b+0xb0>)
 8007c7e:	4826      	ldr	r0, [pc, #152]	; (8007d18 <__d2b+0xb4>)
 8007c80:	f240 310a 	movw	r1, #778	; 0x30a
 8007c84:	f7fe f8ca 	bl	8005e1c <__assert_func>
 8007c88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c90:	bb35      	cbnz	r5, 8007ce0 <__d2b+0x7c>
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	d028      	beq.n	8007cea <__d2b+0x86>
 8007c98:	4668      	mov	r0, sp
 8007c9a:	9600      	str	r6, [sp, #0]
 8007c9c:	f7ff fd10 	bl	80076c0 <__lo0bits>
 8007ca0:	9900      	ldr	r1, [sp, #0]
 8007ca2:	b300      	cbz	r0, 8007ce6 <__d2b+0x82>
 8007ca4:	9a01      	ldr	r2, [sp, #4]
 8007ca6:	f1c0 0320 	rsb	r3, r0, #32
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	40c2      	lsrs	r2, r0
 8007cb2:	6163      	str	r3, [r4, #20]
 8007cb4:	9201      	str	r2, [sp, #4]
 8007cb6:	9b01      	ldr	r3, [sp, #4]
 8007cb8:	61a3      	str	r3, [r4, #24]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2202      	movne	r2, #2
 8007cc0:	2201      	moveq	r2, #1
 8007cc2:	6122      	str	r2, [r4, #16]
 8007cc4:	b1d5      	cbz	r5, 8007cfc <__d2b+0x98>
 8007cc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cca:	4405      	add	r5, r0
 8007ccc:	f8c9 5000 	str.w	r5, [r9]
 8007cd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cd4:	f8c8 0000 	str.w	r0, [r8]
 8007cd8:	4620      	mov	r0, r4
 8007cda:	b003      	add	sp, #12
 8007cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ce4:	e7d5      	b.n	8007c92 <__d2b+0x2e>
 8007ce6:	6161      	str	r1, [r4, #20]
 8007ce8:	e7e5      	b.n	8007cb6 <__d2b+0x52>
 8007cea:	a801      	add	r0, sp, #4
 8007cec:	f7ff fce8 	bl	80076c0 <__lo0bits>
 8007cf0:	9b01      	ldr	r3, [sp, #4]
 8007cf2:	6163      	str	r3, [r4, #20]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	6122      	str	r2, [r4, #16]
 8007cf8:	3020      	adds	r0, #32
 8007cfa:	e7e3      	b.n	8007cc4 <__d2b+0x60>
 8007cfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d04:	f8c9 0000 	str.w	r0, [r9]
 8007d08:	6918      	ldr	r0, [r3, #16]
 8007d0a:	f7ff fcb9 	bl	8007680 <__hi0bits>
 8007d0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d12:	e7df      	b.n	8007cd4 <__d2b+0x70>
 8007d14:	08009f89 	.word	0x08009f89
 8007d18:	0800a07c 	.word	0x0800a07c

08007d1c <__ratio>:
 8007d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	4688      	mov	r8, r1
 8007d22:	4669      	mov	r1, sp
 8007d24:	4681      	mov	r9, r0
 8007d26:	f7ff ff4d 	bl	8007bc4 <__b2d>
 8007d2a:	a901      	add	r1, sp, #4
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	ec55 4b10 	vmov	r4, r5, d0
 8007d32:	f7ff ff47 	bl	8007bc4 <__b2d>
 8007d36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d3e:	eba3 0c02 	sub.w	ip, r3, r2
 8007d42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d4c:	ec51 0b10 	vmov	r0, r1, d0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfd6      	itet	le
 8007d54:	460a      	movle	r2, r1
 8007d56:	462a      	movgt	r2, r5
 8007d58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d5c:	468b      	mov	fp, r1
 8007d5e:	462f      	mov	r7, r5
 8007d60:	bfd4      	ite	le
 8007d62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	ee10 2a10 	vmov	r2, s0
 8007d70:	465b      	mov	r3, fp
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fd6a 	bl	800084c <__aeabi_ddiv>
 8007d78:	ec41 0b10 	vmov	d0, r0, r1
 8007d7c:	b003      	add	sp, #12
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d82 <__copybits>:
 8007d82:	3901      	subs	r1, #1
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	1149      	asrs	r1, r1, #5
 8007d88:	6914      	ldr	r4, [r2, #16]
 8007d8a:	3101      	adds	r1, #1
 8007d8c:	f102 0314 	add.w	r3, r2, #20
 8007d90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d98:	1f05      	subs	r5, r0, #4
 8007d9a:	42a3      	cmp	r3, r4
 8007d9c:	d30c      	bcc.n	8007db8 <__copybits+0x36>
 8007d9e:	1aa3      	subs	r3, r4, r2
 8007da0:	3b11      	subs	r3, #17
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	3211      	adds	r2, #17
 8007da8:	42a2      	cmp	r2, r4
 8007daa:	bf88      	it	hi
 8007dac:	2300      	movhi	r3, #0
 8007dae:	4418      	add	r0, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	4288      	cmp	r0, r1
 8007db4:	d305      	bcc.n	8007dc2 <__copybits+0x40>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f853 6b04 	ldr.w	r6, [r3], #4
 8007dbc:	f845 6f04 	str.w	r6, [r5, #4]!
 8007dc0:	e7eb      	b.n	8007d9a <__copybits+0x18>
 8007dc2:	f840 3b04 	str.w	r3, [r0], #4
 8007dc6:	e7f4      	b.n	8007db2 <__copybits+0x30>

08007dc8 <__any_on>:
 8007dc8:	f100 0214 	add.w	r2, r0, #20
 8007dcc:	6900      	ldr	r0, [r0, #16]
 8007dce:	114b      	asrs	r3, r1, #5
 8007dd0:	4298      	cmp	r0, r3
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	db11      	blt.n	8007dfa <__any_on+0x32>
 8007dd6:	dd0a      	ble.n	8007dee <__any_on+0x26>
 8007dd8:	f011 011f 	ands.w	r1, r1, #31
 8007ddc:	d007      	beq.n	8007dee <__any_on+0x26>
 8007dde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007de2:	fa24 f001 	lsr.w	r0, r4, r1
 8007de6:	fa00 f101 	lsl.w	r1, r0, r1
 8007dea:	428c      	cmp	r4, r1
 8007dec:	d10b      	bne.n	8007e06 <__any_on+0x3e>
 8007dee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d803      	bhi.n	8007dfe <__any_on+0x36>
 8007df6:	2000      	movs	r0, #0
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	e7f7      	b.n	8007dee <__any_on+0x26>
 8007dfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e02:	2900      	cmp	r1, #0
 8007e04:	d0f5      	beq.n	8007df2 <__any_on+0x2a>
 8007e06:	2001      	movs	r0, #1
 8007e08:	e7f6      	b.n	8007df8 <__any_on+0x30>

08007e0a <_calloc_r>:
 8007e0a:	b513      	push	{r0, r1, r4, lr}
 8007e0c:	434a      	muls	r2, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	9201      	str	r2, [sp, #4]
 8007e12:	f000 f859 	bl	8007ec8 <_malloc_r>
 8007e16:	4604      	mov	r4, r0
 8007e18:	b118      	cbz	r0, 8007e22 <_calloc_r+0x18>
 8007e1a:	9a01      	ldr	r2, [sp, #4]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	f7fc fa49 	bl	80042b4 <memset>
 8007e22:	4620      	mov	r0, r4
 8007e24:	b002      	add	sp, #8
 8007e26:	bd10      	pop	{r4, pc}

08007e28 <_free_r>:
 8007e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d048      	beq.n	8007ec0 <_free_r+0x98>
 8007e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f1a1 0404 	sub.w	r4, r1, #4
 8007e3a:	bfb8      	it	lt
 8007e3c:	18e4      	addlt	r4, r4, r3
 8007e3e:	f000 fe0b 	bl	8008a58 <__malloc_lock>
 8007e42:	4a20      	ldr	r2, [pc, #128]	; (8007ec4 <_free_r+0x9c>)
 8007e44:	9801      	ldr	r0, [sp, #4]
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	4615      	mov	r5, r2
 8007e4a:	b933      	cbnz	r3, 8007e5a <_free_r+0x32>
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	6014      	str	r4, [r2, #0]
 8007e50:	b003      	add	sp, #12
 8007e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e56:	f000 be05 	b.w	8008a64 <__malloc_unlock>
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	d90b      	bls.n	8007e76 <_free_r+0x4e>
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	1862      	adds	r2, r4, r1
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bf04      	itt	eq
 8007e66:	681a      	ldreq	r2, [r3, #0]
 8007e68:	685b      	ldreq	r3, [r3, #4]
 8007e6a:	6063      	str	r3, [r4, #4]
 8007e6c:	bf04      	itt	eq
 8007e6e:	1852      	addeq	r2, r2, r1
 8007e70:	6022      	streq	r2, [r4, #0]
 8007e72:	602c      	str	r4, [r5, #0]
 8007e74:	e7ec      	b.n	8007e50 <_free_r+0x28>
 8007e76:	461a      	mov	r2, r3
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	b10b      	cbz	r3, 8007e80 <_free_r+0x58>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d9fa      	bls.n	8007e76 <_free_r+0x4e>
 8007e80:	6811      	ldr	r1, [r2, #0]
 8007e82:	1855      	adds	r5, r2, r1
 8007e84:	42a5      	cmp	r5, r4
 8007e86:	d10b      	bne.n	8007ea0 <_free_r+0x78>
 8007e88:	6824      	ldr	r4, [r4, #0]
 8007e8a:	4421      	add	r1, r4
 8007e8c:	1854      	adds	r4, r2, r1
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	6011      	str	r1, [r2, #0]
 8007e92:	d1dd      	bne.n	8007e50 <_free_r+0x28>
 8007e94:	681c      	ldr	r4, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	6053      	str	r3, [r2, #4]
 8007e9a:	4421      	add	r1, r4
 8007e9c:	6011      	str	r1, [r2, #0]
 8007e9e:	e7d7      	b.n	8007e50 <_free_r+0x28>
 8007ea0:	d902      	bls.n	8007ea8 <_free_r+0x80>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	e7d3      	b.n	8007e50 <_free_r+0x28>
 8007ea8:	6825      	ldr	r5, [r4, #0]
 8007eaa:	1961      	adds	r1, r4, r5
 8007eac:	428b      	cmp	r3, r1
 8007eae:	bf04      	itt	eq
 8007eb0:	6819      	ldreq	r1, [r3, #0]
 8007eb2:	685b      	ldreq	r3, [r3, #4]
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	bf04      	itt	eq
 8007eb8:	1949      	addeq	r1, r1, r5
 8007eba:	6021      	streq	r1, [r4, #0]
 8007ebc:	6054      	str	r4, [r2, #4]
 8007ebe:	e7c7      	b.n	8007e50 <_free_r+0x28>
 8007ec0:	b003      	add	sp, #12
 8007ec2:	bd30      	pop	{r4, r5, pc}
 8007ec4:	200002f8 	.word	0x200002f8

08007ec8 <_malloc_r>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	1ccd      	adds	r5, r1, #3
 8007ecc:	f025 0503 	bic.w	r5, r5, #3
 8007ed0:	3508      	adds	r5, #8
 8007ed2:	2d0c      	cmp	r5, #12
 8007ed4:	bf38      	it	cc
 8007ed6:	250c      	movcc	r5, #12
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	4606      	mov	r6, r0
 8007edc:	db01      	blt.n	8007ee2 <_malloc_r+0x1a>
 8007ede:	42a9      	cmp	r1, r5
 8007ee0:	d903      	bls.n	8007eea <_malloc_r+0x22>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eea:	f000 fdb5 	bl	8008a58 <__malloc_lock>
 8007eee:	4921      	ldr	r1, [pc, #132]	; (8007f74 <_malloc_r+0xac>)
 8007ef0:	680a      	ldr	r2, [r1, #0]
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	b99c      	cbnz	r4, 8007f1e <_malloc_r+0x56>
 8007ef6:	4f20      	ldr	r7, [pc, #128]	; (8007f78 <_malloc_r+0xb0>)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	b923      	cbnz	r3, 8007f06 <_malloc_r+0x3e>
 8007efc:	4621      	mov	r1, r4
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 fafa 	bl	80084f8 <_sbrk_r>
 8007f04:	6038      	str	r0, [r7, #0]
 8007f06:	4629      	mov	r1, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 faf5 	bl	80084f8 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d123      	bne.n	8007f5a <_malloc_r+0x92>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 fda4 	bl	8008a64 <__malloc_unlock>
 8007f1c:	e7e3      	b.n	8007ee6 <_malloc_r+0x1e>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	1b5b      	subs	r3, r3, r5
 8007f22:	d417      	bmi.n	8007f54 <_malloc_r+0x8c>
 8007f24:	2b0b      	cmp	r3, #11
 8007f26:	d903      	bls.n	8007f30 <_malloc_r+0x68>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	441c      	add	r4, r3
 8007f2c:	6025      	str	r5, [r4, #0]
 8007f2e:	e004      	b.n	8007f3a <_malloc_r+0x72>
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	42a2      	cmp	r2, r4
 8007f34:	bf0c      	ite	eq
 8007f36:	600b      	streq	r3, [r1, #0]
 8007f38:	6053      	strne	r3, [r2, #4]
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f000 fd92 	bl	8008a64 <__malloc_unlock>
 8007f40:	f104 000b 	add.w	r0, r4, #11
 8007f44:	1d23      	adds	r3, r4, #4
 8007f46:	f020 0007 	bic.w	r0, r0, #7
 8007f4a:	1ac2      	subs	r2, r0, r3
 8007f4c:	d0cc      	beq.n	8007ee8 <_malloc_r+0x20>
 8007f4e:	1a1b      	subs	r3, r3, r0
 8007f50:	50a3      	str	r3, [r4, r2]
 8007f52:	e7c9      	b.n	8007ee8 <_malloc_r+0x20>
 8007f54:	4622      	mov	r2, r4
 8007f56:	6864      	ldr	r4, [r4, #4]
 8007f58:	e7cc      	b.n	8007ef4 <_malloc_r+0x2c>
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d0e3      	beq.n	8007f2c <_malloc_r+0x64>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 fac6 	bl	80084f8 <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d1dd      	bne.n	8007f2c <_malloc_r+0x64>
 8007f70:	e7cf      	b.n	8007f12 <_malloc_r+0x4a>
 8007f72:	bf00      	nop
 8007f74:	200002f8 	.word	0x200002f8
 8007f78:	200002fc 	.word	0x200002fc

08007f7c <__ssputs_r>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	688e      	ldr	r6, [r1, #8]
 8007f82:	429e      	cmp	r6, r3
 8007f84:	4682      	mov	sl, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	4690      	mov	r8, r2
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	d838      	bhi.n	8008000 <__ssputs_r+0x84>
 8007f8e:	898a      	ldrh	r2, [r1, #12]
 8007f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f94:	d032      	beq.n	8007ffc <__ssputs_r+0x80>
 8007f96:	6825      	ldr	r5, [r4, #0]
 8007f98:	6909      	ldr	r1, [r1, #16]
 8007f9a:	eba5 0901 	sub.w	r9, r5, r1
 8007f9e:	6965      	ldr	r5, [r4, #20]
 8007fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fa8:	3301      	adds	r3, #1
 8007faa:	444b      	add	r3, r9
 8007fac:	106d      	asrs	r5, r5, #1
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	bf38      	it	cc
 8007fb2:	461d      	movcc	r5, r3
 8007fb4:	0553      	lsls	r3, r2, #21
 8007fb6:	d531      	bpl.n	800801c <__ssputs_r+0xa0>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	f7ff ff85 	bl	8007ec8 <_malloc_r>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	b950      	cbnz	r0, 8007fd8 <__ssputs_r+0x5c>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	f8ca 3000 	str.w	r3, [sl]
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd8:	6921      	ldr	r1, [r4, #16]
 8007fda:	464a      	mov	r2, r9
 8007fdc:	f7ff fa4c 	bl	8007478 <memcpy>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	6126      	str	r6, [r4, #16]
 8007fee:	6165      	str	r5, [r4, #20]
 8007ff0:	444e      	add	r6, r9
 8007ff2:	eba5 0509 	sub.w	r5, r5, r9
 8007ff6:	6026      	str	r6, [r4, #0]
 8007ff8:	60a5      	str	r5, [r4, #8]
 8007ffa:	463e      	mov	r6, r7
 8007ffc:	42be      	cmp	r6, r7
 8007ffe:	d900      	bls.n	8008002 <__ssputs_r+0x86>
 8008000:	463e      	mov	r6, r7
 8008002:	4632      	mov	r2, r6
 8008004:	6820      	ldr	r0, [r4, #0]
 8008006:	4641      	mov	r1, r8
 8008008:	f000 fd0c 	bl	8008a24 <memmove>
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	1b9b      	subs	r3, r3, r6
 8008012:	4432      	add	r2, r6
 8008014:	60a3      	str	r3, [r4, #8]
 8008016:	6022      	str	r2, [r4, #0]
 8008018:	2000      	movs	r0, #0
 800801a:	e7db      	b.n	8007fd4 <__ssputs_r+0x58>
 800801c:	462a      	mov	r2, r5
 800801e:	f000 fd27 	bl	8008a70 <_realloc_r>
 8008022:	4606      	mov	r6, r0
 8008024:	2800      	cmp	r0, #0
 8008026:	d1e1      	bne.n	8007fec <__ssputs_r+0x70>
 8008028:	6921      	ldr	r1, [r4, #16]
 800802a:	4650      	mov	r0, sl
 800802c:	f7ff fefc 	bl	8007e28 <_free_r>
 8008030:	e7c7      	b.n	8007fc2 <__ssputs_r+0x46>
	...

08008034 <_svfiprintf_r>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	4698      	mov	r8, r3
 800803a:	898b      	ldrh	r3, [r1, #12]
 800803c:	061b      	lsls	r3, r3, #24
 800803e:	b09d      	sub	sp, #116	; 0x74
 8008040:	4607      	mov	r7, r0
 8008042:	460d      	mov	r5, r1
 8008044:	4614      	mov	r4, r2
 8008046:	d50e      	bpl.n	8008066 <_svfiprintf_r+0x32>
 8008048:	690b      	ldr	r3, [r1, #16]
 800804a:	b963      	cbnz	r3, 8008066 <_svfiprintf_r+0x32>
 800804c:	2140      	movs	r1, #64	; 0x40
 800804e:	f7ff ff3b 	bl	8007ec8 <_malloc_r>
 8008052:	6028      	str	r0, [r5, #0]
 8008054:	6128      	str	r0, [r5, #16]
 8008056:	b920      	cbnz	r0, 8008062 <_svfiprintf_r+0x2e>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	e0d1      	b.n	8008206 <_svfiprintf_r+0x1d2>
 8008062:	2340      	movs	r3, #64	; 0x40
 8008064:	616b      	str	r3, [r5, #20]
 8008066:	2300      	movs	r3, #0
 8008068:	9309      	str	r3, [sp, #36]	; 0x24
 800806a:	2320      	movs	r3, #32
 800806c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008070:	f8cd 800c 	str.w	r8, [sp, #12]
 8008074:	2330      	movs	r3, #48	; 0x30
 8008076:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008220 <_svfiprintf_r+0x1ec>
 800807a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800807e:	f04f 0901 	mov.w	r9, #1
 8008082:	4623      	mov	r3, r4
 8008084:	469a      	mov	sl, r3
 8008086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800808a:	b10a      	cbz	r2, 8008090 <_svfiprintf_r+0x5c>
 800808c:	2a25      	cmp	r2, #37	; 0x25
 800808e:	d1f9      	bne.n	8008084 <_svfiprintf_r+0x50>
 8008090:	ebba 0b04 	subs.w	fp, sl, r4
 8008094:	d00b      	beq.n	80080ae <_svfiprintf_r+0x7a>
 8008096:	465b      	mov	r3, fp
 8008098:	4622      	mov	r2, r4
 800809a:	4629      	mov	r1, r5
 800809c:	4638      	mov	r0, r7
 800809e:	f7ff ff6d 	bl	8007f7c <__ssputs_r>
 80080a2:	3001      	adds	r0, #1
 80080a4:	f000 80aa 	beq.w	80081fc <_svfiprintf_r+0x1c8>
 80080a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080aa:	445a      	add	r2, fp
 80080ac:	9209      	str	r2, [sp, #36]	; 0x24
 80080ae:	f89a 3000 	ldrb.w	r3, [sl]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80a2 	beq.w	80081fc <_svfiprintf_r+0x1c8>
 80080b8:	2300      	movs	r3, #0
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c2:	f10a 0a01 	add.w	sl, sl, #1
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ce:	931a      	str	r3, [sp, #104]	; 0x68
 80080d0:	4654      	mov	r4, sl
 80080d2:	2205      	movs	r2, #5
 80080d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d8:	4851      	ldr	r0, [pc, #324]	; (8008220 <_svfiprintf_r+0x1ec>)
 80080da:	f7f8 f881 	bl	80001e0 <memchr>
 80080de:	9a04      	ldr	r2, [sp, #16]
 80080e0:	b9d8      	cbnz	r0, 800811a <_svfiprintf_r+0xe6>
 80080e2:	06d0      	lsls	r0, r2, #27
 80080e4:	bf44      	itt	mi
 80080e6:	2320      	movmi	r3, #32
 80080e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ec:	0711      	lsls	r1, r2, #28
 80080ee:	bf44      	itt	mi
 80080f0:	232b      	movmi	r3, #43	; 0x2b
 80080f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080f6:	f89a 3000 	ldrb.w	r3, [sl]
 80080fa:	2b2a      	cmp	r3, #42	; 0x2a
 80080fc:	d015      	beq.n	800812a <_svfiprintf_r+0xf6>
 80080fe:	9a07      	ldr	r2, [sp, #28]
 8008100:	4654      	mov	r4, sl
 8008102:	2000      	movs	r0, #0
 8008104:	f04f 0c0a 	mov.w	ip, #10
 8008108:	4621      	mov	r1, r4
 800810a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800810e:	3b30      	subs	r3, #48	; 0x30
 8008110:	2b09      	cmp	r3, #9
 8008112:	d94e      	bls.n	80081b2 <_svfiprintf_r+0x17e>
 8008114:	b1b0      	cbz	r0, 8008144 <_svfiprintf_r+0x110>
 8008116:	9207      	str	r2, [sp, #28]
 8008118:	e014      	b.n	8008144 <_svfiprintf_r+0x110>
 800811a:	eba0 0308 	sub.w	r3, r0, r8
 800811e:	fa09 f303 	lsl.w	r3, r9, r3
 8008122:	4313      	orrs	r3, r2
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	46a2      	mov	sl, r4
 8008128:	e7d2      	b.n	80080d0 <_svfiprintf_r+0x9c>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	1d19      	adds	r1, r3, #4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	9103      	str	r1, [sp, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	bfbb      	ittet	lt
 8008136:	425b      	neglt	r3, r3
 8008138:	f042 0202 	orrlt.w	r2, r2, #2
 800813c:	9307      	strge	r3, [sp, #28]
 800813e:	9307      	strlt	r3, [sp, #28]
 8008140:	bfb8      	it	lt
 8008142:	9204      	strlt	r2, [sp, #16]
 8008144:	7823      	ldrb	r3, [r4, #0]
 8008146:	2b2e      	cmp	r3, #46	; 0x2e
 8008148:	d10c      	bne.n	8008164 <_svfiprintf_r+0x130>
 800814a:	7863      	ldrb	r3, [r4, #1]
 800814c:	2b2a      	cmp	r3, #42	; 0x2a
 800814e:	d135      	bne.n	80081bc <_svfiprintf_r+0x188>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	1d1a      	adds	r2, r3, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	9203      	str	r2, [sp, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfb8      	it	lt
 800815c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008160:	3402      	adds	r4, #2
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008230 <_svfiprintf_r+0x1fc>
 8008168:	7821      	ldrb	r1, [r4, #0]
 800816a:	2203      	movs	r2, #3
 800816c:	4650      	mov	r0, sl
 800816e:	f7f8 f837 	bl	80001e0 <memchr>
 8008172:	b140      	cbz	r0, 8008186 <_svfiprintf_r+0x152>
 8008174:	2340      	movs	r3, #64	; 0x40
 8008176:	eba0 000a 	sub.w	r0, r0, sl
 800817a:	fa03 f000 	lsl.w	r0, r3, r0
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	4303      	orrs	r3, r0
 8008182:	3401      	adds	r4, #1
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818a:	4826      	ldr	r0, [pc, #152]	; (8008224 <_svfiprintf_r+0x1f0>)
 800818c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008190:	2206      	movs	r2, #6
 8008192:	f7f8 f825 	bl	80001e0 <memchr>
 8008196:	2800      	cmp	r0, #0
 8008198:	d038      	beq.n	800820c <_svfiprintf_r+0x1d8>
 800819a:	4b23      	ldr	r3, [pc, #140]	; (8008228 <_svfiprintf_r+0x1f4>)
 800819c:	bb1b      	cbnz	r3, 80081e6 <_svfiprintf_r+0x1b2>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	3307      	adds	r3, #7
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	3308      	adds	r3, #8
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ac:	4433      	add	r3, r6
 80081ae:	9309      	str	r3, [sp, #36]	; 0x24
 80081b0:	e767      	b.n	8008082 <_svfiprintf_r+0x4e>
 80081b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b6:	460c      	mov	r4, r1
 80081b8:	2001      	movs	r0, #1
 80081ba:	e7a5      	b.n	8008108 <_svfiprintf_r+0xd4>
 80081bc:	2300      	movs	r3, #0
 80081be:	3401      	adds	r4, #1
 80081c0:	9305      	str	r3, [sp, #20]
 80081c2:	4619      	mov	r1, r3
 80081c4:	f04f 0c0a 	mov.w	ip, #10
 80081c8:	4620      	mov	r0, r4
 80081ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ce:	3a30      	subs	r2, #48	; 0x30
 80081d0:	2a09      	cmp	r2, #9
 80081d2:	d903      	bls.n	80081dc <_svfiprintf_r+0x1a8>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0c5      	beq.n	8008164 <_svfiprintf_r+0x130>
 80081d8:	9105      	str	r1, [sp, #20]
 80081da:	e7c3      	b.n	8008164 <_svfiprintf_r+0x130>
 80081dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e0:	4604      	mov	r4, r0
 80081e2:	2301      	movs	r3, #1
 80081e4:	e7f0      	b.n	80081c8 <_svfiprintf_r+0x194>
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	462a      	mov	r2, r5
 80081ec:	4b0f      	ldr	r3, [pc, #60]	; (800822c <_svfiprintf_r+0x1f8>)
 80081ee:	a904      	add	r1, sp, #16
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7fc f907 	bl	8004404 <_printf_float>
 80081f6:	1c42      	adds	r2, r0, #1
 80081f8:	4606      	mov	r6, r0
 80081fa:	d1d6      	bne.n	80081aa <_svfiprintf_r+0x176>
 80081fc:	89ab      	ldrh	r3, [r5, #12]
 80081fe:	065b      	lsls	r3, r3, #25
 8008200:	f53f af2c 	bmi.w	800805c <_svfiprintf_r+0x28>
 8008204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008206:	b01d      	add	sp, #116	; 0x74
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	ab03      	add	r3, sp, #12
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	462a      	mov	r2, r5
 8008212:	4b06      	ldr	r3, [pc, #24]	; (800822c <_svfiprintf_r+0x1f8>)
 8008214:	a904      	add	r1, sp, #16
 8008216:	4638      	mov	r0, r7
 8008218:	f7fc fb98 	bl	800494c <_printf_i>
 800821c:	e7eb      	b.n	80081f6 <_svfiprintf_r+0x1c2>
 800821e:	bf00      	nop
 8008220:	0800a1dc 	.word	0x0800a1dc
 8008224:	0800a1e6 	.word	0x0800a1e6
 8008228:	08004405 	.word	0x08004405
 800822c:	08007f7d 	.word	0x08007f7d
 8008230:	0800a1e2 	.word	0x0800a1e2

08008234 <__sfputc_r>:
 8008234:	6893      	ldr	r3, [r2, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	b410      	push	{r4}
 800823c:	6093      	str	r3, [r2, #8]
 800823e:	da08      	bge.n	8008252 <__sfputc_r+0x1e>
 8008240:	6994      	ldr	r4, [r2, #24]
 8008242:	42a3      	cmp	r3, r4
 8008244:	db01      	blt.n	800824a <__sfputc_r+0x16>
 8008246:	290a      	cmp	r1, #10
 8008248:	d103      	bne.n	8008252 <__sfputc_r+0x1e>
 800824a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800824e:	f000 b9b9 	b.w	80085c4 <__swbuf_r>
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	1c58      	adds	r0, r3, #1
 8008256:	6010      	str	r0, [r2, #0]
 8008258:	7019      	strb	r1, [r3, #0]
 800825a:	4608      	mov	r0, r1
 800825c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008260:	4770      	bx	lr

08008262 <__sfputs_r>:
 8008262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	4614      	mov	r4, r2
 800826a:	18d5      	adds	r5, r2, r3
 800826c:	42ac      	cmp	r4, r5
 800826e:	d101      	bne.n	8008274 <__sfputs_r+0x12>
 8008270:	2000      	movs	r0, #0
 8008272:	e007      	b.n	8008284 <__sfputs_r+0x22>
 8008274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008278:	463a      	mov	r2, r7
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff ffda 	bl	8008234 <__sfputc_r>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d1f3      	bne.n	800826c <__sfputs_r+0xa>
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008288 <_vfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	460d      	mov	r5, r1
 800828e:	b09d      	sub	sp, #116	; 0x74
 8008290:	4614      	mov	r4, r2
 8008292:	4698      	mov	r8, r3
 8008294:	4606      	mov	r6, r0
 8008296:	b118      	cbz	r0, 80082a0 <_vfiprintf_r+0x18>
 8008298:	6983      	ldr	r3, [r0, #24]
 800829a:	b90b      	cbnz	r3, 80082a0 <_vfiprintf_r+0x18>
 800829c:	f7fe fcac 	bl	8006bf8 <__sinit>
 80082a0:	4b89      	ldr	r3, [pc, #548]	; (80084c8 <_vfiprintf_r+0x240>)
 80082a2:	429d      	cmp	r5, r3
 80082a4:	d11b      	bne.n	80082de <_vfiprintf_r+0x56>
 80082a6:	6875      	ldr	r5, [r6, #4]
 80082a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_vfiprintf_r+0x32>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_vfiprintf_r+0x32>
 80082b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b6:	f7ff f8c2 	bl	800743e <__retarget_lock_acquire_recursive>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	071b      	lsls	r3, r3, #28
 80082be:	d501      	bpl.n	80082c4 <_vfiprintf_r+0x3c>
 80082c0:	692b      	ldr	r3, [r5, #16]
 80082c2:	b9eb      	cbnz	r3, 8008300 <_vfiprintf_r+0x78>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f000 f9ee 	bl	80086a8 <__swsetup_r>
 80082cc:	b1c0      	cbz	r0, 8008300 <_vfiprintf_r+0x78>
 80082ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d0:	07dc      	lsls	r4, r3, #31
 80082d2:	d50e      	bpl.n	80082f2 <_vfiprintf_r+0x6a>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b01d      	add	sp, #116	; 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <_vfiprintf_r+0x244>)
 80082e0:	429d      	cmp	r5, r3
 80082e2:	d101      	bne.n	80082e8 <_vfiprintf_r+0x60>
 80082e4:	68b5      	ldr	r5, [r6, #8]
 80082e6:	e7df      	b.n	80082a8 <_vfiprintf_r+0x20>
 80082e8:	4b79      	ldr	r3, [pc, #484]	; (80084d0 <_vfiprintf_r+0x248>)
 80082ea:	429d      	cmp	r5, r3
 80082ec:	bf08      	it	eq
 80082ee:	68f5      	ldreq	r5, [r6, #12]
 80082f0:	e7da      	b.n	80082a8 <_vfiprintf_r+0x20>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	0598      	lsls	r0, r3, #22
 80082f6:	d4ed      	bmi.n	80082d4 <_vfiprintf_r+0x4c>
 80082f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082fa:	f7ff f8a1 	bl	8007440 <__retarget_lock_release_recursive>
 80082fe:	e7e9      	b.n	80082d4 <_vfiprintf_r+0x4c>
 8008300:	2300      	movs	r3, #0
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	2320      	movs	r3, #32
 8008306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830a:	f8cd 800c 	str.w	r8, [sp, #12]
 800830e:	2330      	movs	r3, #48	; 0x30
 8008310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084d4 <_vfiprintf_r+0x24c>
 8008314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008318:	f04f 0901 	mov.w	r9, #1
 800831c:	4623      	mov	r3, r4
 800831e:	469a      	mov	sl, r3
 8008320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008324:	b10a      	cbz	r2, 800832a <_vfiprintf_r+0xa2>
 8008326:	2a25      	cmp	r2, #37	; 0x25
 8008328:	d1f9      	bne.n	800831e <_vfiprintf_r+0x96>
 800832a:	ebba 0b04 	subs.w	fp, sl, r4
 800832e:	d00b      	beq.n	8008348 <_vfiprintf_r+0xc0>
 8008330:	465b      	mov	r3, fp
 8008332:	4622      	mov	r2, r4
 8008334:	4629      	mov	r1, r5
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff ff93 	bl	8008262 <__sfputs_r>
 800833c:	3001      	adds	r0, #1
 800833e:	f000 80aa 	beq.w	8008496 <_vfiprintf_r+0x20e>
 8008342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008344:	445a      	add	r2, fp
 8008346:	9209      	str	r2, [sp, #36]	; 0x24
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 80a2 	beq.w	8008496 <_vfiprintf_r+0x20e>
 8008352:	2300      	movs	r3, #0
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835c:	f10a 0a01 	add.w	sl, sl, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	9307      	str	r3, [sp, #28]
 8008364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008368:	931a      	str	r3, [sp, #104]	; 0x68
 800836a:	4654      	mov	r4, sl
 800836c:	2205      	movs	r2, #5
 800836e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008372:	4858      	ldr	r0, [pc, #352]	; (80084d4 <_vfiprintf_r+0x24c>)
 8008374:	f7f7 ff34 	bl	80001e0 <memchr>
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	b9d8      	cbnz	r0, 80083b4 <_vfiprintf_r+0x12c>
 800837c:	06d1      	lsls	r1, r2, #27
 800837e:	bf44      	itt	mi
 8008380:	2320      	movmi	r3, #32
 8008382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008386:	0713      	lsls	r3, r2, #28
 8008388:	bf44      	itt	mi
 800838a:	232b      	movmi	r3, #43	; 0x2b
 800838c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008390:	f89a 3000 	ldrb.w	r3, [sl]
 8008394:	2b2a      	cmp	r3, #42	; 0x2a
 8008396:	d015      	beq.n	80083c4 <_vfiprintf_r+0x13c>
 8008398:	9a07      	ldr	r2, [sp, #28]
 800839a:	4654      	mov	r4, sl
 800839c:	2000      	movs	r0, #0
 800839e:	f04f 0c0a 	mov.w	ip, #10
 80083a2:	4621      	mov	r1, r4
 80083a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a8:	3b30      	subs	r3, #48	; 0x30
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d94e      	bls.n	800844c <_vfiprintf_r+0x1c4>
 80083ae:	b1b0      	cbz	r0, 80083de <_vfiprintf_r+0x156>
 80083b0:	9207      	str	r2, [sp, #28]
 80083b2:	e014      	b.n	80083de <_vfiprintf_r+0x156>
 80083b4:	eba0 0308 	sub.w	r3, r0, r8
 80083b8:	fa09 f303 	lsl.w	r3, r9, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	9304      	str	r3, [sp, #16]
 80083c0:	46a2      	mov	sl, r4
 80083c2:	e7d2      	b.n	800836a <_vfiprintf_r+0xe2>
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	1d19      	adds	r1, r3, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	9103      	str	r1, [sp, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfbb      	ittet	lt
 80083d0:	425b      	neglt	r3, r3
 80083d2:	f042 0202 	orrlt.w	r2, r2, #2
 80083d6:	9307      	strge	r3, [sp, #28]
 80083d8:	9307      	strlt	r3, [sp, #28]
 80083da:	bfb8      	it	lt
 80083dc:	9204      	strlt	r2, [sp, #16]
 80083de:	7823      	ldrb	r3, [r4, #0]
 80083e0:	2b2e      	cmp	r3, #46	; 0x2e
 80083e2:	d10c      	bne.n	80083fe <_vfiprintf_r+0x176>
 80083e4:	7863      	ldrb	r3, [r4, #1]
 80083e6:	2b2a      	cmp	r3, #42	; 0x2a
 80083e8:	d135      	bne.n	8008456 <_vfiprintf_r+0x1ce>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	1d1a      	adds	r2, r3, #4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	9203      	str	r2, [sp, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfb8      	it	lt
 80083f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80083fa:	3402      	adds	r4, #2
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084e4 <_vfiprintf_r+0x25c>
 8008402:	7821      	ldrb	r1, [r4, #0]
 8008404:	2203      	movs	r2, #3
 8008406:	4650      	mov	r0, sl
 8008408:	f7f7 feea 	bl	80001e0 <memchr>
 800840c:	b140      	cbz	r0, 8008420 <_vfiprintf_r+0x198>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	eba0 000a 	sub.w	r0, r0, sl
 8008414:	fa03 f000 	lsl.w	r0, r3, r0
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	4303      	orrs	r3, r0
 800841c:	3401      	adds	r4, #1
 800841e:	9304      	str	r3, [sp, #16]
 8008420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008424:	482c      	ldr	r0, [pc, #176]	; (80084d8 <_vfiprintf_r+0x250>)
 8008426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800842a:	2206      	movs	r2, #6
 800842c:	f7f7 fed8 	bl	80001e0 <memchr>
 8008430:	2800      	cmp	r0, #0
 8008432:	d03f      	beq.n	80084b4 <_vfiprintf_r+0x22c>
 8008434:	4b29      	ldr	r3, [pc, #164]	; (80084dc <_vfiprintf_r+0x254>)
 8008436:	bb1b      	cbnz	r3, 8008480 <_vfiprintf_r+0x1f8>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	3307      	adds	r3, #7
 800843c:	f023 0307 	bic.w	r3, r3, #7
 8008440:	3308      	adds	r3, #8
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	443b      	add	r3, r7
 8008448:	9309      	str	r3, [sp, #36]	; 0x24
 800844a:	e767      	b.n	800831c <_vfiprintf_r+0x94>
 800844c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008450:	460c      	mov	r4, r1
 8008452:	2001      	movs	r0, #1
 8008454:	e7a5      	b.n	80083a2 <_vfiprintf_r+0x11a>
 8008456:	2300      	movs	r3, #0
 8008458:	3401      	adds	r4, #1
 800845a:	9305      	str	r3, [sp, #20]
 800845c:	4619      	mov	r1, r3
 800845e:	f04f 0c0a 	mov.w	ip, #10
 8008462:	4620      	mov	r0, r4
 8008464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008468:	3a30      	subs	r2, #48	; 0x30
 800846a:	2a09      	cmp	r2, #9
 800846c:	d903      	bls.n	8008476 <_vfiprintf_r+0x1ee>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0c5      	beq.n	80083fe <_vfiprintf_r+0x176>
 8008472:	9105      	str	r1, [sp, #20]
 8008474:	e7c3      	b.n	80083fe <_vfiprintf_r+0x176>
 8008476:	fb0c 2101 	mla	r1, ip, r1, r2
 800847a:	4604      	mov	r4, r0
 800847c:	2301      	movs	r3, #1
 800847e:	e7f0      	b.n	8008462 <_vfiprintf_r+0x1da>
 8008480:	ab03      	add	r3, sp, #12
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	462a      	mov	r2, r5
 8008486:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <_vfiprintf_r+0x258>)
 8008488:	a904      	add	r1, sp, #16
 800848a:	4630      	mov	r0, r6
 800848c:	f7fb ffba 	bl	8004404 <_printf_float>
 8008490:	4607      	mov	r7, r0
 8008492:	1c78      	adds	r0, r7, #1
 8008494:	d1d6      	bne.n	8008444 <_vfiprintf_r+0x1bc>
 8008496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008498:	07d9      	lsls	r1, r3, #31
 800849a:	d405      	bmi.n	80084a8 <_vfiprintf_r+0x220>
 800849c:	89ab      	ldrh	r3, [r5, #12]
 800849e:	059a      	lsls	r2, r3, #22
 80084a0:	d402      	bmi.n	80084a8 <_vfiprintf_r+0x220>
 80084a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a4:	f7fe ffcc 	bl	8007440 <__retarget_lock_release_recursive>
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	065b      	lsls	r3, r3, #25
 80084ac:	f53f af12 	bmi.w	80082d4 <_vfiprintf_r+0x4c>
 80084b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b2:	e711      	b.n	80082d8 <_vfiprintf_r+0x50>
 80084b4:	ab03      	add	r3, sp, #12
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	462a      	mov	r2, r5
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <_vfiprintf_r+0x258>)
 80084bc:	a904      	add	r1, sp, #16
 80084be:	4630      	mov	r0, r6
 80084c0:	f7fc fa44 	bl	800494c <_printf_i>
 80084c4:	e7e4      	b.n	8008490 <_vfiprintf_r+0x208>
 80084c6:	bf00      	nop
 80084c8:	08009fbc 	.word	0x08009fbc
 80084cc:	08009fdc 	.word	0x08009fdc
 80084d0:	08009f9c 	.word	0x08009f9c
 80084d4:	0800a1dc 	.word	0x0800a1dc
 80084d8:	0800a1e6 	.word	0x0800a1e6
 80084dc:	08004405 	.word	0x08004405
 80084e0:	08008263 	.word	0x08008263
 80084e4:	0800a1e2 	.word	0x0800a1e2

080084e8 <nan>:
 80084e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084f0 <nan+0x8>
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	00000000 	.word	0x00000000
 80084f4:	7ff80000 	.word	0x7ff80000

080084f8 <_sbrk_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d06      	ldr	r5, [pc, #24]	; (8008514 <_sbrk_r+0x1c>)
 80084fc:	2300      	movs	r3, #0
 80084fe:	4604      	mov	r4, r0
 8008500:	4608      	mov	r0, r1
 8008502:	602b      	str	r3, [r5, #0]
 8008504:	f7f9 fa72 	bl	80019ec <_sbrk>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_sbrk_r+0x1a>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_sbrk_r+0x1a>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20004a40 	.word	0x20004a40

08008518 <__sread>:
 8008518:	b510      	push	{r4, lr}
 800851a:	460c      	mov	r4, r1
 800851c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008520:	f000 facc 	bl	8008abc <_read_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	bfab      	itete	ge
 8008528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800852a:	89a3      	ldrhlt	r3, [r4, #12]
 800852c:	181b      	addge	r3, r3, r0
 800852e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008532:	bfac      	ite	ge
 8008534:	6563      	strge	r3, [r4, #84]	; 0x54
 8008536:	81a3      	strhlt	r3, [r4, #12]
 8008538:	bd10      	pop	{r4, pc}

0800853a <__swrite>:
 800853a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853e:	461f      	mov	r7, r3
 8008540:	898b      	ldrh	r3, [r1, #12]
 8008542:	05db      	lsls	r3, r3, #23
 8008544:	4605      	mov	r5, r0
 8008546:	460c      	mov	r4, r1
 8008548:	4616      	mov	r6, r2
 800854a:	d505      	bpl.n	8008558 <__swrite+0x1e>
 800854c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008550:	2302      	movs	r3, #2
 8008552:	2200      	movs	r2, #0
 8008554:	f000 f9f0 	bl	8008938 <_lseek_r>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800855e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	4632      	mov	r2, r6
 8008566:	463b      	mov	r3, r7
 8008568:	4628      	mov	r0, r5
 800856a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800856e:	f000 b889 	b.w	8008684 <_write_r>

08008572 <__sseek>:
 8008572:	b510      	push	{r4, lr}
 8008574:	460c      	mov	r4, r1
 8008576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857a:	f000 f9dd 	bl	8008938 <_lseek_r>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	bf15      	itete	ne
 8008584:	6560      	strne	r0, [r4, #84]	; 0x54
 8008586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800858a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800858e:	81a3      	strheq	r3, [r4, #12]
 8008590:	bf18      	it	ne
 8008592:	81a3      	strhne	r3, [r4, #12]
 8008594:	bd10      	pop	{r4, pc}

08008596 <__sclose>:
 8008596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859a:	f000 b8fb 	b.w	8008794 <_close_r>

0800859e <strncmp>:
 800859e:	b510      	push	{r4, lr}
 80085a0:	b16a      	cbz	r2, 80085be <strncmp+0x20>
 80085a2:	3901      	subs	r1, #1
 80085a4:	1884      	adds	r4, r0, r2
 80085a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80085aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d103      	bne.n	80085ba <strncmp+0x1c>
 80085b2:	42a0      	cmp	r0, r4
 80085b4:	d001      	beq.n	80085ba <strncmp+0x1c>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f5      	bne.n	80085a6 <strncmp+0x8>
 80085ba:	1a98      	subs	r0, r3, r2
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	4610      	mov	r0, r2
 80085c0:	e7fc      	b.n	80085bc <strncmp+0x1e>
	...

080085c4 <__swbuf_r>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	460e      	mov	r6, r1
 80085c8:	4614      	mov	r4, r2
 80085ca:	4605      	mov	r5, r0
 80085cc:	b118      	cbz	r0, 80085d6 <__swbuf_r+0x12>
 80085ce:	6983      	ldr	r3, [r0, #24]
 80085d0:	b90b      	cbnz	r3, 80085d6 <__swbuf_r+0x12>
 80085d2:	f7fe fb11 	bl	8006bf8 <__sinit>
 80085d6:	4b21      	ldr	r3, [pc, #132]	; (800865c <__swbuf_r+0x98>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	d12b      	bne.n	8008634 <__swbuf_r+0x70>
 80085dc:	686c      	ldr	r4, [r5, #4]
 80085de:	69a3      	ldr	r3, [r4, #24]
 80085e0:	60a3      	str	r3, [r4, #8]
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	071a      	lsls	r2, r3, #28
 80085e6:	d52f      	bpl.n	8008648 <__swbuf_r+0x84>
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	b36b      	cbz	r3, 8008648 <__swbuf_r+0x84>
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	1ac0      	subs	r0, r0, r3
 80085f2:	6963      	ldr	r3, [r4, #20]
 80085f4:	b2f6      	uxtb	r6, r6
 80085f6:	4283      	cmp	r3, r0
 80085f8:	4637      	mov	r7, r6
 80085fa:	dc04      	bgt.n	8008606 <__swbuf_r+0x42>
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f95e 	bl	80088c0 <_fflush_r>
 8008604:	bb30      	cbnz	r0, 8008654 <__swbuf_r+0x90>
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	3b01      	subs	r3, #1
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	701e      	strb	r6, [r3, #0]
 8008614:	6963      	ldr	r3, [r4, #20]
 8008616:	3001      	adds	r0, #1
 8008618:	4283      	cmp	r3, r0
 800861a:	d004      	beq.n	8008626 <__swbuf_r+0x62>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	07db      	lsls	r3, r3, #31
 8008620:	d506      	bpl.n	8008630 <__swbuf_r+0x6c>
 8008622:	2e0a      	cmp	r6, #10
 8008624:	d104      	bne.n	8008630 <__swbuf_r+0x6c>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f000 f949 	bl	80088c0 <_fflush_r>
 800862e:	b988      	cbnz	r0, 8008654 <__swbuf_r+0x90>
 8008630:	4638      	mov	r0, r7
 8008632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <__swbuf_r+0x9c>)
 8008636:	429c      	cmp	r4, r3
 8008638:	d101      	bne.n	800863e <__swbuf_r+0x7a>
 800863a:	68ac      	ldr	r4, [r5, #8]
 800863c:	e7cf      	b.n	80085de <__swbuf_r+0x1a>
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <__swbuf_r+0xa0>)
 8008640:	429c      	cmp	r4, r3
 8008642:	bf08      	it	eq
 8008644:	68ec      	ldreq	r4, [r5, #12]
 8008646:	e7ca      	b.n	80085de <__swbuf_r+0x1a>
 8008648:	4621      	mov	r1, r4
 800864a:	4628      	mov	r0, r5
 800864c:	f000 f82c 	bl	80086a8 <__swsetup_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	d0cb      	beq.n	80085ec <__swbuf_r+0x28>
 8008654:	f04f 37ff 	mov.w	r7, #4294967295
 8008658:	e7ea      	b.n	8008630 <__swbuf_r+0x6c>
 800865a:	bf00      	nop
 800865c:	08009fbc 	.word	0x08009fbc
 8008660:	08009fdc 	.word	0x08009fdc
 8008664:	08009f9c 	.word	0x08009f9c

08008668 <__ascii_wctomb>:
 8008668:	b149      	cbz	r1, 800867e <__ascii_wctomb+0x16>
 800866a:	2aff      	cmp	r2, #255	; 0xff
 800866c:	bf85      	ittet	hi
 800866e:	238a      	movhi	r3, #138	; 0x8a
 8008670:	6003      	strhi	r3, [r0, #0]
 8008672:	700a      	strbls	r2, [r1, #0]
 8008674:	f04f 30ff 	movhi.w	r0, #4294967295
 8008678:	bf98      	it	ls
 800867a:	2001      	movls	r0, #1
 800867c:	4770      	bx	lr
 800867e:	4608      	mov	r0, r1
 8008680:	4770      	bx	lr
	...

08008684 <_write_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d07      	ldr	r5, [pc, #28]	; (80086a4 <_write_r+0x20>)
 8008688:	4604      	mov	r4, r0
 800868a:	4608      	mov	r0, r1
 800868c:	4611      	mov	r1, r2
 800868e:	2200      	movs	r2, #0
 8008690:	602a      	str	r2, [r5, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	f7f9 f80e 	bl	80016b4 <_write>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_write_r+0x1e>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_write_r+0x1e>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20004a40 	.word	0x20004a40

080086a8 <__swsetup_r>:
 80086a8:	4b32      	ldr	r3, [pc, #200]	; (8008774 <__swsetup_r+0xcc>)
 80086aa:	b570      	push	{r4, r5, r6, lr}
 80086ac:	681d      	ldr	r5, [r3, #0]
 80086ae:	4606      	mov	r6, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	b125      	cbz	r5, 80086be <__swsetup_r+0x16>
 80086b4:	69ab      	ldr	r3, [r5, #24]
 80086b6:	b913      	cbnz	r3, 80086be <__swsetup_r+0x16>
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7fe fa9d 	bl	8006bf8 <__sinit>
 80086be:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <__swsetup_r+0xd0>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d10f      	bne.n	80086e4 <__swsetup_r+0x3c>
 80086c4:	686c      	ldr	r4, [r5, #4]
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086cc:	0719      	lsls	r1, r3, #28
 80086ce:	d42c      	bmi.n	800872a <__swsetup_r+0x82>
 80086d0:	06dd      	lsls	r5, r3, #27
 80086d2:	d411      	bmi.n	80086f8 <__swsetup_r+0x50>
 80086d4:	2309      	movs	r3, #9
 80086d6:	6033      	str	r3, [r6, #0]
 80086d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086dc:	81a3      	strh	r3, [r4, #12]
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	e03e      	b.n	8008762 <__swsetup_r+0xba>
 80086e4:	4b25      	ldr	r3, [pc, #148]	; (800877c <__swsetup_r+0xd4>)
 80086e6:	429c      	cmp	r4, r3
 80086e8:	d101      	bne.n	80086ee <__swsetup_r+0x46>
 80086ea:	68ac      	ldr	r4, [r5, #8]
 80086ec:	e7eb      	b.n	80086c6 <__swsetup_r+0x1e>
 80086ee:	4b24      	ldr	r3, [pc, #144]	; (8008780 <__swsetup_r+0xd8>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	bf08      	it	eq
 80086f4:	68ec      	ldreq	r4, [r5, #12]
 80086f6:	e7e6      	b.n	80086c6 <__swsetup_r+0x1e>
 80086f8:	0758      	lsls	r0, r3, #29
 80086fa:	d512      	bpl.n	8008722 <__swsetup_r+0x7a>
 80086fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fe:	b141      	cbz	r1, 8008712 <__swsetup_r+0x6a>
 8008700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008704:	4299      	cmp	r1, r3
 8008706:	d002      	beq.n	800870e <__swsetup_r+0x66>
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff fb8d 	bl	8007e28 <_free_r>
 800870e:	2300      	movs	r3, #0
 8008710:	6363      	str	r3, [r4, #52]	; 0x34
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	2300      	movs	r3, #0
 800871c:	6063      	str	r3, [r4, #4]
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f043 0308 	orr.w	r3, r3, #8
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	b94b      	cbnz	r3, 8008742 <__swsetup_r+0x9a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008738:	d003      	beq.n	8008742 <__swsetup_r+0x9a>
 800873a:	4621      	mov	r1, r4
 800873c:	4630      	mov	r0, r6
 800873e:	f000 f931 	bl	80089a4 <__smakebuf_r>
 8008742:	89a0      	ldrh	r0, [r4, #12]
 8008744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008748:	f010 0301 	ands.w	r3, r0, #1
 800874c:	d00a      	beq.n	8008764 <__swsetup_r+0xbc>
 800874e:	2300      	movs	r3, #0
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	6963      	ldr	r3, [r4, #20]
 8008754:	425b      	negs	r3, r3
 8008756:	61a3      	str	r3, [r4, #24]
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	b943      	cbnz	r3, 800876e <__swsetup_r+0xc6>
 800875c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008760:	d1ba      	bne.n	80086d8 <__swsetup_r+0x30>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	0781      	lsls	r1, r0, #30
 8008766:	bf58      	it	pl
 8008768:	6963      	ldrpl	r3, [r4, #20]
 800876a:	60a3      	str	r3, [r4, #8]
 800876c:	e7f4      	b.n	8008758 <__swsetup_r+0xb0>
 800876e:	2000      	movs	r0, #0
 8008770:	e7f7      	b.n	8008762 <__swsetup_r+0xba>
 8008772:	bf00      	nop
 8008774:	20000014 	.word	0x20000014
 8008778:	08009fbc 	.word	0x08009fbc
 800877c:	08009fdc 	.word	0x08009fdc
 8008780:	08009f9c 	.word	0x08009f9c

08008784 <abort>:
 8008784:	b508      	push	{r3, lr}
 8008786:	2006      	movs	r0, #6
 8008788:	f000 f9d2 	bl	8008b30 <raise>
 800878c:	2001      	movs	r0, #1
 800878e:	f7f9 f8d1 	bl	8001934 <_exit>
	...

08008794 <_close_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_close_r+0x1c>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	602b      	str	r3, [r5, #0]
 80087a0:	f7f9 f8ef 	bl	8001982 <_close>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_close_r+0x1a>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_close_r+0x1a>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	20004a40 	.word	0x20004a40

080087b4 <__sflush_r>:
 80087b4:	898a      	ldrh	r2, [r1, #12]
 80087b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ba:	4605      	mov	r5, r0
 80087bc:	0710      	lsls	r0, r2, #28
 80087be:	460c      	mov	r4, r1
 80087c0:	d458      	bmi.n	8008874 <__sflush_r+0xc0>
 80087c2:	684b      	ldr	r3, [r1, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dc05      	bgt.n	80087d4 <__sflush_r+0x20>
 80087c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	dc02      	bgt.n	80087d4 <__sflush_r+0x20>
 80087ce:	2000      	movs	r0, #0
 80087d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	d0f9      	beq.n	80087ce <__sflush_r+0x1a>
 80087da:	2300      	movs	r3, #0
 80087dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087e0:	682f      	ldr	r7, [r5, #0]
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	d032      	beq.n	800884c <__sflush_r+0x98>
 80087e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	075a      	lsls	r2, r3, #29
 80087ec:	d505      	bpl.n	80087fa <__sflush_r+0x46>
 80087ee:	6863      	ldr	r3, [r4, #4]
 80087f0:	1ac0      	subs	r0, r0, r3
 80087f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f4:	b10b      	cbz	r3, 80087fa <__sflush_r+0x46>
 80087f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f8:	1ac0      	subs	r0, r0, r3
 80087fa:	2300      	movs	r3, #0
 80087fc:	4602      	mov	r2, r0
 80087fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008800:	6a21      	ldr	r1, [r4, #32]
 8008802:	4628      	mov	r0, r5
 8008804:	47b0      	blx	r6
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	d106      	bne.n	800881a <__sflush_r+0x66>
 800880c:	6829      	ldr	r1, [r5, #0]
 800880e:	291d      	cmp	r1, #29
 8008810:	d82c      	bhi.n	800886c <__sflush_r+0xb8>
 8008812:	4a2a      	ldr	r2, [pc, #168]	; (80088bc <__sflush_r+0x108>)
 8008814:	40ca      	lsrs	r2, r1
 8008816:	07d6      	lsls	r6, r2, #31
 8008818:	d528      	bpl.n	800886c <__sflush_r+0xb8>
 800881a:	2200      	movs	r2, #0
 800881c:	6062      	str	r2, [r4, #4]
 800881e:	04d9      	lsls	r1, r3, #19
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	6022      	str	r2, [r4, #0]
 8008824:	d504      	bpl.n	8008830 <__sflush_r+0x7c>
 8008826:	1c42      	adds	r2, r0, #1
 8008828:	d101      	bne.n	800882e <__sflush_r+0x7a>
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	b903      	cbnz	r3, 8008830 <__sflush_r+0x7c>
 800882e:	6560      	str	r0, [r4, #84]	; 0x54
 8008830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008832:	602f      	str	r7, [r5, #0]
 8008834:	2900      	cmp	r1, #0
 8008836:	d0ca      	beq.n	80087ce <__sflush_r+0x1a>
 8008838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800883c:	4299      	cmp	r1, r3
 800883e:	d002      	beq.n	8008846 <__sflush_r+0x92>
 8008840:	4628      	mov	r0, r5
 8008842:	f7ff faf1 	bl	8007e28 <_free_r>
 8008846:	2000      	movs	r0, #0
 8008848:	6360      	str	r0, [r4, #52]	; 0x34
 800884a:	e7c1      	b.n	80087d0 <__sflush_r+0x1c>
 800884c:	6a21      	ldr	r1, [r4, #32]
 800884e:	2301      	movs	r3, #1
 8008850:	4628      	mov	r0, r5
 8008852:	47b0      	blx	r6
 8008854:	1c41      	adds	r1, r0, #1
 8008856:	d1c7      	bne.n	80087e8 <__sflush_r+0x34>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0c4      	beq.n	80087e8 <__sflush_r+0x34>
 800885e:	2b1d      	cmp	r3, #29
 8008860:	d001      	beq.n	8008866 <__sflush_r+0xb2>
 8008862:	2b16      	cmp	r3, #22
 8008864:	d101      	bne.n	800886a <__sflush_r+0xb6>
 8008866:	602f      	str	r7, [r5, #0]
 8008868:	e7b1      	b.n	80087ce <__sflush_r+0x1a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	e7ad      	b.n	80087d0 <__sflush_r+0x1c>
 8008874:	690f      	ldr	r7, [r1, #16]
 8008876:	2f00      	cmp	r7, #0
 8008878:	d0a9      	beq.n	80087ce <__sflush_r+0x1a>
 800887a:	0793      	lsls	r3, r2, #30
 800887c:	680e      	ldr	r6, [r1, #0]
 800887e:	bf08      	it	eq
 8008880:	694b      	ldreq	r3, [r1, #20]
 8008882:	600f      	str	r7, [r1, #0]
 8008884:	bf18      	it	ne
 8008886:	2300      	movne	r3, #0
 8008888:	eba6 0807 	sub.w	r8, r6, r7
 800888c:	608b      	str	r3, [r1, #8]
 800888e:	f1b8 0f00 	cmp.w	r8, #0
 8008892:	dd9c      	ble.n	80087ce <__sflush_r+0x1a>
 8008894:	6a21      	ldr	r1, [r4, #32]
 8008896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008898:	4643      	mov	r3, r8
 800889a:	463a      	mov	r2, r7
 800889c:	4628      	mov	r0, r5
 800889e:	47b0      	blx	r6
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dc06      	bgt.n	80088b2 <__sflush_r+0xfe>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e78e      	b.n	80087d0 <__sflush_r+0x1c>
 80088b2:	4407      	add	r7, r0
 80088b4:	eba8 0800 	sub.w	r8, r8, r0
 80088b8:	e7e9      	b.n	800888e <__sflush_r+0xda>
 80088ba:	bf00      	nop
 80088bc:	20400001 	.word	0x20400001

080088c0 <_fflush_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	690b      	ldr	r3, [r1, #16]
 80088c4:	4605      	mov	r5, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b913      	cbnz	r3, 80088d0 <_fflush_r+0x10>
 80088ca:	2500      	movs	r5, #0
 80088cc:	4628      	mov	r0, r5
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	b118      	cbz	r0, 80088da <_fflush_r+0x1a>
 80088d2:	6983      	ldr	r3, [r0, #24]
 80088d4:	b90b      	cbnz	r3, 80088da <_fflush_r+0x1a>
 80088d6:	f7fe f98f 	bl	8006bf8 <__sinit>
 80088da:	4b14      	ldr	r3, [pc, #80]	; (800892c <_fflush_r+0x6c>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	d11b      	bne.n	8008918 <_fflush_r+0x58>
 80088e0:	686c      	ldr	r4, [r5, #4]
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0ef      	beq.n	80088ca <_fflush_r+0xa>
 80088ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088ec:	07d0      	lsls	r0, r2, #31
 80088ee:	d404      	bmi.n	80088fa <_fflush_r+0x3a>
 80088f0:	0599      	lsls	r1, r3, #22
 80088f2:	d402      	bmi.n	80088fa <_fflush_r+0x3a>
 80088f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f6:	f7fe fda2 	bl	800743e <__retarget_lock_acquire_recursive>
 80088fa:	4628      	mov	r0, r5
 80088fc:	4621      	mov	r1, r4
 80088fe:	f7ff ff59 	bl	80087b4 <__sflush_r>
 8008902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008904:	07da      	lsls	r2, r3, #31
 8008906:	4605      	mov	r5, r0
 8008908:	d4e0      	bmi.n	80088cc <_fflush_r+0xc>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d4dd      	bmi.n	80088cc <_fflush_r+0xc>
 8008910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008912:	f7fe fd95 	bl	8007440 <__retarget_lock_release_recursive>
 8008916:	e7d9      	b.n	80088cc <_fflush_r+0xc>
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <_fflush_r+0x70>)
 800891a:	429c      	cmp	r4, r3
 800891c:	d101      	bne.n	8008922 <_fflush_r+0x62>
 800891e:	68ac      	ldr	r4, [r5, #8]
 8008920:	e7df      	b.n	80088e2 <_fflush_r+0x22>
 8008922:	4b04      	ldr	r3, [pc, #16]	; (8008934 <_fflush_r+0x74>)
 8008924:	429c      	cmp	r4, r3
 8008926:	bf08      	it	eq
 8008928:	68ec      	ldreq	r4, [r5, #12]
 800892a:	e7da      	b.n	80088e2 <_fflush_r+0x22>
 800892c:	08009fbc 	.word	0x08009fbc
 8008930:	08009fdc 	.word	0x08009fdc
 8008934:	08009f9c 	.word	0x08009f9c

08008938 <_lseek_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	; (8008958 <_lseek_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f9 f842 	bl	80019d0 <_lseek>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_lseek_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_lseek_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20004a40 	.word	0x20004a40

0800895c <__swhatbuf_r>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	460e      	mov	r6, r1
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	2900      	cmp	r1, #0
 8008966:	b096      	sub	sp, #88	; 0x58
 8008968:	4614      	mov	r4, r2
 800896a:	461d      	mov	r5, r3
 800896c:	da07      	bge.n	800897e <__swhatbuf_r+0x22>
 800896e:	2300      	movs	r3, #0
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	89b3      	ldrh	r3, [r6, #12]
 8008974:	061a      	lsls	r2, r3, #24
 8008976:	d410      	bmi.n	800899a <__swhatbuf_r+0x3e>
 8008978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897c:	e00e      	b.n	800899c <__swhatbuf_r+0x40>
 800897e:	466a      	mov	r2, sp
 8008980:	f000 f8f2 	bl	8008b68 <_fstat_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	dbf2      	blt.n	800896e <__swhatbuf_r+0x12>
 8008988:	9a01      	ldr	r2, [sp, #4]
 800898a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800898e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008992:	425a      	negs	r2, r3
 8008994:	415a      	adcs	r2, r3
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	e7ee      	b.n	8008978 <__swhatbuf_r+0x1c>
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2000      	movs	r0, #0
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	b016      	add	sp, #88	; 0x58
 80089a2:	bd70      	pop	{r4, r5, r6, pc}

080089a4 <__smakebuf_r>:
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089a8:	079d      	lsls	r5, r3, #30
 80089aa:	4606      	mov	r6, r0
 80089ac:	460c      	mov	r4, r1
 80089ae:	d507      	bpl.n	80089c0 <__smakebuf_r+0x1c>
 80089b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	2301      	movs	r3, #1
 80089ba:	6163      	str	r3, [r4, #20]
 80089bc:	b002      	add	sp, #8
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	ab01      	add	r3, sp, #4
 80089c2:	466a      	mov	r2, sp
 80089c4:	f7ff ffca 	bl	800895c <__swhatbuf_r>
 80089c8:	9900      	ldr	r1, [sp, #0]
 80089ca:	4605      	mov	r5, r0
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff fa7b 	bl	8007ec8 <_malloc_r>
 80089d2:	b948      	cbnz	r0, 80089e8 <__smakebuf_r+0x44>
 80089d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d8:	059a      	lsls	r2, r3, #22
 80089da:	d4ef      	bmi.n	80089bc <__smakebuf_r+0x18>
 80089dc:	f023 0303 	bic.w	r3, r3, #3
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	e7e3      	b.n	80089b0 <__smakebuf_r+0xc>
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <__smakebuf_r+0x7c>)
 80089ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	6163      	str	r3, [r4, #20]
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	6120      	str	r0, [r4, #16]
 80089fe:	b15b      	cbz	r3, 8008a18 <__smakebuf_r+0x74>
 8008a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 f8c1 	bl	8008b8c <_isatty_r>
 8008a0a:	b128      	cbz	r0, 8008a18 <__smakebuf_r+0x74>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	89a0      	ldrh	r0, [r4, #12]
 8008a1a:	4305      	orrs	r5, r0
 8008a1c:	81a5      	strh	r5, [r4, #12]
 8008a1e:	e7cd      	b.n	80089bc <__smakebuf_r+0x18>
 8008a20:	08006b91 	.word	0x08006b91

08008a24 <memmove>:
 8008a24:	4288      	cmp	r0, r1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	eb01 0402 	add.w	r4, r1, r2
 8008a2c:	d902      	bls.n	8008a34 <memmove+0x10>
 8008a2e:	4284      	cmp	r4, r0
 8008a30:	4623      	mov	r3, r4
 8008a32:	d807      	bhi.n	8008a44 <memmove+0x20>
 8008a34:	1e43      	subs	r3, r0, #1
 8008a36:	42a1      	cmp	r1, r4
 8008a38:	d008      	beq.n	8008a4c <memmove+0x28>
 8008a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a42:	e7f8      	b.n	8008a36 <memmove+0x12>
 8008a44:	4402      	add	r2, r0
 8008a46:	4601      	mov	r1, r0
 8008a48:	428a      	cmp	r2, r1
 8008a4a:	d100      	bne.n	8008a4e <memmove+0x2a>
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a56:	e7f7      	b.n	8008a48 <memmove+0x24>

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f7fe bcf0 	b.w	800743e <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20004a38 	.word	0x20004a38

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f7fe bceb 	b.w	8007440 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20004a38 	.word	0x20004a38

08008a70 <_realloc_r>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	4607      	mov	r7, r0
 8008a74:	4614      	mov	r4, r2
 8008a76:	460e      	mov	r6, r1
 8008a78:	b921      	cbnz	r1, 8008a84 <_realloc_r+0x14>
 8008a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a7e:	4611      	mov	r1, r2
 8008a80:	f7ff ba22 	b.w	8007ec8 <_malloc_r>
 8008a84:	b922      	cbnz	r2, 8008a90 <_realloc_r+0x20>
 8008a86:	f7ff f9cf 	bl	8007e28 <_free_r>
 8008a8a:	4625      	mov	r5, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a90:	f000 f88c 	bl	8008bac <_malloc_usable_size_r>
 8008a94:	42a0      	cmp	r0, r4
 8008a96:	d20f      	bcs.n	8008ab8 <_realloc_r+0x48>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f7ff fa14 	bl	8007ec8 <_malloc_r>
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0f2      	beq.n	8008a8c <_realloc_r+0x1c>
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	f7fe fce5 	bl	8007478 <memcpy>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff f9b9 	bl	8007e28 <_free_r>
 8008ab6:	e7e9      	b.n	8008a8c <_realloc_r+0x1c>
 8008ab8:	4635      	mov	r5, r6
 8008aba:	e7e7      	b.n	8008a8c <_realloc_r+0x1c>

08008abc <_read_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	; (8008adc <_read_r+0x20>)
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f8 ff3c 	bl	8001948 <_read>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_read_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_read_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20004a40 	.word	0x20004a40

08008ae0 <_raise_r>:
 8008ae0:	291f      	cmp	r1, #31
 8008ae2:	b538      	push	{r3, r4, r5, lr}
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	460d      	mov	r5, r1
 8008ae8:	d904      	bls.n	8008af4 <_raise_r+0x14>
 8008aea:	2316      	movs	r3, #22
 8008aec:	6003      	str	r3, [r0, #0]
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008af6:	b112      	cbz	r2, 8008afe <_raise_r+0x1e>
 8008af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008afc:	b94b      	cbnz	r3, 8008b12 <_raise_r+0x32>
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 f830 	bl	8008b64 <_getpid_r>
 8008b04:	462a      	mov	r2, r5
 8008b06:	4601      	mov	r1, r0
 8008b08:	4620      	mov	r0, r4
 8008b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b0e:	f000 b817 	b.w	8008b40 <_kill_r>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d00a      	beq.n	8008b2c <_raise_r+0x4c>
 8008b16:	1c59      	adds	r1, r3, #1
 8008b18:	d103      	bne.n	8008b22 <_raise_r+0x42>
 8008b1a:	2316      	movs	r3, #22
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7e7      	b.n	8008af2 <_raise_r+0x12>
 8008b22:	2400      	movs	r4, #0
 8008b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b28:	4628      	mov	r0, r5
 8008b2a:	4798      	blx	r3
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7e0      	b.n	8008af2 <_raise_r+0x12>

08008b30 <raise>:
 8008b30:	4b02      	ldr	r3, [pc, #8]	; (8008b3c <raise+0xc>)
 8008b32:	4601      	mov	r1, r0
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	f7ff bfd3 	b.w	8008ae0 <_raise_r>
 8008b3a:	bf00      	nop
 8008b3c:	20000014 	.word	0x20000014

08008b40 <_kill_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d07      	ldr	r5, [pc, #28]	; (8008b60 <_kill_r+0x20>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	602b      	str	r3, [r5, #0]
 8008b4e:	f7f8 fee1 	bl	8001914 <_kill>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d102      	bne.n	8008b5c <_kill_r+0x1c>
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	b103      	cbz	r3, 8008b5c <_kill_r+0x1c>
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	bd38      	pop	{r3, r4, r5, pc}
 8008b5e:	bf00      	nop
 8008b60:	20004a40 	.word	0x20004a40

08008b64 <_getpid_r>:
 8008b64:	f7f8 bece 	b.w	8001904 <_getpid>

08008b68 <_fstat_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d07      	ldr	r5, [pc, #28]	; (8008b88 <_fstat_r+0x20>)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4604      	mov	r4, r0
 8008b70:	4608      	mov	r0, r1
 8008b72:	4611      	mov	r1, r2
 8008b74:	602b      	str	r3, [r5, #0]
 8008b76:	f7f8 ff10 	bl	800199a <_fstat>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d102      	bne.n	8008b84 <_fstat_r+0x1c>
 8008b7e:	682b      	ldr	r3, [r5, #0]
 8008b80:	b103      	cbz	r3, 8008b84 <_fstat_r+0x1c>
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	bd38      	pop	{r3, r4, r5, pc}
 8008b86:	bf00      	nop
 8008b88:	20004a40 	.word	0x20004a40

08008b8c <_isatty_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d06      	ldr	r5, [pc, #24]	; (8008ba8 <_isatty_r+0x1c>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	f7f8 ff0f 	bl	80019ba <_isatty>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_isatty_r+0x1a>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_isatty_r+0x1a>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	20004a40 	.word	0x20004a40

08008bac <_malloc_usable_size_r>:
 8008bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb0:	1f18      	subs	r0, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bfbc      	itt	lt
 8008bb6:	580b      	ldrlt	r3, [r1, r0]
 8008bb8:	18c0      	addlt	r0, r0, r3
 8008bba:	4770      	bx	lr
 8008bbc:	0000      	movs	r0, r0
	...

08008bc0 <sin>:
 8008bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bc2:	ec53 2b10 	vmov	r2, r3, d0
 8008bc6:	4826      	ldr	r0, [pc, #152]	; (8008c60 <sin+0xa0>)
 8008bc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bcc:	4281      	cmp	r1, r0
 8008bce:	dc07      	bgt.n	8008be0 <sin+0x20>
 8008bd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008c58 <sin+0x98>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f000 fe5b 	bl	8009890 <__kernel_sin>
 8008bda:	ec51 0b10 	vmov	r0, r1, d0
 8008bde:	e007      	b.n	8008bf0 <sin+0x30>
 8008be0:	4820      	ldr	r0, [pc, #128]	; (8008c64 <sin+0xa4>)
 8008be2:	4281      	cmp	r1, r0
 8008be4:	dd09      	ble.n	8008bfa <sin+0x3a>
 8008be6:	ee10 0a10 	vmov	r0, s0
 8008bea:	4619      	mov	r1, r3
 8008bec:	f7f7 fb4c 	bl	8000288 <__aeabi_dsub>
 8008bf0:	ec41 0b10 	vmov	d0, r0, r1
 8008bf4:	b005      	add	sp, #20
 8008bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bfa:	4668      	mov	r0, sp
 8008bfc:	f000 f834 	bl	8008c68 <__ieee754_rem_pio2>
 8008c00:	f000 0003 	and.w	r0, r0, #3
 8008c04:	2801      	cmp	r0, #1
 8008c06:	d008      	beq.n	8008c1a <sin+0x5a>
 8008c08:	2802      	cmp	r0, #2
 8008c0a:	d00d      	beq.n	8008c28 <sin+0x68>
 8008c0c:	b9d0      	cbnz	r0, 8008c44 <sin+0x84>
 8008c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c12:	ed9d 0b00 	vldr	d0, [sp]
 8008c16:	2001      	movs	r0, #1
 8008c18:	e7dd      	b.n	8008bd6 <sin+0x16>
 8008c1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c1e:	ed9d 0b00 	vldr	d0, [sp]
 8008c22:	f000 fa2d 	bl	8009080 <__kernel_cos>
 8008c26:	e7d8      	b.n	8008bda <sin+0x1a>
 8008c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c2c:	ed9d 0b00 	vldr	d0, [sp]
 8008c30:	2001      	movs	r0, #1
 8008c32:	f000 fe2d 	bl	8009890 <__kernel_sin>
 8008c36:	ec53 2b10 	vmov	r2, r3, d0
 8008c3a:	ee10 0a10 	vmov	r0, s0
 8008c3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c42:	e7d5      	b.n	8008bf0 <sin+0x30>
 8008c44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c48:	ed9d 0b00 	vldr	d0, [sp]
 8008c4c:	f000 fa18 	bl	8009080 <__kernel_cos>
 8008c50:	e7f1      	b.n	8008c36 <sin+0x76>
 8008c52:	bf00      	nop
 8008c54:	f3af 8000 	nop.w
	...
 8008c60:	3fe921fb 	.word	0x3fe921fb
 8008c64:	7fefffff 	.word	0x7fefffff

08008c68 <__ieee754_rem_pio2>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	ed2d 8b02 	vpush	{d8}
 8008c70:	ec55 4b10 	vmov	r4, r5, d0
 8008c74:	4bca      	ldr	r3, [pc, #808]	; (8008fa0 <__ieee754_rem_pio2+0x338>)
 8008c76:	b08b      	sub	sp, #44	; 0x2c
 8008c78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008c7c:	4598      	cmp	r8, r3
 8008c7e:	4682      	mov	sl, r0
 8008c80:	9502      	str	r5, [sp, #8]
 8008c82:	dc08      	bgt.n	8008c96 <__ieee754_rem_pio2+0x2e>
 8008c84:	2200      	movs	r2, #0
 8008c86:	2300      	movs	r3, #0
 8008c88:	ed80 0b00 	vstr	d0, [r0]
 8008c8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008c90:	f04f 0b00 	mov.w	fp, #0
 8008c94:	e028      	b.n	8008ce8 <__ieee754_rem_pio2+0x80>
 8008c96:	4bc3      	ldr	r3, [pc, #780]	; (8008fa4 <__ieee754_rem_pio2+0x33c>)
 8008c98:	4598      	cmp	r8, r3
 8008c9a:	dc78      	bgt.n	8008d8e <__ieee754_rem_pio2+0x126>
 8008c9c:	9b02      	ldr	r3, [sp, #8]
 8008c9e:	4ec2      	ldr	r6, [pc, #776]	; (8008fa8 <__ieee754_rem_pio2+0x340>)
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	ee10 0a10 	vmov	r0, s0
 8008ca6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008f68 <__ieee754_rem_pio2+0x300>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	4629      	mov	r1, r5
 8008cae:	dd39      	ble.n	8008d24 <__ieee754_rem_pio2+0xbc>
 8008cb0:	f7f7 faea 	bl	8000288 <__aeabi_dsub>
 8008cb4:	45b0      	cmp	r8, r6
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	d01b      	beq.n	8008cf4 <__ieee754_rem_pio2+0x8c>
 8008cbc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008f70 <__ieee754_rem_pio2+0x308>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f7f7 fae1 	bl	8000288 <__aeabi_dsub>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9ca 2300 	strd	r2, r3, [sl]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7f7 fad9 	bl	8000288 <__aeabi_dsub>
 8008cd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008f70 <__ieee754_rem_pio2+0x308>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fad4 	bl	8000288 <__aeabi_dsub>
 8008ce0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ce4:	f04f 0b01 	mov.w	fp, #1
 8008ce8:	4658      	mov	r0, fp
 8008cea:	b00b      	add	sp, #44	; 0x2c
 8008cec:	ecbd 8b02 	vpop	{d8}
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f78 <__ieee754_rem_pio2+0x310>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fac5 	bl	8000288 <__aeabi_dsub>
 8008cfe:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f80 <__ieee754_rem_pio2+0x318>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	f7f7 fabe 	bl	8000288 <__aeabi_dsub>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	e9ca 2300 	strd	r2, r3, [sl]
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 fab6 	bl	8000288 <__aeabi_dsub>
 8008d1c:	a398      	add	r3, pc, #608	; (adr r3, 8008f80 <__ieee754_rem_pio2+0x318>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	e7db      	b.n	8008cdc <__ieee754_rem_pio2+0x74>
 8008d24:	f7f7 fab2 	bl	800028c <__adddf3>
 8008d28:	45b0      	cmp	r8, r6
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	d016      	beq.n	8008d5e <__ieee754_rem_pio2+0xf6>
 8008d30:	a38f      	add	r3, pc, #572	; (adr r3, 8008f70 <__ieee754_rem_pio2+0x308>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 faa9 	bl	800028c <__adddf3>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	e9ca 2300 	strd	r2, r3, [sl]
 8008d42:	4620      	mov	r0, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	a389      	add	r3, pc, #548	; (adr r3, 8008f70 <__ieee754_rem_pio2+0x308>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fa9c 	bl	800028c <__adddf3>
 8008d54:	f04f 3bff 	mov.w	fp, #4294967295
 8008d58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d5c:	e7c4      	b.n	8008ce8 <__ieee754_rem_pio2+0x80>
 8008d5e:	a386      	add	r3, pc, #536	; (adr r3, 8008f78 <__ieee754_rem_pio2+0x310>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	f7f7 fa92 	bl	800028c <__adddf3>
 8008d68:	a385      	add	r3, pc, #532	; (adr r3, 8008f80 <__ieee754_rem_pio2+0x318>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	f7f7 fa8b 	bl	800028c <__adddf3>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	e9ca 2300 	strd	r2, r3, [sl]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fa81 	bl	8000288 <__aeabi_dsub>
 8008d86:	a37e      	add	r3, pc, #504	; (adr r3, 8008f80 <__ieee754_rem_pio2+0x318>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	e7e0      	b.n	8008d50 <__ieee754_rem_pio2+0xe8>
 8008d8e:	4b87      	ldr	r3, [pc, #540]	; (8008fac <__ieee754_rem_pio2+0x344>)
 8008d90:	4598      	cmp	r8, r3
 8008d92:	f300 80d9 	bgt.w	8008f48 <__ieee754_rem_pio2+0x2e0>
 8008d96:	f000 fe39 	bl	8009a0c <fabs>
 8008d9a:	ec55 4b10 	vmov	r4, r5, d0
 8008d9e:	ee10 0a10 	vmov	r0, s0
 8008da2:	a379      	add	r3, pc, #484	; (adr r3, 8008f88 <__ieee754_rem_pio2+0x320>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	4629      	mov	r1, r5
 8008daa:	f7f7 fc25 	bl	80005f8 <__aeabi_dmul>
 8008dae:	4b80      	ldr	r3, [pc, #512]	; (8008fb0 <__ieee754_rem_pio2+0x348>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	f7f7 fa6b 	bl	800028c <__adddf3>
 8008db6:	f7f7 fecf 	bl	8000b58 <__aeabi_d2iz>
 8008dba:	4683      	mov	fp, r0
 8008dbc:	f7f7 fbb2 	bl	8000524 <__aeabi_i2d>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	ec43 2b18 	vmov	d8, r2, r3
 8008dc8:	a367      	add	r3, pc, #412	; (adr r3, 8008f68 <__ieee754_rem_pio2+0x300>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fc13 	bl	80005f8 <__aeabi_dmul>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7f7 fa55 	bl	8000288 <__aeabi_dsub>
 8008dde:	a364      	add	r3, pc, #400	; (adr r3, 8008f70 <__ieee754_rem_pio2+0x308>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	4606      	mov	r6, r0
 8008de6:	460f      	mov	r7, r1
 8008de8:	ec51 0b18 	vmov	r0, r1, d8
 8008dec:	f7f7 fc04 	bl	80005f8 <__aeabi_dmul>
 8008df0:	f1bb 0f1f 	cmp.w	fp, #31
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	dc0d      	bgt.n	8008e16 <__ieee754_rem_pio2+0x1ae>
 8008dfa:	4b6e      	ldr	r3, [pc, #440]	; (8008fb4 <__ieee754_rem_pio2+0x34c>)
 8008dfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	4543      	cmp	r3, r8
 8008e06:	d006      	beq.n	8008e16 <__ieee754_rem_pio2+0x1ae>
 8008e08:	4622      	mov	r2, r4
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fa3a 	bl	8000288 <__aeabi_dsub>
 8008e14:	e00f      	b.n	8008e36 <__ieee754_rem_pio2+0x1ce>
 8008e16:	462b      	mov	r3, r5
 8008e18:	4622      	mov	r2, r4
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	f7f7 fa33 	bl	8000288 <__aeabi_dsub>
 8008e22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008e30:	f1b8 0f10 	cmp.w	r8, #16
 8008e34:	dc02      	bgt.n	8008e3c <__ieee754_rem_pio2+0x1d4>
 8008e36:	e9ca 0100 	strd	r0, r1, [sl]
 8008e3a:	e039      	b.n	8008eb0 <__ieee754_rem_pio2+0x248>
 8008e3c:	a34e      	add	r3, pc, #312	; (adr r3, 8008f78 <__ieee754_rem_pio2+0x310>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	ec51 0b18 	vmov	r0, r1, d8
 8008e46:	f7f7 fbd7 	bl	80005f8 <__aeabi_dmul>
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fa17 	bl	8000288 <__aeabi_dsub>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4680      	mov	r8, r0
 8008e60:	4689      	mov	r9, r1
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fa0f 	bl	8000288 <__aeabi_dsub>
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	f7f7 fa0b 	bl	8000288 <__aeabi_dsub>
 8008e72:	a343      	add	r3, pc, #268	; (adr r3, 8008f80 <__ieee754_rem_pio2+0x318>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	4604      	mov	r4, r0
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	ec51 0b18 	vmov	r0, r1, d8
 8008e80:	f7f7 fbba 	bl	80005f8 <__aeabi_dmul>
 8008e84:	4622      	mov	r2, r4
 8008e86:	462b      	mov	r3, r5
 8008e88:	f7f7 f9fe 	bl	8000288 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f7f7 f9f6 	bl	8000288 <__aeabi_dsub>
 8008e9c:	9a03      	ldr	r2, [sp, #12]
 8008e9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b31      	cmp	r3, #49	; 0x31
 8008ea6:	dc24      	bgt.n	8008ef2 <__ieee754_rem_pio2+0x28a>
 8008ea8:	e9ca 0100 	strd	r0, r1, [sl]
 8008eac:	4646      	mov	r6, r8
 8008eae:	464f      	mov	r7, r9
 8008eb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	464b      	mov	r3, r9
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f9e4 	bl	8000288 <__aeabi_dsub>
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	f7f7 f9e0 	bl	8000288 <__aeabi_dsub>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ed0:	f6bf af0a 	bge.w	8008ce8 <__ieee754_rem_pio2+0x80>
 8008ed4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ed8:	f8ca 3004 	str.w	r3, [sl, #4]
 8008edc:	f8ca 8000 	str.w	r8, [sl]
 8008ee0:	f8ca 0008 	str.w	r0, [sl, #8]
 8008ee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ee8:	f8ca 300c 	str.w	r3, [sl, #12]
 8008eec:	f1cb 0b00 	rsb	fp, fp, #0
 8008ef0:	e6fa      	b.n	8008ce8 <__ieee754_rem_pio2+0x80>
 8008ef2:	a327      	add	r3, pc, #156	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x328>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	ec51 0b18 	vmov	r0, r1, d8
 8008efc:	f7f7 fb7c 	bl	80005f8 <__aeabi_dmul>
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 f9bc 	bl	8000288 <__aeabi_dsub>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4606      	mov	r6, r0
 8008f16:	460f      	mov	r7, r1
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 f9b4 	bl	8000288 <__aeabi_dsub>
 8008f20:	4622      	mov	r2, r4
 8008f22:	462b      	mov	r3, r5
 8008f24:	f7f7 f9b0 	bl	8000288 <__aeabi_dsub>
 8008f28:	a31b      	add	r3, pc, #108	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x330>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	ec51 0b18 	vmov	r0, r1, d8
 8008f36:	f7f7 fb5f 	bl	80005f8 <__aeabi_dmul>
 8008f3a:	4622      	mov	r2, r4
 8008f3c:	462b      	mov	r3, r5
 8008f3e:	f7f7 f9a3 	bl	8000288 <__aeabi_dsub>
 8008f42:	4604      	mov	r4, r0
 8008f44:	460d      	mov	r5, r1
 8008f46:	e75f      	b.n	8008e08 <__ieee754_rem_pio2+0x1a0>
 8008f48:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <__ieee754_rem_pio2+0x350>)
 8008f4a:	4598      	cmp	r8, r3
 8008f4c:	dd36      	ble.n	8008fbc <__ieee754_rem_pio2+0x354>
 8008f4e:	ee10 2a10 	vmov	r2, s0
 8008f52:	462b      	mov	r3, r5
 8008f54:	4620      	mov	r0, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	f7f7 f996 	bl	8000288 <__aeabi_dsub>
 8008f5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f60:	e9ca 0100 	strd	r0, r1, [sl]
 8008f64:	e694      	b.n	8008c90 <__ieee754_rem_pio2+0x28>
 8008f66:	bf00      	nop
 8008f68:	54400000 	.word	0x54400000
 8008f6c:	3ff921fb 	.word	0x3ff921fb
 8008f70:	1a626331 	.word	0x1a626331
 8008f74:	3dd0b461 	.word	0x3dd0b461
 8008f78:	1a600000 	.word	0x1a600000
 8008f7c:	3dd0b461 	.word	0x3dd0b461
 8008f80:	2e037073 	.word	0x2e037073
 8008f84:	3ba3198a 	.word	0x3ba3198a
 8008f88:	6dc9c883 	.word	0x6dc9c883
 8008f8c:	3fe45f30 	.word	0x3fe45f30
 8008f90:	2e000000 	.word	0x2e000000
 8008f94:	3ba3198a 	.word	0x3ba3198a
 8008f98:	252049c1 	.word	0x252049c1
 8008f9c:	397b839a 	.word	0x397b839a
 8008fa0:	3fe921fb 	.word	0x3fe921fb
 8008fa4:	4002d97b 	.word	0x4002d97b
 8008fa8:	3ff921fb 	.word	0x3ff921fb
 8008fac:	413921fb 	.word	0x413921fb
 8008fb0:	3fe00000 	.word	0x3fe00000
 8008fb4:	0800a1f0 	.word	0x0800a1f0
 8008fb8:	7fefffff 	.word	0x7fefffff
 8008fbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008fc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008fc4:	ee10 0a10 	vmov	r0, s0
 8008fc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008fcc:	ee10 6a10 	vmov	r6, s0
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	f7f7 fdc1 	bl	8000b58 <__aeabi_d2iz>
 8008fd6:	f7f7 faa5 	bl	8000524 <__aeabi_i2d>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4630      	mov	r0, r6
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fe6:	f7f7 f94f 	bl	8000288 <__aeabi_dsub>
 8008fea:	4b22      	ldr	r3, [pc, #136]	; (8009074 <__ieee754_rem_pio2+0x40c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	f7f7 fb03 	bl	80005f8 <__aeabi_dmul>
 8008ff2:	460f      	mov	r7, r1
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	f7f7 fdaf 	bl	8000b58 <__aeabi_d2iz>
 8008ffa:	f7f7 fa93 	bl	8000524 <__aeabi_i2d>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800900a:	f7f7 f93d 	bl	8000288 <__aeabi_dsub>
 800900e:	4b19      	ldr	r3, [pc, #100]	; (8009074 <__ieee754_rem_pio2+0x40c>)
 8009010:	2200      	movs	r2, #0
 8009012:	f7f7 faf1 	bl	80005f8 <__aeabi_dmul>
 8009016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800901a:	ad04      	add	r5, sp, #16
 800901c:	f04f 0803 	mov.w	r8, #3
 8009020:	46a9      	mov	r9, r5
 8009022:	2600      	movs	r6, #0
 8009024:	2700      	movs	r7, #0
 8009026:	4632      	mov	r2, r6
 8009028:	463b      	mov	r3, r7
 800902a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800902e:	46c3      	mov	fp, r8
 8009030:	3d08      	subs	r5, #8
 8009032:	f108 38ff 	add.w	r8, r8, #4294967295
 8009036:	f7f7 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800903a:	2800      	cmp	r0, #0
 800903c:	d1f3      	bne.n	8009026 <__ieee754_rem_pio2+0x3be>
 800903e:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <__ieee754_rem_pio2+0x410>)
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	2302      	movs	r3, #2
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4622      	mov	r2, r4
 8009048:	465b      	mov	r3, fp
 800904a:	4651      	mov	r1, sl
 800904c:	4648      	mov	r0, r9
 800904e:	f000 f8df 	bl	8009210 <__kernel_rem_pio2>
 8009052:	9b02      	ldr	r3, [sp, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	4683      	mov	fp, r0
 8009058:	f6bf ae46 	bge.w	8008ce8 <__ieee754_rem_pio2+0x80>
 800905c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009060:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009064:	f8ca 3004 	str.w	r3, [sl, #4]
 8009068:	f8da 300c 	ldr.w	r3, [sl, #12]
 800906c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009070:	e73a      	b.n	8008ee8 <__ieee754_rem_pio2+0x280>
 8009072:	bf00      	nop
 8009074:	41700000 	.word	0x41700000
 8009078:	0800a270 	.word	0x0800a270
 800907c:	00000000 	.word	0x00000000

08009080 <__kernel_cos>:
 8009080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	ec57 6b10 	vmov	r6, r7, d0
 8009088:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800908c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009090:	ed8d 1b00 	vstr	d1, [sp]
 8009094:	da07      	bge.n	80090a6 <__kernel_cos+0x26>
 8009096:	ee10 0a10 	vmov	r0, s0
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fd5c 	bl	8000b58 <__aeabi_d2iz>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f000 8088 	beq.w	80091b6 <__kernel_cos+0x136>
 80090a6:	4632      	mov	r2, r6
 80090a8:	463b      	mov	r3, r7
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	4b51      	ldr	r3, [pc, #324]	; (80091f8 <__kernel_cos+0x178>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	460d      	mov	r5, r1
 80090ba:	f7f7 fa9d 	bl	80005f8 <__aeabi_dmul>
 80090be:	a340      	add	r3, pc, #256	; (adr r3, 80091c0 <__kernel_cos+0x140>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 fa94 	bl	80005f8 <__aeabi_dmul>
 80090d0:	a33d      	add	r3, pc, #244	; (adr r3, 80091c8 <__kernel_cos+0x148>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f7f7 f8d9 	bl	800028c <__adddf3>
 80090da:	4622      	mov	r2, r4
 80090dc:	462b      	mov	r3, r5
 80090de:	f7f7 fa8b 	bl	80005f8 <__aeabi_dmul>
 80090e2:	a33b      	add	r3, pc, #236	; (adr r3, 80091d0 <__kernel_cos+0x150>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f8ce 	bl	8000288 <__aeabi_dsub>
 80090ec:	4622      	mov	r2, r4
 80090ee:	462b      	mov	r3, r5
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	a338      	add	r3, pc, #224	; (adr r3, 80091d8 <__kernel_cos+0x158>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 f8c7 	bl	800028c <__adddf3>
 80090fe:	4622      	mov	r2, r4
 8009100:	462b      	mov	r3, r5
 8009102:	f7f7 fa79 	bl	80005f8 <__aeabi_dmul>
 8009106:	a336      	add	r3, pc, #216	; (adr r3, 80091e0 <__kernel_cos+0x160>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 f8bc 	bl	8000288 <__aeabi_dsub>
 8009110:	4622      	mov	r2, r4
 8009112:	462b      	mov	r3, r5
 8009114:	f7f7 fa70 	bl	80005f8 <__aeabi_dmul>
 8009118:	a333      	add	r3, pc, #204	; (adr r3, 80091e8 <__kernel_cos+0x168>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 f8b5 	bl	800028c <__adddf3>
 8009122:	4622      	mov	r2, r4
 8009124:	462b      	mov	r3, r5
 8009126:	f7f7 fa67 	bl	80005f8 <__aeabi_dmul>
 800912a:	4622      	mov	r2, r4
 800912c:	462b      	mov	r3, r5
 800912e:	f7f7 fa63 	bl	80005f8 <__aeabi_dmul>
 8009132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	4630      	mov	r0, r6
 800913c:	4639      	mov	r1, r7
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	460b      	mov	r3, r1
 8009144:	4602      	mov	r2, r0
 8009146:	4629      	mov	r1, r5
 8009148:	4620      	mov	r0, r4
 800914a:	f7f7 f89d 	bl	8000288 <__aeabi_dsub>
 800914e:	4b2b      	ldr	r3, [pc, #172]	; (80091fc <__kernel_cos+0x17c>)
 8009150:	4598      	cmp	r8, r3
 8009152:	4606      	mov	r6, r0
 8009154:	460f      	mov	r7, r1
 8009156:	dc10      	bgt.n	800917a <__kernel_cos+0xfa>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4650      	mov	r0, sl
 800915e:	4659      	mov	r1, fp
 8009160:	f7f7 f892 	bl	8000288 <__aeabi_dsub>
 8009164:	460b      	mov	r3, r1
 8009166:	4926      	ldr	r1, [pc, #152]	; (8009200 <__kernel_cos+0x180>)
 8009168:	4602      	mov	r2, r0
 800916a:	2000      	movs	r0, #0
 800916c:	f7f7 f88c 	bl	8000288 <__aeabi_dsub>
 8009170:	ec41 0b10 	vmov	d0, r0, r1
 8009174:	b003      	add	sp, #12
 8009176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917a:	4b22      	ldr	r3, [pc, #136]	; (8009204 <__kernel_cos+0x184>)
 800917c:	4920      	ldr	r1, [pc, #128]	; (8009200 <__kernel_cos+0x180>)
 800917e:	4598      	cmp	r8, r3
 8009180:	bfcc      	ite	gt
 8009182:	4d21      	ldrgt	r5, [pc, #132]	; (8009208 <__kernel_cos+0x188>)
 8009184:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009188:	2400      	movs	r4, #0
 800918a:	4622      	mov	r2, r4
 800918c:	462b      	mov	r3, r5
 800918e:	2000      	movs	r0, #0
 8009190:	f7f7 f87a 	bl	8000288 <__aeabi_dsub>
 8009194:	4622      	mov	r2, r4
 8009196:	4680      	mov	r8, r0
 8009198:	4689      	mov	r9, r1
 800919a:	462b      	mov	r3, r5
 800919c:	4650      	mov	r0, sl
 800919e:	4659      	mov	r1, fp
 80091a0:	f7f7 f872 	bl	8000288 <__aeabi_dsub>
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	f7f7 f86e 	bl	8000288 <__aeabi_dsub>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	e7da      	b.n	800916c <__kernel_cos+0xec>
 80091b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80091f0 <__kernel_cos+0x170>
 80091ba:	e7db      	b.n	8009174 <__kernel_cos+0xf4>
 80091bc:	f3af 8000 	nop.w
 80091c0:	be8838d4 	.word	0xbe8838d4
 80091c4:	bda8fae9 	.word	0xbda8fae9
 80091c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80091cc:	3e21ee9e 	.word	0x3e21ee9e
 80091d0:	809c52ad 	.word	0x809c52ad
 80091d4:	3e927e4f 	.word	0x3e927e4f
 80091d8:	19cb1590 	.word	0x19cb1590
 80091dc:	3efa01a0 	.word	0x3efa01a0
 80091e0:	16c15177 	.word	0x16c15177
 80091e4:	3f56c16c 	.word	0x3f56c16c
 80091e8:	5555554c 	.word	0x5555554c
 80091ec:	3fa55555 	.word	0x3fa55555
 80091f0:	00000000 	.word	0x00000000
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	3fe00000 	.word	0x3fe00000
 80091fc:	3fd33332 	.word	0x3fd33332
 8009200:	3ff00000 	.word	0x3ff00000
 8009204:	3fe90000 	.word	0x3fe90000
 8009208:	3fd20000 	.word	0x3fd20000
 800920c:	00000000 	.word	0x00000000

08009210 <__kernel_rem_pio2>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	ed2d 8b02 	vpush	{d8}
 8009218:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800921c:	f112 0f14 	cmn.w	r2, #20
 8009220:	9308      	str	r3, [sp, #32]
 8009222:	9101      	str	r1, [sp, #4]
 8009224:	4bc6      	ldr	r3, [pc, #792]	; (8009540 <__kernel_rem_pio2+0x330>)
 8009226:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009228:	9009      	str	r0, [sp, #36]	; 0x24
 800922a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	f103 33ff 	add.w	r3, r3, #4294967295
 8009236:	bfa8      	it	ge
 8009238:	1ed4      	subge	r4, r2, #3
 800923a:	9306      	str	r3, [sp, #24]
 800923c:	bfb2      	itee	lt
 800923e:	2400      	movlt	r4, #0
 8009240:	2318      	movge	r3, #24
 8009242:	fb94 f4f3 	sdivge	r4, r4, r3
 8009246:	f06f 0317 	mvn.w	r3, #23
 800924a:	fb04 3303 	mla	r3, r4, r3, r3
 800924e:	eb03 0a02 	add.w	sl, r3, r2
 8009252:	9b04      	ldr	r3, [sp, #16]
 8009254:	9a06      	ldr	r2, [sp, #24]
 8009256:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009530 <__kernel_rem_pio2+0x320>
 800925a:	eb03 0802 	add.w	r8, r3, r2
 800925e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009260:	1aa7      	subs	r7, r4, r2
 8009262:	ae20      	add	r6, sp, #128	; 0x80
 8009264:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009268:	2500      	movs	r5, #0
 800926a:	4545      	cmp	r5, r8
 800926c:	dd18      	ble.n	80092a0 <__kernel_rem_pio2+0x90>
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009274:	aa20      	add	r2, sp, #128	; 0x80
 8009276:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009530 <__kernel_rem_pio2+0x320>
 800927a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800927e:	f1c3 0301 	rsb	r3, r3, #1
 8009282:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009286:	9307      	str	r3, [sp, #28]
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	9a04      	ldr	r2, [sp, #16]
 800928c:	4443      	add	r3, r8
 800928e:	429a      	cmp	r2, r3
 8009290:	db2f      	blt.n	80092f2 <__kernel_rem_pio2+0xe2>
 8009292:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009296:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800929a:	462f      	mov	r7, r5
 800929c:	2600      	movs	r6, #0
 800929e:	e01b      	b.n	80092d8 <__kernel_rem_pio2+0xc8>
 80092a0:	42ef      	cmn	r7, r5
 80092a2:	d407      	bmi.n	80092b4 <__kernel_rem_pio2+0xa4>
 80092a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80092a8:	f7f7 f93c 	bl	8000524 <__aeabi_i2d>
 80092ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7da      	b.n	800926a <__kernel_rem_pio2+0x5a>
 80092b4:	ec51 0b18 	vmov	r0, r1, d8
 80092b8:	e7f8      	b.n	80092ac <__kernel_rem_pio2+0x9c>
 80092ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092be:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80092c2:	f7f7 f999 	bl	80005f8 <__aeabi_dmul>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ce:	f7f6 ffdd 	bl	800028c <__adddf3>
 80092d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092d6:	3601      	adds	r6, #1
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	429e      	cmp	r6, r3
 80092dc:	f1a7 0708 	sub.w	r7, r7, #8
 80092e0:	ddeb      	ble.n	80092ba <__kernel_rem_pio2+0xaa>
 80092e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092e6:	3508      	adds	r5, #8
 80092e8:	ecab 7b02 	vstmia	fp!, {d7}
 80092ec:	f108 0801 	add.w	r8, r8, #1
 80092f0:	e7ca      	b.n	8009288 <__kernel_rem_pio2+0x78>
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	aa0c      	add	r2, sp, #48	; 0x30
 80092f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80092fc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80092fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009302:	9c04      	ldr	r4, [sp, #16]
 8009304:	930a      	str	r3, [sp, #40]	; 0x28
 8009306:	ab98      	add	r3, sp, #608	; 0x260
 8009308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800930c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009310:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009314:	f8cd b008 	str.w	fp, [sp, #8]
 8009318:	4625      	mov	r5, r4
 800931a:	2d00      	cmp	r5, #0
 800931c:	dc78      	bgt.n	8009410 <__kernel_rem_pio2+0x200>
 800931e:	ec47 6b10 	vmov	d0, r6, r7
 8009322:	4650      	mov	r0, sl
 8009324:	f000 fbfc 	bl	8009b20 <scalbn>
 8009328:	ec57 6b10 	vmov	r6, r7, d0
 800932c:	2200      	movs	r2, #0
 800932e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009332:	ee10 0a10 	vmov	r0, s0
 8009336:	4639      	mov	r1, r7
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	ec41 0b10 	vmov	d0, r0, r1
 8009340:	f000 fb6e 	bl	8009a20 <floor>
 8009344:	4b7f      	ldr	r3, [pc, #508]	; (8009544 <__kernel_rem_pio2+0x334>)
 8009346:	ec51 0b10 	vmov	r0, r1, d0
 800934a:	2200      	movs	r2, #0
 800934c:	f7f7 f954 	bl	80005f8 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f6 ff96 	bl	8000288 <__aeabi_dsub>
 800935c:	460f      	mov	r7, r1
 800935e:	4606      	mov	r6, r0
 8009360:	f7f7 fbfa 	bl	8000b58 <__aeabi_d2iz>
 8009364:	9007      	str	r0, [sp, #28]
 8009366:	f7f7 f8dd 	bl	8000524 <__aeabi_i2d>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4630      	mov	r0, r6
 8009370:	4639      	mov	r1, r7
 8009372:	f7f6 ff89 	bl	8000288 <__aeabi_dsub>
 8009376:	f1ba 0f00 	cmp.w	sl, #0
 800937a:	4606      	mov	r6, r0
 800937c:	460f      	mov	r7, r1
 800937e:	dd70      	ble.n	8009462 <__kernel_rem_pio2+0x252>
 8009380:	1e62      	subs	r2, r4, #1
 8009382:	ab0c      	add	r3, sp, #48	; 0x30
 8009384:	9d07      	ldr	r5, [sp, #28]
 8009386:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800938a:	f1ca 0118 	rsb	r1, sl, #24
 800938e:	fa40 f301 	asr.w	r3, r0, r1
 8009392:	441d      	add	r5, r3
 8009394:	408b      	lsls	r3, r1
 8009396:	1ac0      	subs	r0, r0, r3
 8009398:	ab0c      	add	r3, sp, #48	; 0x30
 800939a:	9507      	str	r5, [sp, #28]
 800939c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80093a0:	f1ca 0317 	rsb	r3, sl, #23
 80093a4:	fa40 f303 	asr.w	r3, r0, r3
 80093a8:	9302      	str	r3, [sp, #8]
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dd66      	ble.n	800947e <__kernel_rem_pio2+0x26e>
 80093b0:	9b07      	ldr	r3, [sp, #28]
 80093b2:	2200      	movs	r2, #0
 80093b4:	3301      	adds	r3, #1
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	4615      	mov	r5, r2
 80093ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80093be:	4294      	cmp	r4, r2
 80093c0:	f300 8099 	bgt.w	80094f6 <__kernel_rem_pio2+0x2e6>
 80093c4:	f1ba 0f00 	cmp.w	sl, #0
 80093c8:	dd07      	ble.n	80093da <__kernel_rem_pio2+0x1ca>
 80093ca:	f1ba 0f01 	cmp.w	sl, #1
 80093ce:	f000 80a5 	beq.w	800951c <__kernel_rem_pio2+0x30c>
 80093d2:	f1ba 0f02 	cmp.w	sl, #2
 80093d6:	f000 80c1 	beq.w	800955c <__kernel_rem_pio2+0x34c>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d14e      	bne.n	800947e <__kernel_rem_pio2+0x26e>
 80093e0:	4632      	mov	r2, r6
 80093e2:	463b      	mov	r3, r7
 80093e4:	4958      	ldr	r1, [pc, #352]	; (8009548 <__kernel_rem_pio2+0x338>)
 80093e6:	2000      	movs	r0, #0
 80093e8:	f7f6 ff4e 	bl	8000288 <__aeabi_dsub>
 80093ec:	4606      	mov	r6, r0
 80093ee:	460f      	mov	r7, r1
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	d044      	beq.n	800947e <__kernel_rem_pio2+0x26e>
 80093f4:	4650      	mov	r0, sl
 80093f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009538 <__kernel_rem_pio2+0x328>
 80093fa:	f000 fb91 	bl	8009b20 <scalbn>
 80093fe:	4630      	mov	r0, r6
 8009400:	4639      	mov	r1, r7
 8009402:	ec53 2b10 	vmov	r2, r3, d0
 8009406:	f7f6 ff3f 	bl	8000288 <__aeabi_dsub>
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	e036      	b.n	800947e <__kernel_rem_pio2+0x26e>
 8009410:	4b4e      	ldr	r3, [pc, #312]	; (800954c <__kernel_rem_pio2+0x33c>)
 8009412:	2200      	movs	r2, #0
 8009414:	4630      	mov	r0, r6
 8009416:	4639      	mov	r1, r7
 8009418:	f7f7 f8ee 	bl	80005f8 <__aeabi_dmul>
 800941c:	f7f7 fb9c 	bl	8000b58 <__aeabi_d2iz>
 8009420:	f7f7 f880 	bl	8000524 <__aeabi_i2d>
 8009424:	4b4a      	ldr	r3, [pc, #296]	; (8009550 <__kernel_rem_pio2+0x340>)
 8009426:	2200      	movs	r2, #0
 8009428:	4680      	mov	r8, r0
 800942a:	4689      	mov	r9, r1
 800942c:	f7f7 f8e4 	bl	80005f8 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f6 ff26 	bl	8000288 <__aeabi_dsub>
 800943c:	f7f7 fb8c 	bl	8000b58 <__aeabi_d2iz>
 8009440:	9b02      	ldr	r3, [sp, #8]
 8009442:	f843 0b04 	str.w	r0, [r3], #4
 8009446:	3d01      	subs	r5, #1
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	ab70      	add	r3, sp, #448	; 0x1c0
 800944c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	4640      	mov	r0, r8
 8009456:	4649      	mov	r1, r9
 8009458:	f7f6 ff18 	bl	800028c <__adddf3>
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	e75b      	b.n	800931a <__kernel_rem_pio2+0x10a>
 8009462:	d105      	bne.n	8009470 <__kernel_rem_pio2+0x260>
 8009464:	1e63      	subs	r3, r4, #1
 8009466:	aa0c      	add	r2, sp, #48	; 0x30
 8009468:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800946c:	15c3      	asrs	r3, r0, #23
 800946e:	e79b      	b.n	80093a8 <__kernel_rem_pio2+0x198>
 8009470:	4b38      	ldr	r3, [pc, #224]	; (8009554 <__kernel_rem_pio2+0x344>)
 8009472:	2200      	movs	r2, #0
 8009474:	f7f7 fb46 	bl	8000b04 <__aeabi_dcmpge>
 8009478:	2800      	cmp	r0, #0
 800947a:	d139      	bne.n	80094f0 <__kernel_rem_pio2+0x2e0>
 800947c:	9002      	str	r0, [sp, #8]
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f7 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800948a:	2800      	cmp	r0, #0
 800948c:	f000 80b4 	beq.w	80095f8 <__kernel_rem_pio2+0x3e8>
 8009490:	f104 3bff 	add.w	fp, r4, #4294967295
 8009494:	465b      	mov	r3, fp
 8009496:	2200      	movs	r2, #0
 8009498:	9904      	ldr	r1, [sp, #16]
 800949a:	428b      	cmp	r3, r1
 800949c:	da65      	bge.n	800956a <__kernel_rem_pio2+0x35a>
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d07b      	beq.n	800959a <__kernel_rem_pio2+0x38a>
 80094a2:	ab0c      	add	r3, sp, #48	; 0x30
 80094a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80094a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80a0 	beq.w	80095f2 <__kernel_rem_pio2+0x3e2>
 80094b2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009538 <__kernel_rem_pio2+0x328>
 80094b6:	4650      	mov	r0, sl
 80094b8:	f000 fb32 	bl	8009b20 <scalbn>
 80094bc:	4f23      	ldr	r7, [pc, #140]	; (800954c <__kernel_rem_pio2+0x33c>)
 80094be:	ec55 4b10 	vmov	r4, r5, d0
 80094c2:	46d8      	mov	r8, fp
 80094c4:	2600      	movs	r6, #0
 80094c6:	f1b8 0f00 	cmp.w	r8, #0
 80094ca:	f280 80cf 	bge.w	800966c <__kernel_rem_pio2+0x45c>
 80094ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009530 <__kernel_rem_pio2+0x320>
 80094d2:	465f      	mov	r7, fp
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	2f00      	cmp	r7, #0
 80094da:	f2c0 80fd 	blt.w	80096d8 <__kernel_rem_pio2+0x4c8>
 80094de:	ab70      	add	r3, sp, #448	; 0x1c0
 80094e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009558 <__kernel_rem_pio2+0x348>
 80094e4:	ec55 4b18 	vmov	r4, r5, d8
 80094e8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80094ec:	2600      	movs	r6, #0
 80094ee:	e0e5      	b.n	80096bc <__kernel_rem_pio2+0x4ac>
 80094f0:	2302      	movs	r3, #2
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	e75c      	b.n	80093b0 <__kernel_rem_pio2+0x1a0>
 80094f6:	f8db 3000 	ldr.w	r3, [fp]
 80094fa:	b955      	cbnz	r5, 8009512 <__kernel_rem_pio2+0x302>
 80094fc:	b123      	cbz	r3, 8009508 <__kernel_rem_pio2+0x2f8>
 80094fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009502:	f8cb 3000 	str.w	r3, [fp]
 8009506:	2301      	movs	r3, #1
 8009508:	3201      	adds	r2, #1
 800950a:	f10b 0b04 	add.w	fp, fp, #4
 800950e:	461d      	mov	r5, r3
 8009510:	e755      	b.n	80093be <__kernel_rem_pio2+0x1ae>
 8009512:	1acb      	subs	r3, r1, r3
 8009514:	f8cb 3000 	str.w	r3, [fp]
 8009518:	462b      	mov	r3, r5
 800951a:	e7f5      	b.n	8009508 <__kernel_rem_pio2+0x2f8>
 800951c:	1e62      	subs	r2, r4, #1
 800951e:	ab0c      	add	r3, sp, #48	; 0x30
 8009520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009524:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009528:	a90c      	add	r1, sp, #48	; 0x30
 800952a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800952e:	e754      	b.n	80093da <__kernel_rem_pio2+0x1ca>
	...
 800953c:	3ff00000 	.word	0x3ff00000
 8009540:	0800a3b8 	.word	0x0800a3b8
 8009544:	40200000 	.word	0x40200000
 8009548:	3ff00000 	.word	0x3ff00000
 800954c:	3e700000 	.word	0x3e700000
 8009550:	41700000 	.word	0x41700000
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	0800a378 	.word	0x0800a378
 800955c:	1e62      	subs	r2, r4, #1
 800955e:	ab0c      	add	r3, sp, #48	; 0x30
 8009560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009564:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009568:	e7de      	b.n	8009528 <__kernel_rem_pio2+0x318>
 800956a:	a90c      	add	r1, sp, #48	; 0x30
 800956c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009570:	3b01      	subs	r3, #1
 8009572:	430a      	orrs	r2, r1
 8009574:	e790      	b.n	8009498 <__kernel_rem_pio2+0x288>
 8009576:	3301      	adds	r3, #1
 8009578:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800957c:	2900      	cmp	r1, #0
 800957e:	d0fa      	beq.n	8009576 <__kernel_rem_pio2+0x366>
 8009580:	9a08      	ldr	r2, [sp, #32]
 8009582:	18e3      	adds	r3, r4, r3
 8009584:	18a6      	adds	r6, r4, r2
 8009586:	aa20      	add	r2, sp, #128	; 0x80
 8009588:	1c65      	adds	r5, r4, #1
 800958a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	9b02      	ldr	r3, [sp, #8]
 8009592:	42ab      	cmp	r3, r5
 8009594:	da04      	bge.n	80095a0 <__kernel_rem_pio2+0x390>
 8009596:	461c      	mov	r4, r3
 8009598:	e6b5      	b.n	8009306 <__kernel_rem_pio2+0xf6>
 800959a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800959c:	2301      	movs	r3, #1
 800959e:	e7eb      	b.n	8009578 <__kernel_rem_pio2+0x368>
 80095a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095a6:	f7f6 ffbd 	bl	8000524 <__aeabi_i2d>
 80095aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	46b3      	mov	fp, r6
 80095b2:	461c      	mov	r4, r3
 80095b4:	2700      	movs	r7, #0
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	f04f 0900 	mov.w	r9, #0
 80095be:	9b06      	ldr	r3, [sp, #24]
 80095c0:	429f      	cmp	r7, r3
 80095c2:	dd06      	ble.n	80095d2 <__kernel_rem_pio2+0x3c2>
 80095c4:	ab70      	add	r3, sp, #448	; 0x1c0
 80095c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80095ca:	e9c3 8900 	strd	r8, r9, [r3]
 80095ce:	3501      	adds	r5, #1
 80095d0:	e7de      	b.n	8009590 <__kernel_rem_pio2+0x380>
 80095d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80095d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f6 fe51 	bl	800028c <__adddf3>
 80095ea:	3701      	adds	r7, #1
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	e7e5      	b.n	80095be <__kernel_rem_pio2+0x3ae>
 80095f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095f6:	e754      	b.n	80094a2 <__kernel_rem_pio2+0x292>
 80095f8:	ec47 6b10 	vmov	d0, r6, r7
 80095fc:	f1ca 0000 	rsb	r0, sl, #0
 8009600:	f000 fa8e 	bl	8009b20 <scalbn>
 8009604:	ec57 6b10 	vmov	r6, r7, d0
 8009608:	4b9f      	ldr	r3, [pc, #636]	; (8009888 <__kernel_rem_pio2+0x678>)
 800960a:	ee10 0a10 	vmov	r0, s0
 800960e:	2200      	movs	r2, #0
 8009610:	4639      	mov	r1, r7
 8009612:	f7f7 fa77 	bl	8000b04 <__aeabi_dcmpge>
 8009616:	b300      	cbz	r0, 800965a <__kernel_rem_pio2+0x44a>
 8009618:	4b9c      	ldr	r3, [pc, #624]	; (800988c <__kernel_rem_pio2+0x67c>)
 800961a:	2200      	movs	r2, #0
 800961c:	4630      	mov	r0, r6
 800961e:	4639      	mov	r1, r7
 8009620:	f7f6 ffea 	bl	80005f8 <__aeabi_dmul>
 8009624:	f7f7 fa98 	bl	8000b58 <__aeabi_d2iz>
 8009628:	4605      	mov	r5, r0
 800962a:	f7f6 ff7b 	bl	8000524 <__aeabi_i2d>
 800962e:	4b96      	ldr	r3, [pc, #600]	; (8009888 <__kernel_rem_pio2+0x678>)
 8009630:	2200      	movs	r2, #0
 8009632:	f7f6 ffe1 	bl	80005f8 <__aeabi_dmul>
 8009636:	460b      	mov	r3, r1
 8009638:	4602      	mov	r2, r0
 800963a:	4639      	mov	r1, r7
 800963c:	4630      	mov	r0, r6
 800963e:	f7f6 fe23 	bl	8000288 <__aeabi_dsub>
 8009642:	f7f7 fa89 	bl	8000b58 <__aeabi_d2iz>
 8009646:	f104 0b01 	add.w	fp, r4, #1
 800964a:	ab0c      	add	r3, sp, #48	; 0x30
 800964c:	f10a 0a18 	add.w	sl, sl, #24
 8009650:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009654:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009658:	e72b      	b.n	80094b2 <__kernel_rem_pio2+0x2a2>
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f7 fa7b 	bl	8000b58 <__aeabi_d2iz>
 8009662:	ab0c      	add	r3, sp, #48	; 0x30
 8009664:	46a3      	mov	fp, r4
 8009666:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800966a:	e722      	b.n	80094b2 <__kernel_rem_pio2+0x2a2>
 800966c:	ab70      	add	r3, sp, #448	; 0x1c0
 800966e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009672:	ab0c      	add	r3, sp, #48	; 0x30
 8009674:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009678:	f7f6 ff54 	bl	8000524 <__aeabi_i2d>
 800967c:	4622      	mov	r2, r4
 800967e:	462b      	mov	r3, r5
 8009680:	f7f6 ffba 	bl	80005f8 <__aeabi_dmul>
 8009684:	4632      	mov	r2, r6
 8009686:	e9c9 0100 	strd	r0, r1, [r9]
 800968a:	463b      	mov	r3, r7
 800968c:	4620      	mov	r0, r4
 800968e:	4629      	mov	r1, r5
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	f108 38ff 	add.w	r8, r8, #4294967295
 8009698:	4604      	mov	r4, r0
 800969a:	460d      	mov	r5, r1
 800969c:	e713      	b.n	80094c6 <__kernel_rem_pio2+0x2b6>
 800969e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80096a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80096a6:	f7f6 ffa7 	bl	80005f8 <__aeabi_dmul>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f6 fdeb 	bl	800028c <__adddf3>
 80096b6:	3601      	adds	r6, #1
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	9b04      	ldr	r3, [sp, #16]
 80096be:	429e      	cmp	r6, r3
 80096c0:	dc01      	bgt.n	80096c6 <__kernel_rem_pio2+0x4b6>
 80096c2:	45b0      	cmp	r8, r6
 80096c4:	daeb      	bge.n	800969e <__kernel_rem_pio2+0x48e>
 80096c6:	ab48      	add	r3, sp, #288	; 0x120
 80096c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096cc:	e9c3 4500 	strd	r4, r5, [r3]
 80096d0:	3f01      	subs	r7, #1
 80096d2:	f108 0801 	add.w	r8, r8, #1
 80096d6:	e6ff      	b.n	80094d8 <__kernel_rem_pio2+0x2c8>
 80096d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80096da:	2b02      	cmp	r3, #2
 80096dc:	dc0b      	bgt.n	80096f6 <__kernel_rem_pio2+0x4e6>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dc6e      	bgt.n	80097c0 <__kernel_rem_pio2+0x5b0>
 80096e2:	d045      	beq.n	8009770 <__kernel_rem_pio2+0x560>
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	f003 0007 	and.w	r0, r3, #7
 80096ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80096ee:	ecbd 8b02 	vpop	{d8}
 80096f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d1f3      	bne.n	80096e4 <__kernel_rem_pio2+0x4d4>
 80096fc:	ab48      	add	r3, sp, #288	; 0x120
 80096fe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009702:	46d0      	mov	r8, sl
 8009704:	46d9      	mov	r9, fp
 8009706:	f1b9 0f00 	cmp.w	r9, #0
 800970a:	f1a8 0808 	sub.w	r8, r8, #8
 800970e:	dc64      	bgt.n	80097da <__kernel_rem_pio2+0x5ca>
 8009710:	465c      	mov	r4, fp
 8009712:	2c01      	cmp	r4, #1
 8009714:	f1aa 0a08 	sub.w	sl, sl, #8
 8009718:	dc7e      	bgt.n	8009818 <__kernel_rem_pio2+0x608>
 800971a:	2000      	movs	r0, #0
 800971c:	2100      	movs	r1, #0
 800971e:	f1bb 0f01 	cmp.w	fp, #1
 8009722:	f300 8097 	bgt.w	8009854 <__kernel_rem_pio2+0x644>
 8009726:	9b02      	ldr	r3, [sp, #8]
 8009728:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800972c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009730:	2b00      	cmp	r3, #0
 8009732:	f040 8099 	bne.w	8009868 <__kernel_rem_pio2+0x658>
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	e9c3 5600 	strd	r5, r6, [r3]
 800973c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009740:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009744:	e7ce      	b.n	80096e4 <__kernel_rem_pio2+0x4d4>
 8009746:	ab48      	add	r3, sp, #288	; 0x120
 8009748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 fd9c 	bl	800028c <__adddf3>
 8009754:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009758:	f1bb 0f00 	cmp.w	fp, #0
 800975c:	daf3      	bge.n	8009746 <__kernel_rem_pio2+0x536>
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	b113      	cbz	r3, 8009768 <__kernel_rem_pio2+0x558>
 8009762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009766:	4619      	mov	r1, r3
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	e9c3 0100 	strd	r0, r1, [r3]
 800976e:	e7b9      	b.n	80096e4 <__kernel_rem_pio2+0x4d4>
 8009770:	2000      	movs	r0, #0
 8009772:	2100      	movs	r1, #0
 8009774:	e7f0      	b.n	8009758 <__kernel_rem_pio2+0x548>
 8009776:	ab48      	add	r3, sp, #288	; 0x120
 8009778:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 fd84 	bl	800028c <__adddf3>
 8009784:	3c01      	subs	r4, #1
 8009786:	2c00      	cmp	r4, #0
 8009788:	daf5      	bge.n	8009776 <__kernel_rem_pio2+0x566>
 800978a:	9b02      	ldr	r3, [sp, #8]
 800978c:	b1e3      	cbz	r3, 80097c8 <__kernel_rem_pio2+0x5b8>
 800978e:	4602      	mov	r2, r0
 8009790:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009794:	9c01      	ldr	r4, [sp, #4]
 8009796:	e9c4 2300 	strd	r2, r3, [r4]
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80097a2:	f7f6 fd71 	bl	8000288 <__aeabi_dsub>
 80097a6:	ad4a      	add	r5, sp, #296	; 0x128
 80097a8:	2401      	movs	r4, #1
 80097aa:	45a3      	cmp	fp, r4
 80097ac:	da0f      	bge.n	80097ce <__kernel_rem_pio2+0x5be>
 80097ae:	9b02      	ldr	r3, [sp, #8]
 80097b0:	b113      	cbz	r3, 80097b8 <__kernel_rem_pio2+0x5a8>
 80097b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097b6:	4619      	mov	r1, r3
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80097be:	e791      	b.n	80096e4 <__kernel_rem_pio2+0x4d4>
 80097c0:	465c      	mov	r4, fp
 80097c2:	2000      	movs	r0, #0
 80097c4:	2100      	movs	r1, #0
 80097c6:	e7de      	b.n	8009786 <__kernel_rem_pio2+0x576>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	e7e2      	b.n	8009794 <__kernel_rem_pio2+0x584>
 80097ce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80097d2:	f7f6 fd5b 	bl	800028c <__adddf3>
 80097d6:	3401      	adds	r4, #1
 80097d8:	e7e7      	b.n	80097aa <__kernel_rem_pio2+0x59a>
 80097da:	e9d8 4500 	ldrd	r4, r5, [r8]
 80097de:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80097e2:	4620      	mov	r0, r4
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f6 fd4f 	bl	800028c <__adddf3>
 80097ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 fd45 	bl	8000288 <__aeabi_dsub>
 80097fe:	4632      	mov	r2, r6
 8009800:	463b      	mov	r3, r7
 8009802:	f7f6 fd43 	bl	800028c <__adddf3>
 8009806:	ed9d 7b04 	vldr	d7, [sp, #16]
 800980a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800980e:	ed88 7b00 	vstr	d7, [r8]
 8009812:	f109 39ff 	add.w	r9, r9, #4294967295
 8009816:	e776      	b.n	8009706 <__kernel_rem_pio2+0x4f6>
 8009818:	e9da 8900 	ldrd	r8, r9, [sl]
 800981c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009820:	4640      	mov	r0, r8
 8009822:	4632      	mov	r2, r6
 8009824:	463b      	mov	r3, r7
 8009826:	4649      	mov	r1, r9
 8009828:	f7f6 fd30 	bl	800028c <__adddf3>
 800982c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4640      	mov	r0, r8
 8009836:	4649      	mov	r1, r9
 8009838:	f7f6 fd26 	bl	8000288 <__aeabi_dsub>
 800983c:	4632      	mov	r2, r6
 800983e:	463b      	mov	r3, r7
 8009840:	f7f6 fd24 	bl	800028c <__adddf3>
 8009844:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009848:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800984c:	ed8a 7b00 	vstr	d7, [sl]
 8009850:	3c01      	subs	r4, #1
 8009852:	e75e      	b.n	8009712 <__kernel_rem_pio2+0x502>
 8009854:	ab48      	add	r3, sp, #288	; 0x120
 8009856:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fd15 	bl	800028c <__adddf3>
 8009862:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009866:	e75a      	b.n	800971e <__kernel_rem_pio2+0x50e>
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	9a01      	ldr	r2, [sp, #4]
 800986c:	601d      	str	r5, [r3, #0]
 800986e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009872:	605c      	str	r4, [r3, #4]
 8009874:	609f      	str	r7, [r3, #8]
 8009876:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800987a:	60d3      	str	r3, [r2, #12]
 800987c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009880:	6110      	str	r0, [r2, #16]
 8009882:	6153      	str	r3, [r2, #20]
 8009884:	e72e      	b.n	80096e4 <__kernel_rem_pio2+0x4d4>
 8009886:	bf00      	nop
 8009888:	41700000 	.word	0x41700000
 800988c:	3e700000 	.word	0x3e700000

08009890 <__kernel_sin>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	ed2d 8b04 	vpush	{d8-d9}
 8009898:	eeb0 8a41 	vmov.f32	s16, s2
 800989c:	eef0 8a61 	vmov.f32	s17, s3
 80098a0:	ec55 4b10 	vmov	r4, r5, d0
 80098a4:	b083      	sub	sp, #12
 80098a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80098ae:	9001      	str	r0, [sp, #4]
 80098b0:	da06      	bge.n	80098c0 <__kernel_sin+0x30>
 80098b2:	ee10 0a10 	vmov	r0, s0
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f7 f94e 	bl	8000b58 <__aeabi_d2iz>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d051      	beq.n	8009964 <__kernel_sin+0xd4>
 80098c0:	4622      	mov	r2, r4
 80098c2:	462b      	mov	r3, r5
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	4682      	mov	sl, r0
 80098ce:	468b      	mov	fp, r1
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4620      	mov	r0, r4
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7f6 fe8e 	bl	80005f8 <__aeabi_dmul>
 80098dc:	a341      	add	r3, pc, #260	; (adr r3, 80099e4 <__kernel_sin+0x154>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	4680      	mov	r8, r0
 80098e4:	4689      	mov	r9, r1
 80098e6:	4650      	mov	r0, sl
 80098e8:	4659      	mov	r1, fp
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	a33f      	add	r3, pc, #252	; (adr r3, 80099ec <__kernel_sin+0x15c>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fcc8 	bl	8000288 <__aeabi_dsub>
 80098f8:	4652      	mov	r2, sl
 80098fa:	465b      	mov	r3, fp
 80098fc:	f7f6 fe7c 	bl	80005f8 <__aeabi_dmul>
 8009900:	a33c      	add	r3, pc, #240	; (adr r3, 80099f4 <__kernel_sin+0x164>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	f7f6 fcc1 	bl	800028c <__adddf3>
 800990a:	4652      	mov	r2, sl
 800990c:	465b      	mov	r3, fp
 800990e:	f7f6 fe73 	bl	80005f8 <__aeabi_dmul>
 8009912:	a33a      	add	r3, pc, #232	; (adr r3, 80099fc <__kernel_sin+0x16c>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f6 fcb6 	bl	8000288 <__aeabi_dsub>
 800991c:	4652      	mov	r2, sl
 800991e:	465b      	mov	r3, fp
 8009920:	f7f6 fe6a 	bl	80005f8 <__aeabi_dmul>
 8009924:	a337      	add	r3, pc, #220	; (adr r3, 8009a04 <__kernel_sin+0x174>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fcaf 	bl	800028c <__adddf3>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	4606      	mov	r6, r0
 8009932:	460f      	mov	r7, r1
 8009934:	b9eb      	cbnz	r3, 8009972 <__kernel_sin+0xe2>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4650      	mov	r0, sl
 800993c:	4659      	mov	r1, fp
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	a325      	add	r3, pc, #148	; (adr r3, 80099d8 <__kernel_sin+0x148>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	4642      	mov	r2, r8
 800994e:	464b      	mov	r3, r9
 8009950:	f7f6 fe52 	bl	80005f8 <__aeabi_dmul>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	f7f6 fc96 	bl	800028c <__adddf3>
 8009960:	4604      	mov	r4, r0
 8009962:	460d      	mov	r5, r1
 8009964:	ec45 4b10 	vmov	d0, r4, r5
 8009968:	b003      	add	sp, #12
 800996a:	ecbd 8b04 	vpop	{d8-d9}
 800996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009972:	4b1b      	ldr	r3, [pc, #108]	; (80099e0 <__kernel_sin+0x150>)
 8009974:	ec51 0b18 	vmov	r0, r1, d8
 8009978:	2200      	movs	r2, #0
 800997a:	f7f6 fe3d 	bl	80005f8 <__aeabi_dmul>
 800997e:	4632      	mov	r2, r6
 8009980:	ec41 0b19 	vmov	d9, r0, r1
 8009984:	463b      	mov	r3, r7
 8009986:	4640      	mov	r0, r8
 8009988:	4649      	mov	r1, r9
 800998a:	f7f6 fe35 	bl	80005f8 <__aeabi_dmul>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	ec51 0b19 	vmov	r0, r1, d9
 8009996:	f7f6 fc77 	bl	8000288 <__aeabi_dsub>
 800999a:	4652      	mov	r2, sl
 800999c:	465b      	mov	r3, fp
 800999e:	f7f6 fe2b 	bl	80005f8 <__aeabi_dmul>
 80099a2:	ec53 2b18 	vmov	r2, r3, d8
 80099a6:	f7f6 fc6f 	bl	8000288 <__aeabi_dsub>
 80099aa:	a30b      	add	r3, pc, #44	; (adr r3, 80099d8 <__kernel_sin+0x148>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	4606      	mov	r6, r0
 80099b2:	460f      	mov	r7, r1
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7f6 fe1e 	bl	80005f8 <__aeabi_dmul>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f6 fc62 	bl	800028c <__adddf3>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fc5a 	bl	8000288 <__aeabi_dsub>
 80099d4:	e7c4      	b.n	8009960 <__kernel_sin+0xd0>
 80099d6:	bf00      	nop
 80099d8:	55555549 	.word	0x55555549
 80099dc:	3fc55555 	.word	0x3fc55555
 80099e0:	3fe00000 	.word	0x3fe00000
 80099e4:	5acfd57c 	.word	0x5acfd57c
 80099e8:	3de5d93a 	.word	0x3de5d93a
 80099ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80099f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80099f4:	57b1fe7d 	.word	0x57b1fe7d
 80099f8:	3ec71de3 	.word	0x3ec71de3
 80099fc:	19c161d5 	.word	0x19c161d5
 8009a00:	3f2a01a0 	.word	0x3f2a01a0
 8009a04:	1110f8a6 	.word	0x1110f8a6
 8009a08:	3f811111 	.word	0x3f811111

08009a0c <fabs>:
 8009a0c:	ec51 0b10 	vmov	r0, r1, d0
 8009a10:	ee10 2a10 	vmov	r2, s0
 8009a14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a18:	ec43 2b10 	vmov	d0, r2, r3
 8009a1c:	4770      	bx	lr
	...

08009a20 <floor>:
 8009a20:	ec51 0b10 	vmov	r0, r1, d0
 8009a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009a2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009a30:	2e13      	cmp	r6, #19
 8009a32:	ee10 5a10 	vmov	r5, s0
 8009a36:	ee10 8a10 	vmov	r8, s0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	dc32      	bgt.n	8009aa4 <floor+0x84>
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	da14      	bge.n	8009a6c <floor+0x4c>
 8009a42:	a333      	add	r3, pc, #204	; (adr r3, 8009b10 <floor+0xf0>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	f7f6 fc20 	bl	800028c <__adddf3>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f7f7 f862 	bl	8000b18 <__aeabi_dcmpgt>
 8009a54:	b138      	cbz	r0, 8009a66 <floor+0x46>
 8009a56:	2c00      	cmp	r4, #0
 8009a58:	da57      	bge.n	8009b0a <floor+0xea>
 8009a5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009a5e:	431d      	orrs	r5, r3
 8009a60:	d001      	beq.n	8009a66 <floor+0x46>
 8009a62:	4c2d      	ldr	r4, [pc, #180]	; (8009b18 <floor+0xf8>)
 8009a64:	2500      	movs	r5, #0
 8009a66:	4621      	mov	r1, r4
 8009a68:	4628      	mov	r0, r5
 8009a6a:	e025      	b.n	8009ab8 <floor+0x98>
 8009a6c:	4f2b      	ldr	r7, [pc, #172]	; (8009b1c <floor+0xfc>)
 8009a6e:	4137      	asrs	r7, r6
 8009a70:	ea01 0307 	and.w	r3, r1, r7
 8009a74:	4303      	orrs	r3, r0
 8009a76:	d01f      	beq.n	8009ab8 <floor+0x98>
 8009a78:	a325      	add	r3, pc, #148	; (adr r3, 8009b10 <floor+0xf0>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fc05 	bl	800028c <__adddf3>
 8009a82:	2200      	movs	r2, #0
 8009a84:	2300      	movs	r3, #0
 8009a86:	f7f7 f847 	bl	8000b18 <__aeabi_dcmpgt>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d0eb      	beq.n	8009a66 <floor+0x46>
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	bfbe      	ittt	lt
 8009a92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009a96:	fa43 f606 	asrlt.w	r6, r3, r6
 8009a9a:	19a4      	addlt	r4, r4, r6
 8009a9c:	ea24 0407 	bic.w	r4, r4, r7
 8009aa0:	2500      	movs	r5, #0
 8009aa2:	e7e0      	b.n	8009a66 <floor+0x46>
 8009aa4:	2e33      	cmp	r6, #51	; 0x33
 8009aa6:	dd0b      	ble.n	8009ac0 <floor+0xa0>
 8009aa8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009aac:	d104      	bne.n	8009ab8 <floor+0x98>
 8009aae:	ee10 2a10 	vmov	r2, s0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	f7f6 fbea 	bl	800028c <__adddf3>
 8009ab8:	ec41 0b10 	vmov	d0, r0, r1
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac8:	fa23 f707 	lsr.w	r7, r3, r7
 8009acc:	4207      	tst	r7, r0
 8009ace:	d0f3      	beq.n	8009ab8 <floor+0x98>
 8009ad0:	a30f      	add	r3, pc, #60	; (adr r3, 8009b10 <floor+0xf0>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fbd9 	bl	800028c <__adddf3>
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	f7f7 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d0bf      	beq.n	8009a66 <floor+0x46>
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	da02      	bge.n	8009af0 <floor+0xd0>
 8009aea:	2e14      	cmp	r6, #20
 8009aec:	d103      	bne.n	8009af6 <floor+0xd6>
 8009aee:	3401      	adds	r4, #1
 8009af0:	ea25 0507 	bic.w	r5, r5, r7
 8009af4:	e7b7      	b.n	8009a66 <floor+0x46>
 8009af6:	2301      	movs	r3, #1
 8009af8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009afc:	fa03 f606 	lsl.w	r6, r3, r6
 8009b00:	4435      	add	r5, r6
 8009b02:	4545      	cmp	r5, r8
 8009b04:	bf38      	it	cc
 8009b06:	18e4      	addcc	r4, r4, r3
 8009b08:	e7f2      	b.n	8009af0 <floor+0xd0>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	462c      	mov	r4, r5
 8009b0e:	e7aa      	b.n	8009a66 <floor+0x46>
 8009b10:	8800759c 	.word	0x8800759c
 8009b14:	7e37e43c 	.word	0x7e37e43c
 8009b18:	bff00000 	.word	0xbff00000
 8009b1c:	000fffff 	.word	0x000fffff

08009b20 <scalbn>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	ec55 4b10 	vmov	r4, r5, d0
 8009b26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	b99a      	cbnz	r2, 8009b58 <scalbn+0x38>
 8009b30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b34:	4323      	orrs	r3, r4
 8009b36:	d036      	beq.n	8009ba6 <scalbn+0x86>
 8009b38:	4b39      	ldr	r3, [pc, #228]	; (8009c20 <scalbn+0x100>)
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	ee10 0a10 	vmov	r0, s0
 8009b40:	2200      	movs	r2, #0
 8009b42:	f7f6 fd59 	bl	80005f8 <__aeabi_dmul>
 8009b46:	4b37      	ldr	r3, [pc, #220]	; (8009c24 <scalbn+0x104>)
 8009b48:	429e      	cmp	r6, r3
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	da10      	bge.n	8009b72 <scalbn+0x52>
 8009b50:	a32b      	add	r3, pc, #172	; (adr r3, 8009c00 <scalbn+0xe0>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	e03a      	b.n	8009bce <scalbn+0xae>
 8009b58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009b5c:	428a      	cmp	r2, r1
 8009b5e:	d10c      	bne.n	8009b7a <scalbn+0x5a>
 8009b60:	ee10 2a10 	vmov	r2, s0
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f6 fb90 	bl	800028c <__adddf3>
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	460d      	mov	r5, r1
 8009b70:	e019      	b.n	8009ba6 <scalbn+0x86>
 8009b72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009b76:	460b      	mov	r3, r1
 8009b78:	3a36      	subs	r2, #54	; 0x36
 8009b7a:	4432      	add	r2, r6
 8009b7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009b80:	428a      	cmp	r2, r1
 8009b82:	dd08      	ble.n	8009b96 <scalbn+0x76>
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	a120      	add	r1, pc, #128	; (adr r1, 8009c08 <scalbn+0xe8>)
 8009b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b8c:	da1c      	bge.n	8009bc8 <scalbn+0xa8>
 8009b8e:	a120      	add	r1, pc, #128	; (adr r1, 8009c10 <scalbn+0xf0>)
 8009b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b94:	e018      	b.n	8009bc8 <scalbn+0xa8>
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	dd08      	ble.n	8009bac <scalbn+0x8c>
 8009b9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ba2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ba6:	ec45 4b10 	vmov	d0, r4, r5
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009bb0:	da19      	bge.n	8009be6 <scalbn+0xc6>
 8009bb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009bb6:	429e      	cmp	r6, r3
 8009bb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009bbc:	dd0a      	ble.n	8009bd4 <scalbn+0xb4>
 8009bbe:	a112      	add	r1, pc, #72	; (adr r1, 8009c08 <scalbn+0xe8>)
 8009bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e2      	bne.n	8009b8e <scalbn+0x6e>
 8009bc8:	a30f      	add	r3, pc, #60	; (adr r3, 8009c08 <scalbn+0xe8>)
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	e7cb      	b.n	8009b6c <scalbn+0x4c>
 8009bd4:	a10a      	add	r1, pc, #40	; (adr r1, 8009c00 <scalbn+0xe0>)
 8009bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0b8      	beq.n	8009b50 <scalbn+0x30>
 8009bde:	a10e      	add	r1, pc, #56	; (adr r1, 8009c18 <scalbn+0xf8>)
 8009be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be4:	e7b4      	b.n	8009b50 <scalbn+0x30>
 8009be6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bea:	3236      	adds	r2, #54	; 0x36
 8009bec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <scalbn+0x108>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	e7e8      	b.n	8009bce <scalbn+0xae>
 8009bfc:	f3af 8000 	nop.w
 8009c00:	c2f8f359 	.word	0xc2f8f359
 8009c04:	01a56e1f 	.word	0x01a56e1f
 8009c08:	8800759c 	.word	0x8800759c
 8009c0c:	7e37e43c 	.word	0x7e37e43c
 8009c10:	8800759c 	.word	0x8800759c
 8009c14:	fe37e43c 	.word	0xfe37e43c
 8009c18:	c2f8f359 	.word	0xc2f8f359
 8009c1c:	81a56e1f 	.word	0x81a56e1f
 8009c20:	43500000 	.word	0x43500000
 8009c24:	ffff3cb0 	.word	0xffff3cb0
 8009c28:	3c900000 	.word	0x3c900000

08009c2c <_init>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr

08009c38 <_fini>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	bf00      	nop
 8009c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3e:	bc08      	pop	{r3}
 8009c40:	469e      	mov	lr, r3
 8009c42:	4770      	bx	lr
