
DACWaveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000945c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  080095f0  080095f0  000195f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf8  08009cf8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d00  08009d00  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000203c  20000204  08009f0c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002240  08009f0c  00022240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dde0  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002182  00000000  00000000  0002e014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ff7  00000000  00000000  00031910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0ca  00000000  00000000  00053907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb3b  00000000  00000000  000609d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  0012c560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095d4 	.word	0x080095d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	080095d4 	.word	0x080095d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800100c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001014:	e000      	b.n	8001018 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001016:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001022:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f000 fc91 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f823 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 f921 	bl	8001290 <MX_GPIO_Init>
  MX_DMA_Init();
 800104e:	f000 f8ff 	bl	8001250 <MX_DMA_Init>
  MX_DAC_Init();
 8001052:	f000 f887 	bl	8001164 <MX_DAC_Init>
  MX_TIM2_Init();
 8001056:	f000 f8af 	bl	80011b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <main+0x48>)
 800105c:	f002 f9a6 	bl	80033ac <HAL_TIM_Base_Start>

  //HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047);
  sinval();
 8001060:	f000 f9c8 	bl	80013f4 <sinval>
  noise();
 8001064:	f000 f99c 	bl	80013a0 <noise>
  sum_signal();
 8001068:	f000 f972 	bl	8001350 <sum_signal>
  conv_signal();
 800106c:	f000 fa12 	bl	8001494 <conv_signal>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, conv ,N, DAC_ALIGN_12B_R); //sineWaveform
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <main+0x4c>)
 800107a:	2100      	movs	r1, #0
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <main+0x50>)
 800107e:	f000 fe19 	bl	8001cb4 <HAL_DAC_Start_DMA>
  //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001082:	e7fe      	b.n	8001082 <main+0x46>
 8001084:	200021e4 	.word	0x200021e4
 8001088:	20000eac 	.word	0x20000eac
 800108c:	20001b8c 	.word	0x20001b8c

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fdde 	bl	8003c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a27      	ldr	r2, [pc, #156]	; (800115c <SystemClock_Config+0xcc>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <SystemClock_Config+0xd0>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001104:	2354      	movs	r3, #84	; 0x54
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fcb9 	bl	8002a8c <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001120:	f000 fa32 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001130:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001136:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f001 ff1a 	bl	8002f7c <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800114e:	f000 fa1b 	bl	8001588 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	; 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DAC_Init+0x50>)
 8001176:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_DAC_Init+0x4c>)
 800117a:	f000 fd78 	bl	8001c6e <HAL_DAC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001184:	f000 fa00 	bl	8001588 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001188:	2324      	movs	r3, #36	; 0x24
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001198:	f000 fe78 	bl	8001e8c <HAL_DAC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011a2:	f000 f9f1 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20001b8c 	.word	0x20001b8c
 80011b4:	40007400 	.word	0x40007400

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM2_Init+0x94>)
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM2_Init+0x94>)
 80011de:	2229      	movs	r2, #41	; 0x29
 80011e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM2_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM2_Init+0x94>)
 80011ea:	2263      	movs	r2, #99	; 0x63
 80011ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_TIM2_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <MX_TIM2_Init+0x94>)
 80011fc:	f002 f886 	bl	800330c <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001206:	f000 f9bf 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM2_Init+0x94>)
 8001218:	f002 fa38 	bl	800368c <HAL_TIM_ConfigClockSource>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f9b1 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001226:	2320      	movs	r3, #32
 8001228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM2_Init+0x94>)
 8001234:	f002 fc5a 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 f9a3 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200021e4 	.word	0x200021e4

08001250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_DMA_Init+0x3c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <MX_DMA_Init+0x3c>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_DMA_Init+0x3c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2010      	movs	r0, #16
 8001278:	f000 fcc3 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800127c:	2010      	movs	r0, #16
 800127e:	f000 fcdc 	bl	8001c3a <HAL_NVIC_EnableIRQ>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a25      	ldr	r2, [pc, #148]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_GPIO_Init+0xb4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_GPIO_Init+0xb8>)
 8001302:	f001 fba9 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001306:	2301      	movs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_GPIO_Init+0xbc>)
 800131a:	f001 fa01 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800131e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4619      	mov	r1, r3
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_GPIO_Init+0xb8>)
 8001338:	f001 f9f2 	bl	8002720 <HAL_GPIO_Init>

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40020000 	.word	0x40020000

08001350 <sum_signal>:

/* USER CODE BEGIN 4 */

void sum_signal()
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
	for(int i = 0; i < N; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	e00f      	b.n	800137c <sum_signal+0x2c>
		{
			sum_noise[i] = val_noise[i] + val[i];
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <sum_signal+0x44>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <sum_signal+0x48>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136c:	441a      	add	r2, r3
 800136e:	490b      	ldr	r1, [pc, #44]	; (800139c <sum_signal+0x4c>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N; i++)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001382:	dbeb      	blt.n	800135c <sum_signal+0xc>
			//printf("%d\n", sum_noise[i]);
		}

}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000086c 	.word	0x2000086c
 8001398:	2000154c 	.word	0x2000154c
 800139c:	20001ba0 	.word	0x20001ba0

080013a0 <noise>:

void noise()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < N; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e015      	b.n	80013d8 <noise+0x38>
			val_noise[i] = (rand() % 5)*((0xFF+1)/2);
 80013ac:	f003 faf2 	bl	8004994 <rand>
 80013b0:	4601      	mov	r1, r0
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <noise+0x4c>)
 80013b4:	fb83 2301 	smull	r2, r3, r3, r1
 80013b8:	105a      	asrs	r2, r3, #1
 80013ba:	17cb      	asrs	r3, r1, #31
 80013bc:	1ad2      	subs	r2, r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	1aca      	subs	r2, r1, r3
 80013c6:	01d3      	lsls	r3, r2, #7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <noise+0x50>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N; i++)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013de:	dbe5      	blt.n	80013ac <noise+0xc>

}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	66666667 	.word	0x66666667
 80013f0:	2000086c 	.word	0x2000086c

080013f4 <sinval>:

void sinval()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < N; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	e036      	b.n	800146e <sinval+0x7a>
		val[i] = ((sin(i*pi*2/N)+1)*((0xFFF+1)/2));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001480 <sinval+0x8c>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001416:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001484 <sinval+0x90>
 800141a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800141e:	ee16 0a90 	vmov	r0, s13
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f007 f89b 	bl	8008568 <sin>
 8001432:	ec51 0b10 	vmov	r0, r1, d0
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <sinval+0x94>)
 800143c:	f7fe ff26 	bl	800028c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <sinval+0x98>)
 800144e:	f7ff f8d3 	bl	80005f8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fba5 	bl	8000ba8 <__aeabi_d2uiz>
 800145e:	4602      	mov	r2, r0
 8001460:	490b      	ldr	r1, [pc, #44]	; (8001490 <sinval+0x9c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N; i++)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001474:	dbc4      	blt.n	8001400 <sinval+0xc>

}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40490fd8 	.word	0x40490fd8
 8001484:	43c80000 	.word	0x43c80000
 8001488:	3ff00000 	.word	0x3ff00000
 800148c:	40a00000 	.word	0x40a00000
 8001490:	2000154c 	.word	0x2000154c

08001494 <conv_signal>:

void conv_signal()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	for(int i =0; i < N; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e041      	b.n	8001524 <conv_signal+0x90>
		{
			for(int j =0 ; j < 9; j++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	e022      	b.n	80014ec <conv_signal+0x58>
				tmp[i] = tmp[i] + h[j]*(float)sum_noise[i-j];
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <conv_signal+0xa4>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <conv_signal+0xa8>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <conv_signal+0xac>)
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <conv_signal+0xa4>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	edc3 7a00 	vstr	s15, [r3]
			for(int j =0 ; j < 9; j++)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	ddd9      	ble.n	80014a6 <conv_signal+0x12>
			conv[i] = (uint32_t)tmp[i];
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <conv_signal+0xa4>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001502:	ee17 1a90 	vmov	r1, s15
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <conv_signal+0xb0>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			printf("%d\n", conv[i]);
 800150e:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <conv_signal+0xb0>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	4619      	mov	r1, r3
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <conv_signal+0xb4>)
 800151a:	f003 fa23 	bl	8004964 <iprintf>
	for(int i =0; i < N; i++)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800152a:	dbb9      	blt.n	80014a0 <conv_signal+0xc>
		}
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000022c 	.word	0x2000022c
 800153c:	20000000 	.word	0x20000000
 8001540:	20001ba0 	.word	0x20001ba0
 8001544:	20000eac 	.word	0x20000eac
 8001548:	080095f0 	.word	0x080095f0

0800154c <_write>:

int _write(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e009      	b.n	8001576 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	60ba      	str	r2, [r7, #8]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fd3e 	bl	8000fec <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbf1      	blt.n	8001562 <_write+0x16>
  return len;
 800157e:	687b      	ldr	r3, [r7, #4]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <HAL_DAC_MspInit+0xdc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d158      	bne.n	80016b8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_DAC_MspInit+0xe0>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_DAC_MspInit+0xe0>)
 8001610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_DAC_MspInit+0xe0>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_DAC_MspInit+0xe0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <HAL_DAC_MspInit+0xe0>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_DAC_MspInit+0xe0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800163e:	2310      	movs	r3, #16
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <HAL_DAC_MspInit+0xe4>)
 8001652:	f001 f865 	bl	8002720 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_DAC_MspInit+0xec>)
 800165a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 800165e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001662:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 800167a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 8001682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001686:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 800168a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 800169e:	f000 fccf 	bl	8002040 <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80016a8:	f7ff ff6e 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_DAC_MspInit+0xe8>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40007400 	.word	0x40007400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	200014ec 	.word	0x200014ec
 80016d0:	40026088 	.word	0x40026088

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d115      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_TIM_Base_MspInit+0x48>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_TIM_Base_MspInit+0x48>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0x48>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	201c      	movs	r0, #28
 8001708:	f000 fa7b 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800170c:	201c      	movs	r0, #28
 800170e:	f000 fa94 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f94e 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Stream5_IRQHandler+0x10>)
 800177a:	f000 fd67 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200014ec 	.word	0x200014ec

08001788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM2_IRQHandler+0x10>)
 800178e:	f001 fe75 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200021e4 	.word	0x200021e4

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b6:	f002 fa29 	bl	8003c0c <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
	return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
	}

return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_close>:
	}
	return len;
}

int _close(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001842:	605a      	str	r2, [r3, #4]
	return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_isatty>:

int _isatty(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f002 f9aa 	bl	8003c0c <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20020000 	.word	0x20020000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	20000220 	.word	0x20000220
 80018ec:	20002240 	.word	0x20002240

080018f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193e:	f7ff ffd7 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f002 f969 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fb79 	bl	800103c <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800194c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001958:	08009d08 	.word	0x08009d08
  ldr r2, =_sbss
 800195c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001960:	20002240 	.word	0x20002240

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_Init+0x40>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_Init+0x40>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x40>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f92b 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fdfa 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f943 	bl	8001c56 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f90b 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000024 	.word	0x20000024
 8001a04:	2000002c 	.word	0x2000002c
 8001a08:	20000028 	.word	0x20000028

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000002c 	.word	0x2000002c
 8001a30:	2000222c 	.word	0x2000222c

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000222c 	.word	0x2000222c

08001a4c <__NVIC_SetPriorityGrouping>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff3e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff31 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e014      	b.n	8001caa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	791b      	ldrb	r3, [r3, #4]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fca7 	bl	80015e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DAC_Start_DMA+0x22>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0ab      	b.n	8001e2e <HAL_DAC_Start_DMA+0x17a>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d12f      	bne.n	8001d48 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_DAC_Start_DMA+0x184>)
 8001cee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_DAC_Start_DMA+0x188>)
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_DAC_Start_DMA+0x18c>)
 8001cfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d013      	beq.n	8001d3e <HAL_DAC_Start_DMA+0x8a>
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d845      	bhi.n	8001da8 <HAL_DAC_Start_DMA+0xf4>
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_DAC_Start_DMA+0x76>
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d005      	beq.n	8001d34 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001d28:	e03e      	b.n	8001da8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	613b      	str	r3, [r7, #16]
        break;
 8001d32:	e03c      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	613b      	str	r3, [r7, #16]
        break;
 8001d3c:	e037      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3310      	adds	r3, #16
 8001d44:	613b      	str	r3, [r7, #16]
        break;
 8001d46:	e032      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a3d      	ldr	r2, [pc, #244]	; (8001e44 <HAL_DAC_Start_DMA+0x190>)
 8001d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <HAL_DAC_Start_DMA+0x194>)
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a3b      	ldr	r2, [pc, #236]	; (8001e4c <HAL_DAC_Start_DMA+0x198>)
 8001d5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d013      	beq.n	8001d9e <HAL_DAC_Start_DMA+0xea>
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d817      	bhi.n	8001dac <HAL_DAC_Start_DMA+0xf8>
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_DAC_Start_DMA+0xd6>
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d005      	beq.n	8001d94 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001d88:	e010      	b.n	8001dac <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3314      	adds	r3, #20
 8001d90:	613b      	str	r3, [r7, #16]
        break;
 8001d92:	e00c      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	613b      	str	r3, [r7, #16]
        break;
 8001d9c:	e007      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	331c      	adds	r3, #28
 8001da4:	613b      	str	r3, [r7, #16]
        break;
 8001da6:	e002      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
        break;
 8001da8:	bf00      	nop
 8001daa:	e000      	b.n	8001dae <HAL_DAC_Start_DMA+0xfa>
        break;
 8001dac:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6898      	ldr	r0, [r3, #8]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	f000 f9e5 	bl	800219c <HAL_DMA_Start_IT>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
 8001dd6:	e010      	b.n	8001dfa <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001de6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68d8      	ldr	r0, [r3, #12]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	f000 f9d3 	bl	800219c <HAL_DMA_Start_IT>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e005      	b.n	8001e2c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f043 0204 	orr.w	r2, r3, #4
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	08001f2b 	.word	0x08001f2b
 8001e3c:	08001f4d 	.word	0x08001f4d
 8001e40:	08001f69 	.word	0x08001f69
 8001e44:	08001fd3 	.word	0x08001fd3
 8001e48:	08001ff5 	.word	0x08001ff5
 8001e4c:	08002011 	.word	0x08002011

08001e50 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	795b      	ldrb	r3, [r3, #5]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DAC_ConfigChannel+0x18>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e03c      	b.n	8001f1e <HAL_DAC_ConfigChannel+0x92>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2202      	movs	r2, #2
 8001eae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6819      	ldr	r1, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	22c0      	movs	r2, #192	; 0xc0
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff ff89 	bl	8001e50 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	711a      	strb	r2, [r3, #4]
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff ff82 	bl	8001e64 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f043 0204 	orr.w	r2, r3, #4
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff ff78 	bl	8001e78 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	711a      	strb	r2, [r3, #4]
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ffd8 	bl	8001f96 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	711a      	strb	r2, [r3, #4]
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff ffd1 	bl	8001faa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f043 0204 	orr.w	r2, r3, #4
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff ffc7 	bl	8001fbe <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	711a      	strb	r2, [r3, #4]
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fcf2 	bl	8001a34 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e099      	b.n	8002190 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207c:	e00f      	b.n	800209e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207e:	f7ff fcd9 	bl	8001a34 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b05      	cmp	r3, #5
 800208a:	d908      	bls.n	800209e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2220      	movs	r2, #32
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e078      	b.n	8002190 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e8      	bne.n	800207e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_DMA_Init+0x158>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d107      	bne.n	8002108 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	4313      	orrs	r3, r2
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f023 0307 	bic.w	r3, r3, #7
 800211e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2b04      	cmp	r3, #4
 8002130:	d117      	bne.n	8002162 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa6f 	bl	8002628 <DMA_CheckFifoParam>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2240      	movs	r2, #64	; 0x40
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800215e:	2301      	movs	r3, #1
 8002160:	e016      	b.n	8002190 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fa26 	bl	80025bc <DMA_CalcBaseAndBitshift>
 8002170:	4603      	mov	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	223f      	movs	r2, #63	; 0x3f
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	f010803f 	.word	0xf010803f

0800219c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Start_IT+0x26>
 80021be:	2302      	movs	r3, #2
 80021c0:	e040      	b.n	8002244 <HAL_DMA_Start_IT+0xa8>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d12f      	bne.n	8002236 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f9b8 	bl	8002560 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	223f      	movs	r2, #63	; 0x3f
 80021f6:	409a      	lsls	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0216 	orr.w	r2, r2, #22
 800220a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0208 	orr.w	r2, r2, #8
 8002222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e005      	b.n	8002242 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002258:	4b92      	ldr	r3, [pc, #584]	; (80024a4 <HAL_DMA_IRQHandler+0x258>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_DMA_IRQHandler+0x25c>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a9b      	lsrs	r3, r3, #10
 8002264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2208      	movs	r2, #8
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01a      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2208      	movs	r2, #8
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2204      	movs	r2, #4
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00b      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	2204      	movs	r2, #4
 8002312:	409a      	lsls	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2210      	movs	r2, #16
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d043      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2210      	movs	r2, #16
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d018      	beq.n	800238e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d024      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e01f      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e016      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0208 	bic.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2220      	movs	r2, #32
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 808e 	beq.w	80024ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8086 	beq.w	80024ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2220      	movs	r2, #32
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d136      	bne.n	8002464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0216 	bic.w	r2, r2, #22
 8002404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <HAL_DMA_IRQHandler+0x1da>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	223f      	movs	r2, #63	; 0x3f
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002456:	2b00      	cmp	r3, #0
 8002458:	d07d      	beq.n	8002556 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
        }
        return;
 8002462:	e078      	b.n	8002556 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01c      	beq.n	80024ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	2b00      	cmp	r3, #0
 8002486:	d030      	beq.n	80024ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e02b      	b.n	80024ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d027      	beq.n	80024ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e022      	b.n	80024ea <HAL_DMA_IRQHandler+0x29e>
 80024a4:	20000024 	.word	0x20000024
 80024a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0210 	bic.w	r2, r2, #16
 80024c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d032      	beq.n	8002558 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d022      	beq.n	8002544 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2205      	movs	r2, #5
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	429a      	cmp	r2, r3
 8002520:	d307      	bcc.n	8002532 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f2      	bne.n	8002516 <HAL_DMA_IRQHandler+0x2ca>
 8002530:	e000      	b.n	8002534 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002532:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
 8002554:	e000      	b.n	8002558 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002556:	bf00      	nop
    }
  }
}
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800257c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d108      	bne.n	80025a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800259e:	e007      	b.n	80025b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3b10      	subs	r3, #16
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <DMA_CalcBaseAndBitshift+0x64>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <DMA_CalcBaseAndBitshift+0x68>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d909      	bls.n	80025fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	1d1a      	adds	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58
 80025fc:	e007      	b.n	800260e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	aaaaaaab 	.word	0xaaaaaaab
 8002624:	08009604 	.word	0x08009604

08002628 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d11f      	bne.n	8002682 <DMA_CheckFifoParam+0x5a>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d856      	bhi.n	80026f6 <DMA_CheckFifoParam+0xce>
 8002648:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <DMA_CheckFifoParam+0x28>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	08002661 	.word	0x08002661
 8002654:	08002673 	.word	0x08002673
 8002658:	08002661 	.word	0x08002661
 800265c:	080026f7 	.word	0x080026f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d046      	beq.n	80026fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002670:	e043      	b.n	80026fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800267a:	d140      	bne.n	80026fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e03d      	b.n	80026fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d121      	bne.n	80026d0 <DMA_CheckFifoParam+0xa8>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d837      	bhi.n	8002702 <DMA_CheckFifoParam+0xda>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <DMA_CheckFifoParam+0x70>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026a9 	.word	0x080026a9
 800269c:	080026af 	.word	0x080026af
 80026a0:	080026a9 	.word	0x080026a9
 80026a4:	080026c1 	.word	0x080026c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e030      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d025      	beq.n	8002706 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026be:	e022      	b.n	8002706 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ce:	e01c      	b.n	800270a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d903      	bls.n	80026de <DMA_CheckFifoParam+0xb6>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d003      	beq.n	80026e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026dc:	e018      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
      break;
 80026e2:	e015      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00e      	beq.n	800270e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e00b      	b.n	800270e <DMA_CheckFifoParam+0xe6>
      break;
 80026f6:	bf00      	nop
 80026f8:	e00a      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
 80026fc:	e008      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 80026fe:	bf00      	nop
 8002700:	e006      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
 8002704:	e004      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e002      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;   
 800270a:	bf00      	nop
 800270c:	e000      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
    }
  } 
  
  return status; 
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e16b      	b.n	8002a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 815a 	bne.w	8002a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80b4 	beq.w	8002a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <HAL_GPIO_Init+0x30c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a5f      	ldr	r2, [pc, #380]	; (8002a2c <HAL_GPIO_Init+0x30c>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_GPIO_Init+0x30c>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a5b      	ldr	r2, [pc, #364]	; (8002a30 <HAL_GPIO_Init+0x310>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <HAL_GPIO_Init+0x314>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <HAL_GPIO_Init+0x226>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <HAL_GPIO_Init+0x318>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x222>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <HAL_GPIO_Init+0x31c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x21e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <HAL_GPIO_Init+0x320>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x21a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_GPIO_Init+0x324>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x216>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_GPIO_Init+0x328>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x212>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x32c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_GPIO_Init+0x330>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x20a>
 8002926:	2307      	movs	r3, #7
 8002928:	e00e      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800292a:	2308      	movs	r3, #8
 800292c:	e00c      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800292e:	2306      	movs	r3, #6
 8002930:	e00a      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002932:	2305      	movs	r3, #5
 8002934:	e008      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002936:	2304      	movs	r3, #4
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800293a:	2303      	movs	r3, #3
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002946:	2300      	movs	r3, #0
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f002 0203 	and.w	r2, r2, #3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4093      	lsls	r3, r2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002958:	4935      	ldr	r1, [pc, #212]	; (8002a30 <HAL_GPIO_Init+0x310>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_GPIO_Init+0x334>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298a:	4a32      	ldr	r2, [pc, #200]	; (8002a54 <HAL_GPIO_Init+0x334>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_GPIO_Init+0x334>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b4:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_GPIO_Init+0x334>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3301      	adds	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	f67f ae90 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40021400 	.word	0x40021400
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	40021c00 	.word	0x40021c00
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e264      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d075      	beq.n	8002b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aaa:	4ba3      	ldr	r3, [pc, #652]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab6:	4ba0      	ldr	r3, [pc, #640]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d112      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac2:	4b9d      	ldr	r3, [pc, #628]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ace:	d10b      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	4b99      	ldr	r3, [pc, #612]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d05b      	beq.n	8002b94 <HAL_RCC_OscConfig+0x108>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d157      	bne.n	8002b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e23f      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x74>
 8002af2:	4b91      	ldr	r3, [pc, #580]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a90      	ldr	r2, [pc, #576]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e01d      	b.n	8002b3c <HAL_RCC_OscConfig+0xb0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x98>
 8002b0a:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a8a      	ldr	r2, [pc, #552]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a87      	ldr	r2, [pc, #540]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0xb0>
 8002b24:	4b84      	ldr	r3, [pc, #528]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a83      	ldr	r2, [pc, #524]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b81      	ldr	r3, [pc, #516]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a80      	ldr	r2, [pc, #512]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe ff76 	bl	8001a34 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe ff72 	bl	8001a34 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e204      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0xc0>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe ff62 	bl	8001a34 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe ff5e 	bl	8001a34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1f0      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0xe8>
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x152>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1c4      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4952      	ldr	r1, [pc, #328]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	e03a      	b.n	8002c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <HAL_RCC_OscConfig+0x2b0>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe ff17 	bl	8001a34 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe ff13 	bl	8001a34 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e1a5      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4940      	ldr	r1, [pc, #256]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
 8002c3c:	e015      	b.n	8002c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_OscConfig+0x2b0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fef6 	bl	8001a34 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fef2 	bl	8001a34 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e184      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d030      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7e:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_RCC_OscConfig+0x2b4>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fed6 	bl	8001a34 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fed2 	bl	8001a34 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e164      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x200>
 8002caa:	e015      	b.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x2b4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe febf 	bl	8001a34 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe febb 	bl	8001a34 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e14d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a0 	beq.w	8002e26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x2b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d121      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_RCC_OscConfig+0x2b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_RCC_OscConfig+0x2b8>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fe81 	bl	8001a34 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e011      	b.n	8002d5a <HAL_RCC_OscConfig+0x2ce>
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470000 	.word	0x42470000
 8002d40:	42470e80 	.word	0x42470e80
 8002d44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe fe74 	bl	8001a34 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e106      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_OscConfig+0x4e4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
 8002d6e:	4b81      	ldr	r3, [pc, #516]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a80      	ldr	r2, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	e01c      	b.n	8002db6 <HAL_RCC_OscConfig+0x32a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x312>
 8002d84:	4b7b      	ldr	r3, [pc, #492]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4a7a      	ldr	r2, [pc, #488]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d90:	4b78      	ldr	r3, [pc, #480]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a77      	ldr	r2, [pc, #476]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	e00b      	b.n	8002db6 <HAL_RCC_OscConfig+0x32a>
 8002d9e:	4b75      	ldr	r3, [pc, #468]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a74      	ldr	r2, [pc, #464]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
 8002daa:	4b72      	ldr	r3, [pc, #456]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a71      	ldr	r2, [pc, #452]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d015      	beq.n	8002dea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fe39 	bl	8001a34 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fe fe35 	bl	8001a34 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0c5      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ee      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x33a>
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fe fe23 	bl	8001a34 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fe1f 	bl	8001a34 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0af      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ee      	bne.n	8002df2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b56      	ldr	r3, [pc, #344]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a55      	ldr	r2, [pc, #340]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 809b 	beq.w	8002f66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d141      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e44:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x4ec>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fdf3 	bl	8001a34 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e52:	f7fe fdef 	bl	8001a34 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e081      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e64:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	019b      	lsls	r3, r3, #6
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	061b      	lsls	r3, r3, #24
 8002e94:	4937      	ldr	r1, [pc, #220]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_RCC_OscConfig+0x4ec>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fdc8 	bl	8001a34 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fdc4 	bl	8001a34 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e056      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x41c>
 8002ec6:	e04e      	b.n	8002f66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_OscConfig+0x4ec>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fdb1 	bl	8001a34 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fdad 	bl	8001a34 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03f      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x44a>
 8002ef4:	e037      	b.n	8002f66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e032      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_RCC_OscConfig+0x4e8>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d028      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d121      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d11a      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d111      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40007000 	.word	0x40007000
 8002f74:	40023800 	.word	0x40023800
 8002f78:	42470060 	.word	0x42470060

08002f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0cc      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b68      	ldr	r3, [pc, #416]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d90c      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b65      	ldr	r3, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d044      	beq.n	800309c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d119      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d003      	beq.n	800303a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003036:	2b03      	cmp	r3, #3
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e06f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e067      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b37      	ldr	r3, [pc, #220]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4934      	ldr	r1, [pc, #208]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fe fce2 	bl	8001a34 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe fcde 	bl	8001a34 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e04f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d20c      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fc42 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00
 8003138:	40023800 	.word	0x40023800
 800313c:	080095f4 	.word	0x080095f4
 8003140:	20000024 	.word	0x20000024
 8003144:	20000028 	.word	0x20000028

08003148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	2300      	movs	r3, #0
 800315a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003160:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d00d      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x40>
 800316c:	2b08      	cmp	r3, #8
 800316e:	f200 80bd 	bhi.w	80032ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x34>
 8003176:	2b04      	cmp	r3, #4
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x3a>
 800317a:	e0b7      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b61      	ldr	r3, [pc, #388]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800317e:	60bb      	str	r3, [r7, #8]
       break;
 8003180:	e0b7      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003182:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003184:	60bb      	str	r3, [r7, #8]
      break;
 8003186:	e0b4      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d04d      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b58      	ldr	r3, [pc, #352]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	461a      	mov	r2, r3
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	ea02 0800 	and.w	r8, r2, r0
 80031b6:	ea03 0901 	and.w	r9, r3, r1
 80031ba:	4640      	mov	r0, r8
 80031bc:	4649      	mov	r1, r9
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	014b      	lsls	r3, r1, #5
 80031c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031cc:	0142      	lsls	r2, r0, #5
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	ebb0 0008 	subs.w	r0, r0, r8
 80031d6:	eb61 0109 	sbc.w	r1, r1, r9
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	018b      	lsls	r3, r1, #6
 80031e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031e8:	0182      	lsls	r2, r0, #6
 80031ea:	1a12      	subs	r2, r2, r0
 80031ec:	eb63 0301 	sbc.w	r3, r3, r1
 80031f0:	f04f 0000 	mov.w	r0, #0
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	00d9      	lsls	r1, r3, #3
 80031fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031fe:	00d0      	lsls	r0, r2, #3
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	eb12 0208 	adds.w	r2, r2, r8
 8003208:	eb43 0309 	adc.w	r3, r3, r9
 800320c:	f04f 0000 	mov.w	r0, #0
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	0259      	lsls	r1, r3, #9
 8003216:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800321a:	0250      	lsls	r0, r2, #9
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	461a      	mov	r2, r3
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f7fd fd2c 	bl	8000c88 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e04a      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323a:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	461a      	mov	r2, r3
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	f240 10ff 	movw	r0, #511	; 0x1ff
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	ea02 0400 	and.w	r4, r2, r0
 8003252:	ea03 0501 	and.w	r5, r3, r1
 8003256:	4620      	mov	r0, r4
 8003258:	4629      	mov	r1, r5
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	014b      	lsls	r3, r1, #5
 8003264:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003268:	0142      	lsls	r2, r0, #5
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	1b00      	subs	r0, r0, r4
 8003270:	eb61 0105 	sbc.w	r1, r1, r5
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	018b      	lsls	r3, r1, #6
 800327e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003282:	0182      	lsls	r2, r0, #6
 8003284:	1a12      	subs	r2, r2, r0
 8003286:	eb63 0301 	sbc.w	r3, r3, r1
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	00d9      	lsls	r1, r3, #3
 8003294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003298:	00d0      	lsls	r0, r2, #3
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	1912      	adds	r2, r2, r4
 80032a0:	eb45 0303 	adc.w	r3, r5, r3
 80032a4:	f04f 0000 	mov.w	r0, #0
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	0299      	lsls	r1, r3, #10
 80032ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032b2:	0290      	lsls	r0, r2, #10
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	461a      	mov	r2, r3
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f7fd fce0 	bl	8000c88 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4613      	mov	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	60bb      	str	r3, [r7, #8]
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032ee:	60bb      	str	r3, [r7, #8]
      break;
 80032f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f2:	68bb      	ldr	r3, [r7, #8]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e041      	b.n	80033a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f9ce 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fa94 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d001      	beq.n	80033c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e046      	b.n	8003452 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a23      	ldr	r2, [pc, #140]	; (8003460 <HAL_TIM_Base_Start+0xb4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d022      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d01d      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_TIM_Base_Start+0xb8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d018      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_TIM_Base_Start+0xbc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_TIM_Base_Start+0xc0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_TIM_Base_Start+0xc4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_TIM_Base_Start+0xc8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_TIM_Base_Start+0x70>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_TIM_Base_Start+0xcc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d111      	bne.n	8003440 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d010      	beq.n	8003450 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	e007      	b.n	8003450 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40010000 	.word	0x40010000
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40010400 	.word	0x40010400
 8003474:	40014000 	.word	0x40014000
 8003478:	40001800 	.word	0x40001800

0800347c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0202 	mvn.w	r2, #2
 80034a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9bc 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9ae 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f9bf 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0204 	mvn.w	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f992 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f984 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f995 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0208 	mvn.w	r2, #8
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f968 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f95a 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f96b 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b10      	cmp	r3, #16
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b10      	cmp	r3, #16
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0210 	mvn.w	r2, #16
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2208      	movs	r2, #8
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f93e 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f930 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f941 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0201 	mvn.w	r2, #1
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f90a 	bl	8003814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fae6 	bl	8003bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d107      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f906 	bl	8003864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0220 	mvn.w	r2, #32
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fab0 	bl	8003be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_ConfigClockSource+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0b3      	b.n	800380c <HAL_TIM_ConfigClockSource+0x180>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036dc:	d03e      	beq.n	800375c <HAL_TIM_ConfigClockSource+0xd0>
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e2:	f200 8087 	bhi.w	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	f000 8085 	beq.w	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d87f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 80036f4:	2b70      	cmp	r3, #112	; 0x70
 80036f6:	d01a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0xa2>
 80036f8:	2b70      	cmp	r3, #112	; 0x70
 80036fa:	d87b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 80036fc:	2b60      	cmp	r3, #96	; 0x60
 80036fe:	d050      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x116>
 8003700:	2b60      	cmp	r3, #96	; 0x60
 8003702:	d877      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 8003704:	2b50      	cmp	r3, #80	; 0x50
 8003706:	d03c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xf6>
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d873      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d058      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x136>
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d86f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	d064      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x156>
 8003718:	2b30      	cmp	r3, #48	; 0x30
 800371a:	d86b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d060      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x156>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d867      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x156>
 8003728:	2b10      	cmp	r3, #16
 800372a:	d05a      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800372c:	e062      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f000 f9b5 	bl	8003aac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003750:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	609a      	str	r2, [r3, #8]
      break;
 800375a:	e04e      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f000 f99e 	bl	8003aac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800377e:	609a      	str	r2, [r3, #8]
      break;
 8003780:	e03b      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	461a      	mov	r2, r3
 8003790:	f000 f912 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2150      	movs	r1, #80	; 0x50
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f96b 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80037a0:	e02b      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 f931 	bl	8003a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2160      	movs	r1, #96	; 0x60
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f95b 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e01b      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 f8f2 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f94b 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80037e0:	e00b      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f000 f942 	bl	8003a76 <TIM_ITRx_SetConfig>
        break;
 80037f2:	e002      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <TIM_Base_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <TIM_Base_SetConfig+0x118>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	; (800398c <TIM_Base_SetConfig+0x114>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d027      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <TIM_Base_SetConfig+0x118>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d023      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d017      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_Base_SetConfig+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <TIM_Base_SetConfig+0x114>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <TIM_Base_SetConfig+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	40001800 	.word	0x40001800
 80039b0:	40001c00 	.word	0x40001c00
 80039b4:	40002000 	.word	0x40002000

080039b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f023 0201 	bic.w	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 030a 	bic.w	r3, r3, #10
 80039f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b087      	sub	sp, #28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f023 0210 	bic.w	r2, r3, #16
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	031b      	lsls	r3, r3, #12
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f043 0307 	orr.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e05a      	b.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d01d      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40010400 	.word	0x40010400
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40001800 	.word	0x40001800

08003be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <__errno>:
 8003c0c:	4b01      	ldr	r3, [pc, #4]	; (8003c14 <__errno+0x8>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000030 	.word	0x20000030

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4d0d      	ldr	r5, [pc, #52]	; (8003c50 <__libc_init_array+0x38>)
 8003c1c:	4c0d      	ldr	r4, [pc, #52]	; (8003c54 <__libc_init_array+0x3c>)
 8003c1e:	1b64      	subs	r4, r4, r5
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	2600      	movs	r6, #0
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	4d0b      	ldr	r5, [pc, #44]	; (8003c58 <__libc_init_array+0x40>)
 8003c2a:	4c0c      	ldr	r4, [pc, #48]	; (8003c5c <__libc_init_array+0x44>)
 8003c2c:	f005 fcd2 	bl	80095d4 <_init>
 8003c30:	1b64      	subs	r4, r4, r5
 8003c32:	10a4      	asrs	r4, r4, #2
 8003c34:	2600      	movs	r6, #0
 8003c36:	42a6      	cmp	r6, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c40:	4798      	blx	r3
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4a:	4798      	blx	r3
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	08009d00 	.word	0x08009d00
 8003c54:	08009d00 	.word	0x08009d00
 8003c58:	08009d00 	.word	0x08009d00
 8003c5c:	08009d04 	.word	0x08009d04

08003c60 <memset>:
 8003c60:	4402      	add	r2, r0
 8003c62:	4603      	mov	r3, r0
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d100      	bne.n	8003c6a <memset+0xa>
 8003c68:	4770      	bx	lr
 8003c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6e:	e7f9      	b.n	8003c64 <memset+0x4>

08003c70 <__cvt>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	ec55 4b10 	vmov	r4, r5, d0
 8003c78:	2d00      	cmp	r5, #0
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	462b      	mov	r3, r5
 8003c80:	bfbb      	ittet	lt
 8003c82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c86:	461d      	movlt	r5, r3
 8003c88:	2300      	movge	r3, #0
 8003c8a:	232d      	movlt	r3, #45	; 0x2d
 8003c8c:	700b      	strb	r3, [r1, #0]
 8003c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c94:	4691      	mov	r9, r2
 8003c96:	f023 0820 	bic.w	r8, r3, #32
 8003c9a:	bfbc      	itt	lt
 8003c9c:	4622      	movlt	r2, r4
 8003c9e:	4614      	movlt	r4, r2
 8003ca0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ca4:	d005      	beq.n	8003cb2 <__cvt+0x42>
 8003ca6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003caa:	d100      	bne.n	8003cae <__cvt+0x3e>
 8003cac:	3601      	adds	r6, #1
 8003cae:	2102      	movs	r1, #2
 8003cb0:	e000      	b.n	8003cb4 <__cvt+0x44>
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	ab03      	add	r3, sp, #12
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	ab02      	add	r3, sp, #8
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	ec45 4b10 	vmov	d0, r4, r5
 8003cc0:	4653      	mov	r3, sl
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	f001 fe28 	bl	8005918 <_dtoa_r>
 8003cc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ccc:	4607      	mov	r7, r0
 8003cce:	d102      	bne.n	8003cd6 <__cvt+0x66>
 8003cd0:	f019 0f01 	tst.w	r9, #1
 8003cd4:	d022      	beq.n	8003d1c <__cvt+0xac>
 8003cd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cda:	eb07 0906 	add.w	r9, r7, r6
 8003cde:	d110      	bne.n	8003d02 <__cvt+0x92>
 8003ce0:	783b      	ldrb	r3, [r7, #0]
 8003ce2:	2b30      	cmp	r3, #48	; 0x30
 8003ce4:	d10a      	bne.n	8003cfc <__cvt+0x8c>
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cf2:	b918      	cbnz	r0, 8003cfc <__cvt+0x8c>
 8003cf4:	f1c6 0601 	rsb	r6, r6, #1
 8003cf8:	f8ca 6000 	str.w	r6, [sl]
 8003cfc:	f8da 3000 	ldr.w	r3, [sl]
 8003d00:	4499      	add	r9, r3
 8003d02:	2200      	movs	r2, #0
 8003d04:	2300      	movs	r3, #0
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7fc fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d0e:	b108      	cbz	r0, 8003d14 <__cvt+0xa4>
 8003d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d14:	2230      	movs	r2, #48	; 0x30
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	454b      	cmp	r3, r9
 8003d1a:	d307      	bcc.n	8003d2c <__cvt+0xbc>
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d20:	1bdb      	subs	r3, r3, r7
 8003d22:	4638      	mov	r0, r7
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	9103      	str	r1, [sp, #12]
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e7f0      	b.n	8003d16 <__cvt+0xa6>

08003d34 <__exponent>:
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	4603      	mov	r3, r0
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	bfb8      	it	lt
 8003d3c:	4249      	neglt	r1, r1
 8003d3e:	f803 2b02 	strb.w	r2, [r3], #2
 8003d42:	bfb4      	ite	lt
 8003d44:	222d      	movlt	r2, #45	; 0x2d
 8003d46:	222b      	movge	r2, #43	; 0x2b
 8003d48:	2909      	cmp	r1, #9
 8003d4a:	7042      	strb	r2, [r0, #1]
 8003d4c:	dd2a      	ble.n	8003da4 <__exponent+0x70>
 8003d4e:	f10d 0407 	add.w	r4, sp, #7
 8003d52:	46a4      	mov	ip, r4
 8003d54:	270a      	movs	r7, #10
 8003d56:	46a6      	mov	lr, r4
 8003d58:	460a      	mov	r2, r1
 8003d5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d5e:	fb07 1516 	mls	r5, r7, r6, r1
 8003d62:	3530      	adds	r5, #48	; 0x30
 8003d64:	2a63      	cmp	r2, #99	; 0x63
 8003d66:	f104 34ff 	add.w	r4, r4, #4294967295
 8003d6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d6e:	4631      	mov	r1, r6
 8003d70:	dcf1      	bgt.n	8003d56 <__exponent+0x22>
 8003d72:	3130      	adds	r1, #48	; 0x30
 8003d74:	f1ae 0502 	sub.w	r5, lr, #2
 8003d78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d7c:	1c44      	adds	r4, r0, #1
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4561      	cmp	r1, ip
 8003d82:	d30a      	bcc.n	8003d9a <__exponent+0x66>
 8003d84:	f10d 0209 	add.w	r2, sp, #9
 8003d88:	eba2 020e 	sub.w	r2, r2, lr
 8003d8c:	4565      	cmp	r5, ip
 8003d8e:	bf88      	it	hi
 8003d90:	2200      	movhi	r2, #0
 8003d92:	4413      	add	r3, r2
 8003d94:	1a18      	subs	r0, r3, r0
 8003d96:	b003      	add	sp, #12
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003da2:	e7ed      	b.n	8003d80 <__exponent+0x4c>
 8003da4:	2330      	movs	r3, #48	; 0x30
 8003da6:	3130      	adds	r1, #48	; 0x30
 8003da8:	7083      	strb	r3, [r0, #2]
 8003daa:	70c1      	strb	r1, [r0, #3]
 8003dac:	1d03      	adds	r3, r0, #4
 8003dae:	e7f1      	b.n	8003d94 <__exponent+0x60>

08003db0 <_printf_float>:
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	ed2d 8b02 	vpush	{d8}
 8003db8:	b08d      	sub	sp, #52	; 0x34
 8003dba:	460c      	mov	r4, r1
 8003dbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	461f      	mov	r7, r3
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	f003 f809 	bl	8006ddc <_localeconv_r>
 8003dca:	f8d0 a000 	ldr.w	sl, [r0]
 8003dce:	4650      	mov	r0, sl
 8003dd0:	f7fc f9fe 	bl	80001d0 <strlen>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	9305      	str	r3, [sp, #20]
 8003ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8003de0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003de4:	3307      	adds	r3, #7
 8003de6:	f023 0307 	bic.w	r3, r3, #7
 8003dea:	f103 0208 	add.w	r2, r3, #8
 8003dee:	f8c8 2000 	str.w	r2, [r8]
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003dfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003dfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e02:	9307      	str	r3, [sp, #28]
 8003e04:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e08:	ee08 0a10 	vmov	s16, r0
 8003e0c:	4b9f      	ldr	r3, [pc, #636]	; (800408c <_printf_float+0x2dc>)
 8003e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e12:	f04f 32ff 	mov.w	r2, #4294967295
 8003e16:	f7fc fe89 	bl	8000b2c <__aeabi_dcmpun>
 8003e1a:	bb88      	cbnz	r0, 8003e80 <_printf_float+0xd0>
 8003e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e20:	4b9a      	ldr	r3, [pc, #616]	; (800408c <_printf_float+0x2dc>)
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	f7fc fe63 	bl	8000af0 <__aeabi_dcmple>
 8003e2a:	bb48      	cbnz	r0, 8003e80 <_printf_float+0xd0>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4640      	mov	r0, r8
 8003e32:	4649      	mov	r1, r9
 8003e34:	f7fc fe52 	bl	8000adc <__aeabi_dcmplt>
 8003e38:	b110      	cbz	r0, 8003e40 <_printf_float+0x90>
 8003e3a:	232d      	movs	r3, #45	; 0x2d
 8003e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e40:	4b93      	ldr	r3, [pc, #588]	; (8004090 <_printf_float+0x2e0>)
 8003e42:	4894      	ldr	r0, [pc, #592]	; (8004094 <_printf_float+0x2e4>)
 8003e44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003e48:	bf94      	ite	ls
 8003e4a:	4698      	movls	r8, r3
 8003e4c:	4680      	movhi	r8, r0
 8003e4e:	2303      	movs	r3, #3
 8003e50:	6123      	str	r3, [r4, #16]
 8003e52:	9b05      	ldr	r3, [sp, #20]
 8003e54:	f023 0204 	bic.w	r2, r3, #4
 8003e58:	6022      	str	r2, [r4, #0]
 8003e5a:	f04f 0900 	mov.w	r9, #0
 8003e5e:	9700      	str	r7, [sp, #0]
 8003e60:	4633      	mov	r3, r6
 8003e62:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e64:	4621      	mov	r1, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 f9d8 	bl	800421c <_printf_common>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	f040 8090 	bne.w	8003f92 <_printf_float+0x1e2>
 8003e72:	f04f 30ff 	mov.w	r0, #4294967295
 8003e76:	b00d      	add	sp, #52	; 0x34
 8003e78:	ecbd 8b02 	vpop	{d8}
 8003e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f7fc fe50 	bl	8000b2c <__aeabi_dcmpun>
 8003e8c:	b140      	cbz	r0, 8003ea0 <_printf_float+0xf0>
 8003e8e:	464b      	mov	r3, r9
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bfbc      	itt	lt
 8003e94:	232d      	movlt	r3, #45	; 0x2d
 8003e96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e9a:	487f      	ldr	r0, [pc, #508]	; (8004098 <_printf_float+0x2e8>)
 8003e9c:	4b7f      	ldr	r3, [pc, #508]	; (800409c <_printf_float+0x2ec>)
 8003e9e:	e7d1      	b.n	8003e44 <_printf_float+0x94>
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003ea6:	9206      	str	r2, [sp, #24]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	d13f      	bne.n	8003f2c <_printf_float+0x17c>
 8003eac:	2306      	movs	r3, #6
 8003eae:	6063      	str	r3, [r4, #4]
 8003eb0:	9b05      	ldr	r3, [sp, #20]
 8003eb2:	6861      	ldr	r1, [r4, #4]
 8003eb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9303      	str	r3, [sp, #12]
 8003ebc:	ab0a      	add	r3, sp, #40	; 0x28
 8003ebe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003ec2:	ab09      	add	r3, sp, #36	; 0x24
 8003ec4:	ec49 8b10 	vmov	d0, r8, r9
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6022      	str	r2, [r4, #0]
 8003ecc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f7ff fecd 	bl	8003c70 <__cvt>
 8003ed6:	9b06      	ldr	r3, [sp, #24]
 8003ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003eda:	2b47      	cmp	r3, #71	; 0x47
 8003edc:	4680      	mov	r8, r0
 8003ede:	d108      	bne.n	8003ef2 <_printf_float+0x142>
 8003ee0:	1cc8      	adds	r0, r1, #3
 8003ee2:	db02      	blt.n	8003eea <_printf_float+0x13a>
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	4299      	cmp	r1, r3
 8003ee8:	dd41      	ble.n	8003f6e <_printf_float+0x1be>
 8003eea:	f1ab 0b02 	sub.w	fp, fp, #2
 8003eee:	fa5f fb8b 	uxtb.w	fp, fp
 8003ef2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ef6:	d820      	bhi.n	8003f3a <_printf_float+0x18a>
 8003ef8:	3901      	subs	r1, #1
 8003efa:	465a      	mov	r2, fp
 8003efc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f00:	9109      	str	r1, [sp, #36]	; 0x24
 8003f02:	f7ff ff17 	bl	8003d34 <__exponent>
 8003f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f08:	1813      	adds	r3, r2, r0
 8003f0a:	2a01      	cmp	r2, #1
 8003f0c:	4681      	mov	r9, r0
 8003f0e:	6123      	str	r3, [r4, #16]
 8003f10:	dc02      	bgt.n	8003f18 <_printf_float+0x168>
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	07d2      	lsls	r2, r2, #31
 8003f16:	d501      	bpl.n	8003f1c <_printf_float+0x16c>
 8003f18:	3301      	adds	r3, #1
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d09c      	beq.n	8003e5e <_printf_float+0xae>
 8003f24:	232d      	movs	r3, #45	; 0x2d
 8003f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2a:	e798      	b.n	8003e5e <_printf_float+0xae>
 8003f2c:	9a06      	ldr	r2, [sp, #24]
 8003f2e:	2a47      	cmp	r2, #71	; 0x47
 8003f30:	d1be      	bne.n	8003eb0 <_printf_float+0x100>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1bc      	bne.n	8003eb0 <_printf_float+0x100>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7b9      	b.n	8003eae <_printf_float+0xfe>
 8003f3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003f3e:	d118      	bne.n	8003f72 <_printf_float+0x1c2>
 8003f40:	2900      	cmp	r1, #0
 8003f42:	6863      	ldr	r3, [r4, #4]
 8003f44:	dd0b      	ble.n	8003f5e <_printf_float+0x1ae>
 8003f46:	6121      	str	r1, [r4, #16]
 8003f48:	b913      	cbnz	r3, 8003f50 <_printf_float+0x1a0>
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	07d0      	lsls	r0, r2, #31
 8003f4e:	d502      	bpl.n	8003f56 <_printf_float+0x1a6>
 8003f50:	3301      	adds	r3, #1
 8003f52:	440b      	add	r3, r1
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f58:	f04f 0900 	mov.w	r9, #0
 8003f5c:	e7de      	b.n	8003f1c <_printf_float+0x16c>
 8003f5e:	b913      	cbnz	r3, 8003f66 <_printf_float+0x1b6>
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	07d2      	lsls	r2, r2, #31
 8003f64:	d501      	bpl.n	8003f6a <_printf_float+0x1ba>
 8003f66:	3302      	adds	r3, #2
 8003f68:	e7f4      	b.n	8003f54 <_printf_float+0x1a4>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e7f2      	b.n	8003f54 <_printf_float+0x1a4>
 8003f6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f74:	4299      	cmp	r1, r3
 8003f76:	db05      	blt.n	8003f84 <_printf_float+0x1d4>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	6121      	str	r1, [r4, #16]
 8003f7c:	07d8      	lsls	r0, r3, #31
 8003f7e:	d5ea      	bpl.n	8003f56 <_printf_float+0x1a6>
 8003f80:	1c4b      	adds	r3, r1, #1
 8003f82:	e7e7      	b.n	8003f54 <_printf_float+0x1a4>
 8003f84:	2900      	cmp	r1, #0
 8003f86:	bfd4      	ite	le
 8003f88:	f1c1 0202 	rsble	r2, r1, #2
 8003f8c:	2201      	movgt	r2, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	e7e0      	b.n	8003f54 <_printf_float+0x1a4>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	055a      	lsls	r2, r3, #21
 8003f96:	d407      	bmi.n	8003fa8 <_printf_float+0x1f8>
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	4642      	mov	r2, r8
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d12c      	bne.n	8004000 <_printf_float+0x250>
 8003fa6:	e764      	b.n	8003e72 <_printf_float+0xc2>
 8003fa8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fac:	f240 80e0 	bls.w	8004170 <_printf_float+0x3c0>
 8003fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f7fc fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d034      	beq.n	800402a <_printf_float+0x27a>
 8003fc0:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <_printf_float+0x2f0>)
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4631      	mov	r1, r6
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	47b8      	blx	r7
 8003fca:	3001      	adds	r0, #1
 8003fcc:	f43f af51 	beq.w	8003e72 <_printf_float+0xc2>
 8003fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	db02      	blt.n	8003fde <_printf_float+0x22e>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	07d8      	lsls	r0, r3, #31
 8003fdc:	d510      	bpl.n	8004000 <_printf_float+0x250>
 8003fde:	ee18 3a10 	vmov	r3, s16
 8003fe2:	4652      	mov	r2, sl
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	f43f af41 	beq.w	8003e72 <_printf_float+0xc2>
 8003ff0:	f04f 0800 	mov.w	r8, #0
 8003ff4:	f104 091a 	add.w	r9, r4, #26
 8003ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	4543      	cmp	r3, r8
 8003ffe:	dc09      	bgt.n	8004014 <_printf_float+0x264>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	079b      	lsls	r3, r3, #30
 8004004:	f100 8105 	bmi.w	8004212 <_printf_float+0x462>
 8004008:	68e0      	ldr	r0, [r4, #12]
 800400a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800400c:	4298      	cmp	r0, r3
 800400e:	bfb8      	it	lt
 8004010:	4618      	movlt	r0, r3
 8004012:	e730      	b.n	8003e76 <_printf_float+0xc6>
 8004014:	2301      	movs	r3, #1
 8004016:	464a      	mov	r2, r9
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f af27 	beq.w	8003e72 <_printf_float+0xc2>
 8004024:	f108 0801 	add.w	r8, r8, #1
 8004028:	e7e6      	b.n	8003ff8 <_printf_float+0x248>
 800402a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	dc39      	bgt.n	80040a4 <_printf_float+0x2f4>
 8004030:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <_printf_float+0x2f0>)
 8004032:	2301      	movs	r3, #1
 8004034:	4631      	mov	r1, r6
 8004036:	4628      	mov	r0, r5
 8004038:	47b8      	blx	r7
 800403a:	3001      	adds	r0, #1
 800403c:	f43f af19 	beq.w	8003e72 <_printf_float+0xc2>
 8004040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004044:	4313      	orrs	r3, r2
 8004046:	d102      	bne.n	800404e <_printf_float+0x29e>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	07d9      	lsls	r1, r3, #31
 800404c:	d5d8      	bpl.n	8004000 <_printf_float+0x250>
 800404e:	ee18 3a10 	vmov	r3, s16
 8004052:	4652      	mov	r2, sl
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	47b8      	blx	r7
 800405a:	3001      	adds	r0, #1
 800405c:	f43f af09 	beq.w	8003e72 <_printf_float+0xc2>
 8004060:	f04f 0900 	mov.w	r9, #0
 8004064:	f104 0a1a 	add.w	sl, r4, #26
 8004068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406a:	425b      	negs	r3, r3
 800406c:	454b      	cmp	r3, r9
 800406e:	dc01      	bgt.n	8004074 <_printf_float+0x2c4>
 8004070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004072:	e792      	b.n	8003f9a <_printf_float+0x1ea>
 8004074:	2301      	movs	r3, #1
 8004076:	4652      	mov	r2, sl
 8004078:	4631      	mov	r1, r6
 800407a:	4628      	mov	r0, r5
 800407c:	47b8      	blx	r7
 800407e:	3001      	adds	r0, #1
 8004080:	f43f aef7 	beq.w	8003e72 <_printf_float+0xc2>
 8004084:	f109 0901 	add.w	r9, r9, #1
 8004088:	e7ee      	b.n	8004068 <_printf_float+0x2b8>
 800408a:	bf00      	nop
 800408c:	7fefffff 	.word	0x7fefffff
 8004090:	08009610 	.word	0x08009610
 8004094:	08009614 	.word	0x08009614
 8004098:	0800961c 	.word	0x0800961c
 800409c:	08009618 	.word	0x08009618
 80040a0:	08009620 	.word	0x08009620
 80040a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040a8:	429a      	cmp	r2, r3
 80040aa:	bfa8      	it	ge
 80040ac:	461a      	movge	r2, r3
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	4691      	mov	r9, r2
 80040b2:	dc37      	bgt.n	8004124 <_printf_float+0x374>
 80040b4:	f04f 0b00 	mov.w	fp, #0
 80040b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040bc:	f104 021a 	add.w	r2, r4, #26
 80040c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040c2:	9305      	str	r3, [sp, #20]
 80040c4:	eba3 0309 	sub.w	r3, r3, r9
 80040c8:	455b      	cmp	r3, fp
 80040ca:	dc33      	bgt.n	8004134 <_printf_float+0x384>
 80040cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040d0:	429a      	cmp	r2, r3
 80040d2:	db3b      	blt.n	800414c <_printf_float+0x39c>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	07da      	lsls	r2, r3, #31
 80040d8:	d438      	bmi.n	800414c <_printf_float+0x39c>
 80040da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040dc:	9b05      	ldr	r3, [sp, #20]
 80040de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	eba2 0901 	sub.w	r9, r2, r1
 80040e6:	4599      	cmp	r9, r3
 80040e8:	bfa8      	it	ge
 80040ea:	4699      	movge	r9, r3
 80040ec:	f1b9 0f00 	cmp.w	r9, #0
 80040f0:	dc35      	bgt.n	800415e <_printf_float+0x3ae>
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040fa:	f104 0a1a 	add.w	sl, r4, #26
 80040fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	eba3 0309 	sub.w	r3, r3, r9
 8004108:	4543      	cmp	r3, r8
 800410a:	f77f af79 	ble.w	8004000 <_printf_float+0x250>
 800410e:	2301      	movs	r3, #1
 8004110:	4652      	mov	r2, sl
 8004112:	4631      	mov	r1, r6
 8004114:	4628      	mov	r0, r5
 8004116:	47b8      	blx	r7
 8004118:	3001      	adds	r0, #1
 800411a:	f43f aeaa 	beq.w	8003e72 <_printf_float+0xc2>
 800411e:	f108 0801 	add.w	r8, r8, #1
 8004122:	e7ec      	b.n	80040fe <_printf_float+0x34e>
 8004124:	4613      	mov	r3, r2
 8004126:	4631      	mov	r1, r6
 8004128:	4642      	mov	r2, r8
 800412a:	4628      	mov	r0, r5
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	d1c0      	bne.n	80040b4 <_printf_float+0x304>
 8004132:	e69e      	b.n	8003e72 <_printf_float+0xc2>
 8004134:	2301      	movs	r3, #1
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	9205      	str	r2, [sp, #20]
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	f43f ae97 	beq.w	8003e72 <_printf_float+0xc2>
 8004144:	9a05      	ldr	r2, [sp, #20]
 8004146:	f10b 0b01 	add.w	fp, fp, #1
 800414a:	e7b9      	b.n	80040c0 <_printf_float+0x310>
 800414c:	ee18 3a10 	vmov	r3, s16
 8004150:	4652      	mov	r2, sl
 8004152:	4631      	mov	r1, r6
 8004154:	4628      	mov	r0, r5
 8004156:	47b8      	blx	r7
 8004158:	3001      	adds	r0, #1
 800415a:	d1be      	bne.n	80040da <_printf_float+0x32a>
 800415c:	e689      	b.n	8003e72 <_printf_float+0xc2>
 800415e:	9a05      	ldr	r2, [sp, #20]
 8004160:	464b      	mov	r3, r9
 8004162:	4442      	add	r2, r8
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	d1c1      	bne.n	80040f2 <_printf_float+0x342>
 800416e:	e680      	b.n	8003e72 <_printf_float+0xc2>
 8004170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004172:	2a01      	cmp	r2, #1
 8004174:	dc01      	bgt.n	800417a <_printf_float+0x3ca>
 8004176:	07db      	lsls	r3, r3, #31
 8004178:	d538      	bpl.n	80041ec <_printf_float+0x43c>
 800417a:	2301      	movs	r3, #1
 800417c:	4642      	mov	r2, r8
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	47b8      	blx	r7
 8004184:	3001      	adds	r0, #1
 8004186:	f43f ae74 	beq.w	8003e72 <_printf_float+0xc2>
 800418a:	ee18 3a10 	vmov	r3, s16
 800418e:	4652      	mov	r2, sl
 8004190:	4631      	mov	r1, r6
 8004192:	4628      	mov	r0, r5
 8004194:	47b8      	blx	r7
 8004196:	3001      	adds	r0, #1
 8004198:	f43f ae6b 	beq.w	8003e72 <_printf_float+0xc2>
 800419c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041a0:	2200      	movs	r2, #0
 80041a2:	2300      	movs	r3, #0
 80041a4:	f7fc fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a8:	b9d8      	cbnz	r0, 80041e2 <_printf_float+0x432>
 80041aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ac:	f108 0201 	add.w	r2, r8, #1
 80041b0:	3b01      	subs	r3, #1
 80041b2:	4631      	mov	r1, r6
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b8      	blx	r7
 80041b8:	3001      	adds	r0, #1
 80041ba:	d10e      	bne.n	80041da <_printf_float+0x42a>
 80041bc:	e659      	b.n	8003e72 <_printf_float+0xc2>
 80041be:	2301      	movs	r3, #1
 80041c0:	4652      	mov	r2, sl
 80041c2:	4631      	mov	r1, r6
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b8      	blx	r7
 80041c8:	3001      	adds	r0, #1
 80041ca:	f43f ae52 	beq.w	8003e72 <_printf_float+0xc2>
 80041ce:	f108 0801 	add.w	r8, r8, #1
 80041d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	4543      	cmp	r3, r8
 80041d8:	dcf1      	bgt.n	80041be <_printf_float+0x40e>
 80041da:	464b      	mov	r3, r9
 80041dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041e0:	e6dc      	b.n	8003f9c <_printf_float+0x1ec>
 80041e2:	f04f 0800 	mov.w	r8, #0
 80041e6:	f104 0a1a 	add.w	sl, r4, #26
 80041ea:	e7f2      	b.n	80041d2 <_printf_float+0x422>
 80041ec:	2301      	movs	r3, #1
 80041ee:	4642      	mov	r2, r8
 80041f0:	e7df      	b.n	80041b2 <_printf_float+0x402>
 80041f2:	2301      	movs	r3, #1
 80041f4:	464a      	mov	r2, r9
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f ae38 	beq.w	8003e72 <_printf_float+0xc2>
 8004202:	f108 0801 	add.w	r8, r8, #1
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800420a:	1a5b      	subs	r3, r3, r1
 800420c:	4543      	cmp	r3, r8
 800420e:	dcf0      	bgt.n	80041f2 <_printf_float+0x442>
 8004210:	e6fa      	b.n	8004008 <_printf_float+0x258>
 8004212:	f04f 0800 	mov.w	r8, #0
 8004216:	f104 0919 	add.w	r9, r4, #25
 800421a:	e7f4      	b.n	8004206 <_printf_float+0x456>

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4699      	mov	r9, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800422c:	4293      	cmp	r3, r2
 800422e:	bfb8      	it	lt
 8004230:	4613      	movlt	r3, r2
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004238:	4607      	mov	r7, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc26      	bgt.n	80042b2 <_printf_common+0x96>
 8004264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004268:	1e13      	subs	r3, r2, #0
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42b      	bmi.n	80042cc <_printf_common+0xb0>
 8004274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d01e      	beq.n	80042c0 <_printf_common+0xa4>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	68e5      	ldr	r5, [r4, #12]
 8004286:	6832      	ldr	r2, [r6, #0]
 8004288:	f003 0306 	and.w	r3, r3, #6
 800428c:	2b04      	cmp	r3, #4
 800428e:	bf08      	it	eq
 8004290:	1aad      	subeq	r5, r5, r2
 8004292:	68a3      	ldr	r3, [r4, #8]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	bf0c      	ite	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	2500      	movne	r5, #0
 800429e:	4293      	cmp	r3, r2
 80042a0:	bfc4      	itt	gt
 80042a2:	1a9b      	subgt	r3, r3, r2
 80042a4:	18ed      	addgt	r5, r5, r3
 80042a6:	2600      	movs	r6, #0
 80042a8:	341a      	adds	r4, #26
 80042aa:	42b5      	cmp	r5, r6
 80042ac:	d11a      	bne.n	80042e4 <_printf_common+0xc8>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e008      	b.n	80042c4 <_printf_common+0xa8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4649      	mov	r1, r9
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c0      	blx	r8
 80042bc:	3001      	adds	r0, #1
 80042be:	d103      	bne.n	80042c8 <_printf_common+0xac>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7c6      	b.n	800425a <_printf_common+0x3e>
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	2030      	movs	r0, #48	; 0x30
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d6:	4422      	add	r2, r4
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7c7      	b.n	8004274 <_printf_common+0x58>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4622      	mov	r2, r4
 80042e8:	4649      	mov	r1, r9
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c0      	blx	r8
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0e6      	beq.n	80042c0 <_printf_common+0xa4>
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7d9      	b.n	80042aa <_printf_common+0x8e>
	...

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	460c      	mov	r4, r1
 80042fe:	4691      	mov	r9, r2
 8004300:	7e27      	ldrb	r7, [r4, #24]
 8004302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004304:	2f78      	cmp	r7, #120	; 0x78
 8004306:	4680      	mov	r8, r0
 8004308:	469a      	mov	sl, r3
 800430a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	; 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d8 	beq.w	80044ca <_printf_i+0x1d2>
 800431a:	2f58      	cmp	r7, #88	; 0x58
 800431c:	f000 80a3 	beq.w	8004466 <_printf_i+0x16e>
 8004320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a001      	add	r0, pc, #4	; (adr r0, 8004338 <_printf_i+0x40>)
 8004334:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044b1 	.word	0x080044b1
 8004368:	080043d5 	.word	0x080043d5
 800436c:	08004493 	.word	0x08004493
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044d3 	.word	0x080044d3
 800437c:	08004321 	.word	0x08004321
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	0800449b 	.word	0x0800449b
 8004390:	680b      	ldr	r3, [r1, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	600a      	str	r2, [r1, #0]
 8004398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a3      	b.n	80044ec <_printf_i+0x1f4>
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	6808      	ldr	r0, [r1, #0]
 80043a8:	062e      	lsls	r6, r5, #24
 80043aa:	f100 0304 	add.w	r3, r0, #4
 80043ae:	d50a      	bpl.n	80043c6 <_printf_i+0xce>
 80043b0:	6805      	ldr	r5, [r0, #0]
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	da03      	bge.n	80043c0 <_printf_i+0xc8>
 80043b8:	232d      	movs	r3, #45	; 0x2d
 80043ba:	426d      	negs	r5, r5
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c0:	485e      	ldr	r0, [pc, #376]	; (800453c <_printf_i+0x244>)
 80043c2:	230a      	movs	r3, #10
 80043c4:	e019      	b.n	80043fa <_printf_i+0x102>
 80043c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043ca:	6805      	ldr	r5, [r0, #0]
 80043cc:	600b      	str	r3, [r1, #0]
 80043ce:	bf18      	it	ne
 80043d0:	b22d      	sxthne	r5, r5
 80043d2:	e7ef      	b.n	80043b4 <_printf_i+0xbc>
 80043d4:	680b      	ldr	r3, [r1, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	1d18      	adds	r0, r3, #4
 80043da:	6008      	str	r0, [r1, #0]
 80043dc:	0628      	lsls	r0, r5, #24
 80043de:	d501      	bpl.n	80043e4 <_printf_i+0xec>
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	e002      	b.n	80043ea <_printf_i+0xf2>
 80043e4:	0669      	lsls	r1, r5, #25
 80043e6:	d5fb      	bpl.n	80043e0 <_printf_i+0xe8>
 80043e8:	881d      	ldrh	r5, [r3, #0]
 80043ea:	4854      	ldr	r0, [pc, #336]	; (800453c <_printf_i+0x244>)
 80043ec:	2f6f      	cmp	r7, #111	; 0x6f
 80043ee:	bf0c      	ite	eq
 80043f0:	2308      	moveq	r3, #8
 80043f2:	230a      	movne	r3, #10
 80043f4:	2100      	movs	r1, #0
 80043f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043fa:	6866      	ldr	r6, [r4, #4]
 80043fc:	60a6      	str	r6, [r4, #8]
 80043fe:	2e00      	cmp	r6, #0
 8004400:	bfa2      	ittt	ge
 8004402:	6821      	ldrge	r1, [r4, #0]
 8004404:	f021 0104 	bicge.w	r1, r1, #4
 8004408:	6021      	strge	r1, [r4, #0]
 800440a:	b90d      	cbnz	r5, 8004410 <_printf_i+0x118>
 800440c:	2e00      	cmp	r6, #0
 800440e:	d04d      	beq.n	80044ac <_printf_i+0x1b4>
 8004410:	4616      	mov	r6, r2
 8004412:	fbb5 f1f3 	udiv	r1, r5, r3
 8004416:	fb03 5711 	mls	r7, r3, r1, r5
 800441a:	5dc7      	ldrb	r7, [r0, r7]
 800441c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004420:	462f      	mov	r7, r5
 8004422:	42bb      	cmp	r3, r7
 8004424:	460d      	mov	r5, r1
 8004426:	d9f4      	bls.n	8004412 <_printf_i+0x11a>
 8004428:	2b08      	cmp	r3, #8
 800442a:	d10b      	bne.n	8004444 <_printf_i+0x14c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	07df      	lsls	r7, r3, #31
 8004430:	d508      	bpl.n	8004444 <_printf_i+0x14c>
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	6861      	ldr	r1, [r4, #4]
 8004436:	4299      	cmp	r1, r3
 8004438:	bfde      	ittt	le
 800443a:	2330      	movle	r3, #48	; 0x30
 800443c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004444:	1b92      	subs	r2, r2, r6
 8004446:	6122      	str	r2, [r4, #16]
 8004448:	f8cd a000 	str.w	sl, [sp]
 800444c:	464b      	mov	r3, r9
 800444e:	aa03      	add	r2, sp, #12
 8004450:	4621      	mov	r1, r4
 8004452:	4640      	mov	r0, r8
 8004454:	f7ff fee2 	bl	800421c <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	d14c      	bne.n	80044f6 <_printf_i+0x1fe>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	b004      	add	sp, #16
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004466:	4835      	ldr	r0, [pc, #212]	; (800453c <_printf_i+0x244>)
 8004468:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	680e      	ldr	r6, [r1, #0]
 8004470:	061f      	lsls	r7, r3, #24
 8004472:	f856 5b04 	ldr.w	r5, [r6], #4
 8004476:	600e      	str	r6, [r1, #0]
 8004478:	d514      	bpl.n	80044a4 <_printf_i+0x1ac>
 800447a:	07d9      	lsls	r1, r3, #31
 800447c:	bf44      	itt	mi
 800447e:	f043 0320 	orrmi.w	r3, r3, #32
 8004482:	6023      	strmi	r3, [r4, #0]
 8004484:	b91d      	cbnz	r5, 800448e <_printf_i+0x196>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f023 0320 	bic.w	r3, r3, #32
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	2310      	movs	r3, #16
 8004490:	e7b0      	b.n	80043f4 <_printf_i+0xfc>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	2378      	movs	r3, #120	; 0x78
 800449c:	4828      	ldr	r0, [pc, #160]	; (8004540 <_printf_i+0x248>)
 800449e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044a2:	e7e3      	b.n	800446c <_printf_i+0x174>
 80044a4:	065e      	lsls	r6, r3, #25
 80044a6:	bf48      	it	mi
 80044a8:	b2ad      	uxthmi	r5, r5
 80044aa:	e7e6      	b.n	800447a <_printf_i+0x182>
 80044ac:	4616      	mov	r6, r2
 80044ae:	e7bb      	b.n	8004428 <_printf_i+0x130>
 80044b0:	680b      	ldr	r3, [r1, #0]
 80044b2:	6826      	ldr	r6, [r4, #0]
 80044b4:	6960      	ldr	r0, [r4, #20]
 80044b6:	1d1d      	adds	r5, r3, #4
 80044b8:	600d      	str	r5, [r1, #0]
 80044ba:	0635      	lsls	r5, r6, #24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	d501      	bpl.n	80044c4 <_printf_i+0x1cc>
 80044c0:	6018      	str	r0, [r3, #0]
 80044c2:	e002      	b.n	80044ca <_printf_i+0x1d2>
 80044c4:	0671      	lsls	r1, r6, #25
 80044c6:	d5fb      	bpl.n	80044c0 <_printf_i+0x1c8>
 80044c8:	8018      	strh	r0, [r3, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	4616      	mov	r6, r2
 80044d0:	e7ba      	b.n	8004448 <_printf_i+0x150>
 80044d2:	680b      	ldr	r3, [r1, #0]
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	600a      	str	r2, [r1, #0]
 80044d8:	681e      	ldr	r6, [r3, #0]
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	2100      	movs	r1, #0
 80044de:	4630      	mov	r0, r6
 80044e0:	f7fb fe7e 	bl	80001e0 <memchr>
 80044e4:	b108      	cbz	r0, 80044ea <_printf_i+0x1f2>
 80044e6:	1b80      	subs	r0, r0, r6
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	2300      	movs	r3, #0
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	e7a8      	b.n	8004448 <_printf_i+0x150>
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	4632      	mov	r2, r6
 80044fa:	4649      	mov	r1, r9
 80044fc:	4640      	mov	r0, r8
 80044fe:	47d0      	blx	sl
 8004500:	3001      	adds	r0, #1
 8004502:	d0ab      	beq.n	800445c <_printf_i+0x164>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	079b      	lsls	r3, r3, #30
 8004508:	d413      	bmi.n	8004532 <_printf_i+0x23a>
 800450a:	68e0      	ldr	r0, [r4, #12]
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	4298      	cmp	r0, r3
 8004510:	bfb8      	it	lt
 8004512:	4618      	movlt	r0, r3
 8004514:	e7a4      	b.n	8004460 <_printf_i+0x168>
 8004516:	2301      	movs	r3, #1
 8004518:	4632      	mov	r2, r6
 800451a:	4649      	mov	r1, r9
 800451c:	4640      	mov	r0, r8
 800451e:	47d0      	blx	sl
 8004520:	3001      	adds	r0, #1
 8004522:	d09b      	beq.n	800445c <_printf_i+0x164>
 8004524:	3501      	adds	r5, #1
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	9903      	ldr	r1, [sp, #12]
 800452a:	1a5b      	subs	r3, r3, r1
 800452c:	42ab      	cmp	r3, r5
 800452e:	dcf2      	bgt.n	8004516 <_printf_i+0x21e>
 8004530:	e7eb      	b.n	800450a <_printf_i+0x212>
 8004532:	2500      	movs	r5, #0
 8004534:	f104 0619 	add.w	r6, r4, #25
 8004538:	e7f5      	b.n	8004526 <_printf_i+0x22e>
 800453a:	bf00      	nop
 800453c:	08009622 	.word	0x08009622
 8004540:	08009633 	.word	0x08009633

08004544 <_scanf_float>:
 8004544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004548:	b087      	sub	sp, #28
 800454a:	4617      	mov	r7, r2
 800454c:	9303      	str	r3, [sp, #12]
 800454e:	688b      	ldr	r3, [r1, #8]
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004556:	bf83      	ittte	hi
 8004558:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800455c:	195b      	addhi	r3, r3, r5
 800455e:	9302      	strhi	r3, [sp, #8]
 8004560:	2300      	movls	r3, #0
 8004562:	bf86      	itte	hi
 8004564:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004568:	608b      	strhi	r3, [r1, #8]
 800456a:	9302      	strls	r3, [sp, #8]
 800456c:	680b      	ldr	r3, [r1, #0]
 800456e:	468b      	mov	fp, r1
 8004570:	2500      	movs	r5, #0
 8004572:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004576:	f84b 3b1c 	str.w	r3, [fp], #28
 800457a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800457e:	4680      	mov	r8, r0
 8004580:	460c      	mov	r4, r1
 8004582:	465e      	mov	r6, fp
 8004584:	46aa      	mov	sl, r5
 8004586:	46a9      	mov	r9, r5
 8004588:	9501      	str	r5, [sp, #4]
 800458a:	68a2      	ldr	r2, [r4, #8]
 800458c:	b152      	cbz	r2, 80045a4 <_scanf_float+0x60>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b4e      	cmp	r3, #78	; 0x4e
 8004594:	d864      	bhi.n	8004660 <_scanf_float+0x11c>
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d83c      	bhi.n	8004614 <_scanf_float+0xd0>
 800459a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800459e:	b2c8      	uxtb	r0, r1
 80045a0:	280e      	cmp	r0, #14
 80045a2:	d93a      	bls.n	800461a <_scanf_float+0xd6>
 80045a4:	f1b9 0f00 	cmp.w	r9, #0
 80045a8:	d003      	beq.n	80045b2 <_scanf_float+0x6e>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b6:	f1ba 0f01 	cmp.w	sl, #1
 80045ba:	f200 8113 	bhi.w	80047e4 <_scanf_float+0x2a0>
 80045be:	455e      	cmp	r6, fp
 80045c0:	f200 8105 	bhi.w	80047ce <_scanf_float+0x28a>
 80045c4:	2501      	movs	r5, #1
 80045c6:	4628      	mov	r0, r5
 80045c8:	b007      	add	sp, #28
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045d2:	2a0d      	cmp	r2, #13
 80045d4:	d8e6      	bhi.n	80045a4 <_scanf_float+0x60>
 80045d6:	a101      	add	r1, pc, #4	; (adr r1, 80045dc <_scanf_float+0x98>)
 80045d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045dc:	0800471b 	.word	0x0800471b
 80045e0:	080045a5 	.word	0x080045a5
 80045e4:	080045a5 	.word	0x080045a5
 80045e8:	080045a5 	.word	0x080045a5
 80045ec:	0800477b 	.word	0x0800477b
 80045f0:	08004753 	.word	0x08004753
 80045f4:	080045a5 	.word	0x080045a5
 80045f8:	080045a5 	.word	0x080045a5
 80045fc:	08004729 	.word	0x08004729
 8004600:	080045a5 	.word	0x080045a5
 8004604:	080045a5 	.word	0x080045a5
 8004608:	080045a5 	.word	0x080045a5
 800460c:	080045a5 	.word	0x080045a5
 8004610:	080046e1 	.word	0x080046e1
 8004614:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004618:	e7db      	b.n	80045d2 <_scanf_float+0x8e>
 800461a:	290e      	cmp	r1, #14
 800461c:	d8c2      	bhi.n	80045a4 <_scanf_float+0x60>
 800461e:	a001      	add	r0, pc, #4	; (adr r0, 8004624 <_scanf_float+0xe0>)
 8004620:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004624:	080046d3 	.word	0x080046d3
 8004628:	080045a5 	.word	0x080045a5
 800462c:	080046d3 	.word	0x080046d3
 8004630:	08004767 	.word	0x08004767
 8004634:	080045a5 	.word	0x080045a5
 8004638:	08004681 	.word	0x08004681
 800463c:	080046bd 	.word	0x080046bd
 8004640:	080046bd 	.word	0x080046bd
 8004644:	080046bd 	.word	0x080046bd
 8004648:	080046bd 	.word	0x080046bd
 800464c:	080046bd 	.word	0x080046bd
 8004650:	080046bd 	.word	0x080046bd
 8004654:	080046bd 	.word	0x080046bd
 8004658:	080046bd 	.word	0x080046bd
 800465c:	080046bd 	.word	0x080046bd
 8004660:	2b6e      	cmp	r3, #110	; 0x6e
 8004662:	d809      	bhi.n	8004678 <_scanf_float+0x134>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d8b2      	bhi.n	80045ce <_scanf_float+0x8a>
 8004668:	2b54      	cmp	r3, #84	; 0x54
 800466a:	d077      	beq.n	800475c <_scanf_float+0x218>
 800466c:	2b59      	cmp	r3, #89	; 0x59
 800466e:	d199      	bne.n	80045a4 <_scanf_float+0x60>
 8004670:	2d07      	cmp	r5, #7
 8004672:	d197      	bne.n	80045a4 <_scanf_float+0x60>
 8004674:	2508      	movs	r5, #8
 8004676:	e029      	b.n	80046cc <_scanf_float+0x188>
 8004678:	2b74      	cmp	r3, #116	; 0x74
 800467a:	d06f      	beq.n	800475c <_scanf_float+0x218>
 800467c:	2b79      	cmp	r3, #121	; 0x79
 800467e:	e7f6      	b.n	800466e <_scanf_float+0x12a>
 8004680:	6821      	ldr	r1, [r4, #0]
 8004682:	05c8      	lsls	r0, r1, #23
 8004684:	d51a      	bpl.n	80046bc <_scanf_float+0x178>
 8004686:	9b02      	ldr	r3, [sp, #8]
 8004688:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800468c:	6021      	str	r1, [r4, #0]
 800468e:	f109 0901 	add.w	r9, r9, #1
 8004692:	b11b      	cbz	r3, 800469c <_scanf_float+0x158>
 8004694:	3b01      	subs	r3, #1
 8004696:	3201      	adds	r2, #1
 8004698:	9302      	str	r3, [sp, #8]
 800469a:	60a2      	str	r2, [r4, #8]
 800469c:	68a3      	ldr	r3, [r4, #8]
 800469e:	3b01      	subs	r3, #1
 80046a0:	60a3      	str	r3, [r4, #8]
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	f340 8084 	ble.w	80047bc <_scanf_float+0x278>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	e766      	b.n	800458a <_scanf_float+0x46>
 80046bc:	eb1a 0f05 	cmn.w	sl, r5
 80046c0:	f47f af70 	bne.w	80045a4 <_scanf_float+0x60>
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046ca:	6022      	str	r2, [r4, #0]
 80046cc:	f806 3b01 	strb.w	r3, [r6], #1
 80046d0:	e7e4      	b.n	800469c <_scanf_float+0x158>
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	0610      	lsls	r0, r2, #24
 80046d6:	f57f af65 	bpl.w	80045a4 <_scanf_float+0x60>
 80046da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046de:	e7f4      	b.n	80046ca <_scanf_float+0x186>
 80046e0:	f1ba 0f00 	cmp.w	sl, #0
 80046e4:	d10e      	bne.n	8004704 <_scanf_float+0x1c0>
 80046e6:	f1b9 0f00 	cmp.w	r9, #0
 80046ea:	d10e      	bne.n	800470a <_scanf_float+0x1c6>
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80046f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80046f6:	d108      	bne.n	800470a <_scanf_float+0x1c6>
 80046f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	f04f 0a01 	mov.w	sl, #1
 8004702:	e7e3      	b.n	80046cc <_scanf_float+0x188>
 8004704:	f1ba 0f02 	cmp.w	sl, #2
 8004708:	d055      	beq.n	80047b6 <_scanf_float+0x272>
 800470a:	2d01      	cmp	r5, #1
 800470c:	d002      	beq.n	8004714 <_scanf_float+0x1d0>
 800470e:	2d04      	cmp	r5, #4
 8004710:	f47f af48 	bne.w	80045a4 <_scanf_float+0x60>
 8004714:	3501      	adds	r5, #1
 8004716:	b2ed      	uxtb	r5, r5
 8004718:	e7d8      	b.n	80046cc <_scanf_float+0x188>
 800471a:	f1ba 0f01 	cmp.w	sl, #1
 800471e:	f47f af41 	bne.w	80045a4 <_scanf_float+0x60>
 8004722:	f04f 0a02 	mov.w	sl, #2
 8004726:	e7d1      	b.n	80046cc <_scanf_float+0x188>
 8004728:	b97d      	cbnz	r5, 800474a <_scanf_float+0x206>
 800472a:	f1b9 0f00 	cmp.w	r9, #0
 800472e:	f47f af3c 	bne.w	80045aa <_scanf_float+0x66>
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004738:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800473c:	f47f af39 	bne.w	80045b2 <_scanf_float+0x6e>
 8004740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	2501      	movs	r5, #1
 8004748:	e7c0      	b.n	80046cc <_scanf_float+0x188>
 800474a:	2d03      	cmp	r5, #3
 800474c:	d0e2      	beq.n	8004714 <_scanf_float+0x1d0>
 800474e:	2d05      	cmp	r5, #5
 8004750:	e7de      	b.n	8004710 <_scanf_float+0x1cc>
 8004752:	2d02      	cmp	r5, #2
 8004754:	f47f af26 	bne.w	80045a4 <_scanf_float+0x60>
 8004758:	2503      	movs	r5, #3
 800475a:	e7b7      	b.n	80046cc <_scanf_float+0x188>
 800475c:	2d06      	cmp	r5, #6
 800475e:	f47f af21 	bne.w	80045a4 <_scanf_float+0x60>
 8004762:	2507      	movs	r5, #7
 8004764:	e7b2      	b.n	80046cc <_scanf_float+0x188>
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	0591      	lsls	r1, r2, #22
 800476a:	f57f af1b 	bpl.w	80045a4 <_scanf_float+0x60>
 800476e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004772:	6022      	str	r2, [r4, #0]
 8004774:	f8cd 9004 	str.w	r9, [sp, #4]
 8004778:	e7a8      	b.n	80046cc <_scanf_float+0x188>
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004780:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004784:	d006      	beq.n	8004794 <_scanf_float+0x250>
 8004786:	0550      	lsls	r0, r2, #21
 8004788:	f57f af0c 	bpl.w	80045a4 <_scanf_float+0x60>
 800478c:	f1b9 0f00 	cmp.w	r9, #0
 8004790:	f43f af0f 	beq.w	80045b2 <_scanf_float+0x6e>
 8004794:	0591      	lsls	r1, r2, #22
 8004796:	bf58      	it	pl
 8004798:	9901      	ldrpl	r1, [sp, #4]
 800479a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800479e:	bf58      	it	pl
 80047a0:	eba9 0101 	subpl.w	r1, r9, r1
 80047a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047a8:	bf58      	it	pl
 80047aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	f04f 0900 	mov.w	r9, #0
 80047b4:	e78a      	b.n	80046cc <_scanf_float+0x188>
 80047b6:	f04f 0a03 	mov.w	sl, #3
 80047ba:	e787      	b.n	80046cc <_scanf_float+0x188>
 80047bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047c0:	4639      	mov	r1, r7
 80047c2:	4640      	mov	r0, r8
 80047c4:	4798      	blx	r3
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f43f aedf 	beq.w	800458a <_scanf_float+0x46>
 80047cc:	e6ea      	b.n	80045a4 <_scanf_float+0x60>
 80047ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047d6:	463a      	mov	r2, r7
 80047d8:	4640      	mov	r0, r8
 80047da:	4798      	blx	r3
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	3b01      	subs	r3, #1
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	e6ec      	b.n	80045be <_scanf_float+0x7a>
 80047e4:	1e6b      	subs	r3, r5, #1
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d825      	bhi.n	8004836 <_scanf_float+0x2f2>
 80047ea:	2d02      	cmp	r5, #2
 80047ec:	d836      	bhi.n	800485c <_scanf_float+0x318>
 80047ee:	455e      	cmp	r6, fp
 80047f0:	f67f aee8 	bls.w	80045c4 <_scanf_float+0x80>
 80047f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047fc:	463a      	mov	r2, r7
 80047fe:	4640      	mov	r0, r8
 8004800:	4798      	blx	r3
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	3b01      	subs	r3, #1
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	e7f1      	b.n	80047ee <_scanf_float+0x2aa>
 800480a:	9802      	ldr	r0, [sp, #8]
 800480c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004810:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004814:	9002      	str	r0, [sp, #8]
 8004816:	463a      	mov	r2, r7
 8004818:	4640      	mov	r0, r8
 800481a:	4798      	blx	r3
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	3b01      	subs	r3, #1
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004826:	fa5f fa8a 	uxtb.w	sl, sl
 800482a:	f1ba 0f02 	cmp.w	sl, #2
 800482e:	d1ec      	bne.n	800480a <_scanf_float+0x2c6>
 8004830:	3d03      	subs	r5, #3
 8004832:	b2ed      	uxtb	r5, r5
 8004834:	1b76      	subs	r6, r6, r5
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	05da      	lsls	r2, r3, #23
 800483a:	d52f      	bpl.n	800489c <_scanf_float+0x358>
 800483c:	055b      	lsls	r3, r3, #21
 800483e:	d510      	bpl.n	8004862 <_scanf_float+0x31e>
 8004840:	455e      	cmp	r6, fp
 8004842:	f67f aebf 	bls.w	80045c4 <_scanf_float+0x80>
 8004846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800484a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800484e:	463a      	mov	r2, r7
 8004850:	4640      	mov	r0, r8
 8004852:	4798      	blx	r3
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	3b01      	subs	r3, #1
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	e7f1      	b.n	8004840 <_scanf_float+0x2fc>
 800485c:	46aa      	mov	sl, r5
 800485e:	9602      	str	r6, [sp, #8]
 8004860:	e7df      	b.n	8004822 <_scanf_float+0x2de>
 8004862:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	2965      	cmp	r1, #101	; 0x65
 800486a:	f103 33ff 	add.w	r3, r3, #4294967295
 800486e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	d00c      	beq.n	8004890 <_scanf_float+0x34c>
 8004876:	2945      	cmp	r1, #69	; 0x45
 8004878:	d00a      	beq.n	8004890 <_scanf_float+0x34c>
 800487a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800487e:	463a      	mov	r2, r7
 8004880:	4640      	mov	r0, r8
 8004882:	4798      	blx	r3
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800488a:	3b01      	subs	r3, #1
 800488c:	1eb5      	subs	r5, r6, #2
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004894:	463a      	mov	r2, r7
 8004896:	4640      	mov	r0, r8
 8004898:	4798      	blx	r3
 800489a:	462e      	mov	r6, r5
 800489c:	6825      	ldr	r5, [r4, #0]
 800489e:	f015 0510 	ands.w	r5, r5, #16
 80048a2:	d158      	bne.n	8004956 <_scanf_float+0x412>
 80048a4:	7035      	strb	r5, [r6, #0]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b0:	d11c      	bne.n	80048ec <_scanf_float+0x3a8>
 80048b2:	9b01      	ldr	r3, [sp, #4]
 80048b4:	454b      	cmp	r3, r9
 80048b6:	eba3 0209 	sub.w	r2, r3, r9
 80048ba:	d124      	bne.n	8004906 <_scanf_float+0x3c2>
 80048bc:	2200      	movs	r2, #0
 80048be:	4659      	mov	r1, fp
 80048c0:	4640      	mov	r0, r8
 80048c2:	f000 fef3 	bl	80056ac <_strtod_r>
 80048c6:	9b03      	ldr	r3, [sp, #12]
 80048c8:	6821      	ldr	r1, [r4, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f011 0f02 	tst.w	r1, #2
 80048d0:	ec57 6b10 	vmov	r6, r7, d0
 80048d4:	f103 0204 	add.w	r2, r3, #4
 80048d8:	d020      	beq.n	800491c <_scanf_float+0x3d8>
 80048da:	9903      	ldr	r1, [sp, #12]
 80048dc:	600a      	str	r2, [r1, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	e9c3 6700 	strd	r6, r7, [r3]
 80048e4:	68e3      	ldr	r3, [r4, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60e3      	str	r3, [r4, #12]
 80048ea:	e66c      	b.n	80045c6 <_scanf_float+0x82>
 80048ec:	9b04      	ldr	r3, [sp, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0e4      	beq.n	80048bc <_scanf_float+0x378>
 80048f2:	9905      	ldr	r1, [sp, #20]
 80048f4:	230a      	movs	r3, #10
 80048f6:	462a      	mov	r2, r5
 80048f8:	3101      	adds	r1, #1
 80048fa:	4640      	mov	r0, r8
 80048fc:	f000 ff60 	bl	80057c0 <_strtol_r>
 8004900:	9b04      	ldr	r3, [sp, #16]
 8004902:	9e05      	ldr	r6, [sp, #20]
 8004904:	1ac2      	subs	r2, r0, r3
 8004906:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800490a:	429e      	cmp	r6, r3
 800490c:	bf28      	it	cs
 800490e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004912:	4912      	ldr	r1, [pc, #72]	; (800495c <_scanf_float+0x418>)
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f883 	bl	8004a20 <siprintf>
 800491a:	e7cf      	b.n	80048bc <_scanf_float+0x378>
 800491c:	f011 0f04 	tst.w	r1, #4
 8004920:	9903      	ldr	r1, [sp, #12]
 8004922:	600a      	str	r2, [r1, #0]
 8004924:	d1db      	bne.n	80048de <_scanf_float+0x39a>
 8004926:	f8d3 8000 	ldr.w	r8, [r3]
 800492a:	ee10 2a10 	vmov	r2, s0
 800492e:	ee10 0a10 	vmov	r0, s0
 8004932:	463b      	mov	r3, r7
 8004934:	4639      	mov	r1, r7
 8004936:	f7fc f8f9 	bl	8000b2c <__aeabi_dcmpun>
 800493a:	b128      	cbz	r0, 8004948 <_scanf_float+0x404>
 800493c:	4808      	ldr	r0, [pc, #32]	; (8004960 <_scanf_float+0x41c>)
 800493e:	f000 f869 	bl	8004a14 <nanf>
 8004942:	ed88 0a00 	vstr	s0, [r8]
 8004946:	e7cd      	b.n	80048e4 <_scanf_float+0x3a0>
 8004948:	4630      	mov	r0, r6
 800494a:	4639      	mov	r1, r7
 800494c:	f7fc f94c 	bl	8000be8 <__aeabi_d2f>
 8004950:	f8c8 0000 	str.w	r0, [r8]
 8004954:	e7c6      	b.n	80048e4 <_scanf_float+0x3a0>
 8004956:	2500      	movs	r5, #0
 8004958:	e635      	b.n	80045c6 <_scanf_float+0x82>
 800495a:	bf00      	nop
 800495c:	08009644 	.word	0x08009644
 8004960:	0800974b 	.word	0x0800974b

08004964 <iprintf>:
 8004964:	b40f      	push	{r0, r1, r2, r3}
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <iprintf+0x2c>)
 8004968:	b513      	push	{r0, r1, r4, lr}
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	b124      	cbz	r4, 8004978 <iprintf+0x14>
 800496e:	69a3      	ldr	r3, [r4, #24]
 8004970:	b913      	cbnz	r3, 8004978 <iprintf+0x14>
 8004972:	4620      	mov	r0, r4
 8004974:	f001 fe14 	bl	80065a0 <__sinit>
 8004978:	ab05      	add	r3, sp, #20
 800497a:	9a04      	ldr	r2, [sp, #16]
 800497c:	68a1      	ldr	r1, [r4, #8]
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	4620      	mov	r0, r4
 8004982:	f003 f955 	bl	8007c30 <_vfiprintf_r>
 8004986:	b002      	add	sp, #8
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	b004      	add	sp, #16
 800498e:	4770      	bx	lr
 8004990:	20000030 	.word	0x20000030

08004994 <rand>:
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <rand+0x60>)
 8004996:	b510      	push	{r4, lr}
 8004998:	681c      	ldr	r4, [r3, #0]
 800499a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800499c:	b9b3      	cbnz	r3, 80049cc <rand+0x38>
 800499e:	2018      	movs	r0, #24
 80049a0:	f002 fa24 	bl	8006dec <malloc>
 80049a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80049a6:	b928      	cbnz	r0, 80049b4 <rand+0x20>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <rand+0x64>)
 80049ac:	4813      	ldr	r0, [pc, #76]	; (80049fc <rand+0x68>)
 80049ae:	214e      	movs	r1, #78	; 0x4e
 80049b0:	f000 ff08 	bl	80057c4 <__assert_func>
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <rand+0x6c>)
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <rand+0x70>)
 80049b8:	e9c0 2300 	strd	r2, r3, [r0]
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <rand+0x74>)
 80049be:	6083      	str	r3, [r0, #8]
 80049c0:	230b      	movs	r3, #11
 80049c2:	8183      	strh	r3, [r0, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	2300      	movs	r3, #0
 80049c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80049cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049ce:	480f      	ldr	r0, [pc, #60]	; (8004a0c <rand+0x78>)
 80049d0:	690a      	ldr	r2, [r1, #16]
 80049d2:	694b      	ldr	r3, [r1, #20]
 80049d4:	4c0e      	ldr	r4, [pc, #56]	; (8004a10 <rand+0x7c>)
 80049d6:	4350      	muls	r0, r2
 80049d8:	fb04 0003 	mla	r0, r4, r3, r0
 80049dc:	fba2 3404 	umull	r3, r4, r2, r4
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	4404      	add	r4, r0
 80049e4:	f144 0000 	adc.w	r0, r4, #0
 80049e8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80049ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	bf00      	nop
 80049f4:	20000030 	.word	0x20000030
 80049f8:	08009649 	.word	0x08009649
 80049fc:	08009660 	.word	0x08009660
 8004a00:	abcd330e 	.word	0xabcd330e
 8004a04:	e66d1234 	.word	0xe66d1234
 8004a08:	0005deec 	.word	0x0005deec
 8004a0c:	5851f42d 	.word	0x5851f42d
 8004a10:	4c957f2d 	.word	0x4c957f2d

08004a14 <nanf>:
 8004a14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004a1c <nanf+0x8>
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	7fc00000 	.word	0x7fc00000

08004a20 <siprintf>:
 8004a20:	b40e      	push	{r1, r2, r3}
 8004a22:	b500      	push	{lr}
 8004a24:	b09c      	sub	sp, #112	; 0x70
 8004a26:	ab1d      	add	r3, sp, #116	; 0x74
 8004a28:	9002      	str	r0, [sp, #8]
 8004a2a:	9006      	str	r0, [sp, #24]
 8004a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a30:	4809      	ldr	r0, [pc, #36]	; (8004a58 <siprintf+0x38>)
 8004a32:	9107      	str	r1, [sp, #28]
 8004a34:	9104      	str	r1, [sp, #16]
 8004a36:	4909      	ldr	r1, [pc, #36]	; (8004a5c <siprintf+0x3c>)
 8004a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a3c:	9105      	str	r1, [sp, #20]
 8004a3e:	6800      	ldr	r0, [r0, #0]
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	a902      	add	r1, sp, #8
 8004a44:	f002 ffca 	bl	80079dc <_svfiprintf_r>
 8004a48:	9b02      	ldr	r3, [sp, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	b01c      	add	sp, #112	; 0x70
 8004a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a54:	b003      	add	sp, #12
 8004a56:	4770      	bx	lr
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	ffff0208 	.word	0xffff0208

08004a60 <sulp>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4604      	mov	r4, r0
 8004a64:	460d      	mov	r5, r1
 8004a66:	ec45 4b10 	vmov	d0, r4, r5
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	f002 fd52 	bl	8007514 <__ulp>
 8004a70:	ec51 0b10 	vmov	r0, r1, d0
 8004a74:	b17e      	cbz	r6, 8004a96 <sulp+0x36>
 8004a76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004a7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dd09      	ble.n	8004a96 <sulp+0x36>
 8004a82:	051b      	lsls	r3, r3, #20
 8004a84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a88:	2400      	movs	r4, #0
 8004a8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f7fb fdb1 	bl	80005f8 <__aeabi_dmul>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}

08004a98 <_strtod_l>:
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	b0a3      	sub	sp, #140	; 0x8c
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	931e      	str	r3, [sp, #120]	; 0x78
 8004aa4:	4ba4      	ldr	r3, [pc, #656]	; (8004d38 <_strtod_l+0x2a0>)
 8004aa6:	9219      	str	r2, [sp, #100]	; 0x64
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	9307      	str	r3, [sp, #28]
 8004aac:	4604      	mov	r4, r0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	4688      	mov	r8, r1
 8004ab2:	f7fb fb8d 	bl	80001d0 <strlen>
 8004ab6:	f04f 0a00 	mov.w	sl, #0
 8004aba:	4605      	mov	r5, r0
 8004abc:	f04f 0b00 	mov.w	fp, #0
 8004ac0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	2a2b      	cmp	r2, #43	; 0x2b
 8004aca:	d04c      	beq.n	8004b66 <_strtod_l+0xce>
 8004acc:	d839      	bhi.n	8004b42 <_strtod_l+0xaa>
 8004ace:	2a0d      	cmp	r2, #13
 8004ad0:	d832      	bhi.n	8004b38 <_strtod_l+0xa0>
 8004ad2:	2a08      	cmp	r2, #8
 8004ad4:	d832      	bhi.n	8004b3c <_strtod_l+0xa4>
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	d03c      	beq.n	8004b54 <_strtod_l+0xbc>
 8004ada:	2300      	movs	r3, #0
 8004adc:	930e      	str	r3, [sp, #56]	; 0x38
 8004ade:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004ae0:	7833      	ldrb	r3, [r6, #0]
 8004ae2:	2b30      	cmp	r3, #48	; 0x30
 8004ae4:	f040 80b4 	bne.w	8004c50 <_strtod_l+0x1b8>
 8004ae8:	7873      	ldrb	r3, [r6, #1]
 8004aea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004aee:	2b58      	cmp	r3, #88	; 0x58
 8004af0:	d16c      	bne.n	8004bcc <_strtod_l+0x134>
 8004af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	ab1e      	add	r3, sp, #120	; 0x78
 8004af8:	9702      	str	r7, [sp, #8]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4a8f      	ldr	r2, [pc, #572]	; (8004d3c <_strtod_l+0x2a4>)
 8004afe:	ab1f      	add	r3, sp, #124	; 0x7c
 8004b00:	a91d      	add	r1, sp, #116	; 0x74
 8004b02:	4620      	mov	r0, r4
 8004b04:	f001 fe62 	bl	80067cc <__gethex>
 8004b08:	f010 0707 	ands.w	r7, r0, #7
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	d005      	beq.n	8004b1c <_strtod_l+0x84>
 8004b10:	2f06      	cmp	r7, #6
 8004b12:	d12a      	bne.n	8004b6a <_strtod_l+0xd2>
 8004b14:	3601      	adds	r6, #1
 8004b16:	2300      	movs	r3, #0
 8004b18:	961d      	str	r6, [sp, #116]	; 0x74
 8004b1a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 8596 	bne.w	8005650 <_strtod_l+0xbb8>
 8004b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b26:	b1db      	cbz	r3, 8004b60 <_strtod_l+0xc8>
 8004b28:	4652      	mov	r2, sl
 8004b2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b2e:	ec43 2b10 	vmov	d0, r2, r3
 8004b32:	b023      	add	sp, #140	; 0x8c
 8004b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b38:	2a20      	cmp	r2, #32
 8004b3a:	d1ce      	bne.n	8004ada <_strtod_l+0x42>
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	931d      	str	r3, [sp, #116]	; 0x74
 8004b40:	e7c0      	b.n	8004ac4 <_strtod_l+0x2c>
 8004b42:	2a2d      	cmp	r2, #45	; 0x2d
 8004b44:	d1c9      	bne.n	8004ada <_strtod_l+0x42>
 8004b46:	2201      	movs	r2, #1
 8004b48:	920e      	str	r2, [sp, #56]	; 0x38
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	921d      	str	r2, [sp, #116]	; 0x74
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1c4      	bne.n	8004ade <_strtod_l+0x46>
 8004b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b56:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8576 	bne.w	800564c <_strtod_l+0xbb4>
 8004b60:	4652      	mov	r2, sl
 8004b62:	465b      	mov	r3, fp
 8004b64:	e7e3      	b.n	8004b2e <_strtod_l+0x96>
 8004b66:	2200      	movs	r2, #0
 8004b68:	e7ee      	b.n	8004b48 <_strtod_l+0xb0>
 8004b6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b6c:	b13a      	cbz	r2, 8004b7e <_strtod_l+0xe6>
 8004b6e:	2135      	movs	r1, #53	; 0x35
 8004b70:	a820      	add	r0, sp, #128	; 0x80
 8004b72:	f002 fdda 	bl	800772a <__copybits>
 8004b76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f002 f99f 	bl	8006ebc <_Bfree>
 8004b7e:	3f01      	subs	r7, #1
 8004b80:	2f05      	cmp	r7, #5
 8004b82:	d807      	bhi.n	8004b94 <_strtod_l+0xfc>
 8004b84:	e8df f007 	tbb	[pc, r7]
 8004b88:	1d180b0e 	.word	0x1d180b0e
 8004b8c:	030e      	.short	0x030e
 8004b8e:	f04f 0b00 	mov.w	fp, #0
 8004b92:	46da      	mov	sl, fp
 8004b94:	0728      	lsls	r0, r5, #28
 8004b96:	d5c1      	bpl.n	8004b1c <_strtod_l+0x84>
 8004b98:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004b9c:	e7be      	b.n	8004b1c <_strtod_l+0x84>
 8004b9e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004ba2:	e7f7      	b.n	8004b94 <_strtod_l+0xfc>
 8004ba4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004ba8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004bb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004bb6:	e7ed      	b.n	8004b94 <_strtod_l+0xfc>
 8004bb8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004d40 <_strtod_l+0x2a8>
 8004bbc:	f04f 0a00 	mov.w	sl, #0
 8004bc0:	e7e8      	b.n	8004b94 <_strtod_l+0xfc>
 8004bc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004bc6:	f04f 3aff 	mov.w	sl, #4294967295
 8004bca:	e7e3      	b.n	8004b94 <_strtod_l+0xfc>
 8004bcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	921d      	str	r2, [sp, #116]	; 0x74
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2b30      	cmp	r3, #48	; 0x30
 8004bd6:	d0f9      	beq.n	8004bcc <_strtod_l+0x134>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d09f      	beq.n	8004b1c <_strtod_l+0x84>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f04f 0900 	mov.w	r9, #0
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004be6:	930a      	str	r3, [sp, #40]	; 0x28
 8004be8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004bec:	464f      	mov	r7, r9
 8004bee:	220a      	movs	r2, #10
 8004bf0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004bf2:	7806      	ldrb	r6, [r0, #0]
 8004bf4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004bf8:	b2d9      	uxtb	r1, r3
 8004bfa:	2909      	cmp	r1, #9
 8004bfc:	d92a      	bls.n	8004c54 <_strtod_l+0x1bc>
 8004bfe:	9907      	ldr	r1, [sp, #28]
 8004c00:	462a      	mov	r2, r5
 8004c02:	f003 f9a0 	bl	8007f46 <strncmp>
 8004c06:	b398      	cbz	r0, 8004c70 <_strtod_l+0x1d8>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	4633      	mov	r3, r6
 8004c0c:	463d      	mov	r5, r7
 8004c0e:	9007      	str	r0, [sp, #28]
 8004c10:	4602      	mov	r2, r0
 8004c12:	2b65      	cmp	r3, #101	; 0x65
 8004c14:	d001      	beq.n	8004c1a <_strtod_l+0x182>
 8004c16:	2b45      	cmp	r3, #69	; 0x45
 8004c18:	d118      	bne.n	8004c4c <_strtod_l+0x1b4>
 8004c1a:	b91d      	cbnz	r5, 8004c24 <_strtod_l+0x18c>
 8004c1c:	9b04      	ldr	r3, [sp, #16]
 8004c1e:	4303      	orrs	r3, r0
 8004c20:	d098      	beq.n	8004b54 <_strtod_l+0xbc>
 8004c22:	2500      	movs	r5, #0
 8004c24:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004c28:	f108 0301 	add.w	r3, r8, #1
 8004c2c:	931d      	str	r3, [sp, #116]	; 0x74
 8004c2e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004c32:	2b2b      	cmp	r3, #43	; 0x2b
 8004c34:	d075      	beq.n	8004d22 <_strtod_l+0x28a>
 8004c36:	2b2d      	cmp	r3, #45	; 0x2d
 8004c38:	d07b      	beq.n	8004d32 <_strtod_l+0x29a>
 8004c3a:	f04f 0c00 	mov.w	ip, #0
 8004c3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004c42:	2909      	cmp	r1, #9
 8004c44:	f240 8082 	bls.w	8004d4c <_strtod_l+0x2b4>
 8004c48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	e09d      	b.n	8004d8c <_strtod_l+0x2f4>
 8004c50:	2300      	movs	r3, #0
 8004c52:	e7c4      	b.n	8004bde <_strtod_l+0x146>
 8004c54:	2f08      	cmp	r7, #8
 8004c56:	bfd8      	it	le
 8004c58:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004c5a:	f100 0001 	add.w	r0, r0, #1
 8004c5e:	bfda      	itte	le
 8004c60:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c64:	9309      	strle	r3, [sp, #36]	; 0x24
 8004c66:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004c6a:	3701      	adds	r7, #1
 8004c6c:	901d      	str	r0, [sp, #116]	; 0x74
 8004c6e:	e7bf      	b.n	8004bf0 <_strtod_l+0x158>
 8004c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c72:	195a      	adds	r2, r3, r5
 8004c74:	921d      	str	r2, [sp, #116]	; 0x74
 8004c76:	5d5b      	ldrb	r3, [r3, r5]
 8004c78:	2f00      	cmp	r7, #0
 8004c7a:	d037      	beq.n	8004cec <_strtod_l+0x254>
 8004c7c:	9007      	str	r0, [sp, #28]
 8004c7e:	463d      	mov	r5, r7
 8004c80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004c84:	2a09      	cmp	r2, #9
 8004c86:	d912      	bls.n	8004cae <_strtod_l+0x216>
 8004c88:	2201      	movs	r2, #1
 8004c8a:	e7c2      	b.n	8004c12 <_strtod_l+0x17a>
 8004c8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	921d      	str	r2, [sp, #116]	; 0x74
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	3001      	adds	r0, #1
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	d0f8      	beq.n	8004c8c <_strtod_l+0x1f4>
 8004c9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004c9e:	2a08      	cmp	r2, #8
 8004ca0:	f200 84db 	bhi.w	800565a <_strtod_l+0xbc2>
 8004ca4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004ca6:	9007      	str	r0, [sp, #28]
 8004ca8:	2000      	movs	r0, #0
 8004caa:	920a      	str	r2, [sp, #40]	; 0x28
 8004cac:	4605      	mov	r5, r0
 8004cae:	3b30      	subs	r3, #48	; 0x30
 8004cb0:	f100 0201 	add.w	r2, r0, #1
 8004cb4:	d014      	beq.n	8004ce0 <_strtod_l+0x248>
 8004cb6:	9907      	ldr	r1, [sp, #28]
 8004cb8:	4411      	add	r1, r2
 8004cba:	9107      	str	r1, [sp, #28]
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	eb00 0e05 	add.w	lr, r0, r5
 8004cc2:	210a      	movs	r1, #10
 8004cc4:	4572      	cmp	r2, lr
 8004cc6:	d113      	bne.n	8004cf0 <_strtod_l+0x258>
 8004cc8:	182a      	adds	r2, r5, r0
 8004cca:	2a08      	cmp	r2, #8
 8004ccc:	f105 0501 	add.w	r5, r5, #1
 8004cd0:	4405      	add	r5, r0
 8004cd2:	dc1c      	bgt.n	8004d0e <_strtod_l+0x276>
 8004cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cd6:	220a      	movs	r2, #10
 8004cd8:	fb02 3301 	mla	r3, r2, r1, r3
 8004cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cde:	2200      	movs	r2, #0
 8004ce0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	911d      	str	r1, [sp, #116]	; 0x74
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	4610      	mov	r0, r2
 8004cea:	e7c9      	b.n	8004c80 <_strtod_l+0x1e8>
 8004cec:	4638      	mov	r0, r7
 8004cee:	e7d2      	b.n	8004c96 <_strtod_l+0x1fe>
 8004cf0:	2a08      	cmp	r2, #8
 8004cf2:	dc04      	bgt.n	8004cfe <_strtod_l+0x266>
 8004cf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004cf6:	434e      	muls	r6, r1
 8004cf8:	9609      	str	r6, [sp, #36]	; 0x24
 8004cfa:	3201      	adds	r2, #1
 8004cfc:	e7e2      	b.n	8004cc4 <_strtod_l+0x22c>
 8004cfe:	f102 0c01 	add.w	ip, r2, #1
 8004d02:	f1bc 0f10 	cmp.w	ip, #16
 8004d06:	bfd8      	it	le
 8004d08:	fb01 f909 	mulle.w	r9, r1, r9
 8004d0c:	e7f5      	b.n	8004cfa <_strtod_l+0x262>
 8004d0e:	2d10      	cmp	r5, #16
 8004d10:	bfdc      	itt	le
 8004d12:	220a      	movle	r2, #10
 8004d14:	fb02 3909 	mlale	r9, r2, r9, r3
 8004d18:	e7e1      	b.n	8004cde <_strtod_l+0x246>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9307      	str	r3, [sp, #28]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	e77c      	b.n	8004c1c <_strtod_l+0x184>
 8004d22:	f04f 0c00 	mov.w	ip, #0
 8004d26:	f108 0302 	add.w	r3, r8, #2
 8004d2a:	931d      	str	r3, [sp, #116]	; 0x74
 8004d2c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004d30:	e785      	b.n	8004c3e <_strtod_l+0x1a6>
 8004d32:	f04f 0c01 	mov.w	ip, #1
 8004d36:	e7f6      	b.n	8004d26 <_strtod_l+0x28e>
 8004d38:	08009998 	.word	0x08009998
 8004d3c:	080096c0 	.word	0x080096c0
 8004d40:	7ff00000 	.word	0x7ff00000
 8004d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	911d      	str	r1, [sp, #116]	; 0x74
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d0f9      	beq.n	8004d44 <_strtod_l+0x2ac>
 8004d50:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004d54:	2908      	cmp	r1, #8
 8004d56:	f63f af79 	bhi.w	8004c4c <_strtod_l+0x1b4>
 8004d5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004d5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d60:	9308      	str	r3, [sp, #32]
 8004d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d64:	1c59      	adds	r1, r3, #1
 8004d66:	911d      	str	r1, [sp, #116]	; 0x74
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004d6e:	2e09      	cmp	r6, #9
 8004d70:	d937      	bls.n	8004de2 <_strtod_l+0x34a>
 8004d72:	9e08      	ldr	r6, [sp, #32]
 8004d74:	1b89      	subs	r1, r1, r6
 8004d76:	2908      	cmp	r1, #8
 8004d78:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004d7c:	dc02      	bgt.n	8004d84 <_strtod_l+0x2ec>
 8004d7e:	4576      	cmp	r6, lr
 8004d80:	bfa8      	it	ge
 8004d82:	4676      	movge	r6, lr
 8004d84:	f1bc 0f00 	cmp.w	ip, #0
 8004d88:	d000      	beq.n	8004d8c <_strtod_l+0x2f4>
 8004d8a:	4276      	negs	r6, r6
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d14f      	bne.n	8004e30 <_strtod_l+0x398>
 8004d90:	9904      	ldr	r1, [sp, #16]
 8004d92:	4301      	orrs	r1, r0
 8004d94:	f47f aec2 	bne.w	8004b1c <_strtod_l+0x84>
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	f47f aedb 	bne.w	8004b54 <_strtod_l+0xbc>
 8004d9e:	2b69      	cmp	r3, #105	; 0x69
 8004da0:	d027      	beq.n	8004df2 <_strtod_l+0x35a>
 8004da2:	dc24      	bgt.n	8004dee <_strtod_l+0x356>
 8004da4:	2b49      	cmp	r3, #73	; 0x49
 8004da6:	d024      	beq.n	8004df2 <_strtod_l+0x35a>
 8004da8:	2b4e      	cmp	r3, #78	; 0x4e
 8004daa:	f47f aed3 	bne.w	8004b54 <_strtod_l+0xbc>
 8004dae:	499e      	ldr	r1, [pc, #632]	; (8005028 <_strtod_l+0x590>)
 8004db0:	a81d      	add	r0, sp, #116	; 0x74
 8004db2:	f001 ff63 	bl	8006c7c <__match>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	f43f aecc 	beq.w	8004b54 <_strtod_l+0xbc>
 8004dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b28      	cmp	r3, #40	; 0x28
 8004dc2:	d12d      	bne.n	8004e20 <_strtod_l+0x388>
 8004dc4:	4999      	ldr	r1, [pc, #612]	; (800502c <_strtod_l+0x594>)
 8004dc6:	aa20      	add	r2, sp, #128	; 0x80
 8004dc8:	a81d      	add	r0, sp, #116	; 0x74
 8004dca:	f001 ff6b 	bl	8006ca4 <__hexnan>
 8004dce:	2805      	cmp	r0, #5
 8004dd0:	d126      	bne.n	8004e20 <_strtod_l+0x388>
 8004dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dd4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004dd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004ddc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004de0:	e69c      	b.n	8004b1c <_strtod_l+0x84>
 8004de2:	210a      	movs	r1, #10
 8004de4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004de8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004dec:	e7b9      	b.n	8004d62 <_strtod_l+0x2ca>
 8004dee:	2b6e      	cmp	r3, #110	; 0x6e
 8004df0:	e7db      	b.n	8004daa <_strtod_l+0x312>
 8004df2:	498f      	ldr	r1, [pc, #572]	; (8005030 <_strtod_l+0x598>)
 8004df4:	a81d      	add	r0, sp, #116	; 0x74
 8004df6:	f001 ff41 	bl	8006c7c <__match>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f43f aeaa 	beq.w	8004b54 <_strtod_l+0xbc>
 8004e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e02:	498c      	ldr	r1, [pc, #560]	; (8005034 <_strtod_l+0x59c>)
 8004e04:	3b01      	subs	r3, #1
 8004e06:	a81d      	add	r0, sp, #116	; 0x74
 8004e08:	931d      	str	r3, [sp, #116]	; 0x74
 8004e0a:	f001 ff37 	bl	8006c7c <__match>
 8004e0e:	b910      	cbnz	r0, 8004e16 <_strtod_l+0x37e>
 8004e10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e12:	3301      	adds	r3, #1
 8004e14:	931d      	str	r3, [sp, #116]	; 0x74
 8004e16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005044 <_strtod_l+0x5ac>
 8004e1a:	f04f 0a00 	mov.w	sl, #0
 8004e1e:	e67d      	b.n	8004b1c <_strtod_l+0x84>
 8004e20:	4885      	ldr	r0, [pc, #532]	; (8005038 <_strtod_l+0x5a0>)
 8004e22:	f003 f835 	bl	8007e90 <nan>
 8004e26:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004e2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004e2e:	e675      	b.n	8004b1c <_strtod_l+0x84>
 8004e30:	9b07      	ldr	r3, [sp, #28]
 8004e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e34:	1af3      	subs	r3, r6, r3
 8004e36:	2f00      	cmp	r7, #0
 8004e38:	bf08      	it	eq
 8004e3a:	462f      	moveq	r7, r5
 8004e3c:	2d10      	cmp	r5, #16
 8004e3e:	9308      	str	r3, [sp, #32]
 8004e40:	46a8      	mov	r8, r5
 8004e42:	bfa8      	it	ge
 8004e44:	f04f 0810 	movge.w	r8, #16
 8004e48:	f7fb fb5c 	bl	8000504 <__aeabi_ui2d>
 8004e4c:	2d09      	cmp	r5, #9
 8004e4e:	4682      	mov	sl, r0
 8004e50:	468b      	mov	fp, r1
 8004e52:	dd13      	ble.n	8004e7c <_strtod_l+0x3e4>
 8004e54:	4b79      	ldr	r3, [pc, #484]	; (800503c <_strtod_l+0x5a4>)
 8004e56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e5e:	f7fb fbcb 	bl	80005f8 <__aeabi_dmul>
 8004e62:	4682      	mov	sl, r0
 8004e64:	4648      	mov	r0, r9
 8004e66:	468b      	mov	fp, r1
 8004e68:	f7fb fb4c 	bl	8000504 <__aeabi_ui2d>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4650      	mov	r0, sl
 8004e72:	4659      	mov	r1, fp
 8004e74:	f7fb fa0a 	bl	800028c <__adddf3>
 8004e78:	4682      	mov	sl, r0
 8004e7a:	468b      	mov	fp, r1
 8004e7c:	2d0f      	cmp	r5, #15
 8004e7e:	dc38      	bgt.n	8004ef2 <_strtod_l+0x45a>
 8004e80:	9b08      	ldr	r3, [sp, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f43f ae4a 	beq.w	8004b1c <_strtod_l+0x84>
 8004e88:	dd24      	ble.n	8004ed4 <_strtod_l+0x43c>
 8004e8a:	2b16      	cmp	r3, #22
 8004e8c:	dc0b      	bgt.n	8004ea6 <_strtod_l+0x40e>
 8004e8e:	4d6b      	ldr	r5, [pc, #428]	; (800503c <_strtod_l+0x5a4>)
 8004e90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004e98:	4652      	mov	r2, sl
 8004e9a:	465b      	mov	r3, fp
 8004e9c:	f7fb fbac 	bl	80005f8 <__aeabi_dmul>
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	468b      	mov	fp, r1
 8004ea4:	e63a      	b.n	8004b1c <_strtod_l+0x84>
 8004ea6:	9a08      	ldr	r2, [sp, #32]
 8004ea8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004eac:	4293      	cmp	r3, r2
 8004eae:	db20      	blt.n	8004ef2 <_strtod_l+0x45a>
 8004eb0:	4c62      	ldr	r4, [pc, #392]	; (800503c <_strtod_l+0x5a4>)
 8004eb2:	f1c5 050f 	rsb	r5, r5, #15
 8004eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004eba:	4652      	mov	r2, sl
 8004ebc:	465b      	mov	r3, fp
 8004ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec2:	f7fb fb99 	bl	80005f8 <__aeabi_dmul>
 8004ec6:	9b08      	ldr	r3, [sp, #32]
 8004ec8:	1b5d      	subs	r5, r3, r5
 8004eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ed2:	e7e3      	b.n	8004e9c <_strtod_l+0x404>
 8004ed4:	9b08      	ldr	r3, [sp, #32]
 8004ed6:	3316      	adds	r3, #22
 8004ed8:	db0b      	blt.n	8004ef2 <_strtod_l+0x45a>
 8004eda:	9b07      	ldr	r3, [sp, #28]
 8004edc:	4a57      	ldr	r2, [pc, #348]	; (800503c <_strtod_l+0x5a4>)
 8004ede:	1b9e      	subs	r6, r3, r6
 8004ee0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	f7fb fcae 	bl	800084c <__aeabi_ddiv>
 8004ef0:	e7d6      	b.n	8004ea0 <_strtod_l+0x408>
 8004ef2:	9b08      	ldr	r3, [sp, #32]
 8004ef4:	eba5 0808 	sub.w	r8, r5, r8
 8004ef8:	4498      	add	r8, r3
 8004efa:	f1b8 0f00 	cmp.w	r8, #0
 8004efe:	dd71      	ble.n	8004fe4 <_strtod_l+0x54c>
 8004f00:	f018 030f 	ands.w	r3, r8, #15
 8004f04:	d00a      	beq.n	8004f1c <_strtod_l+0x484>
 8004f06:	494d      	ldr	r1, [pc, #308]	; (800503c <_strtod_l+0x5a4>)
 8004f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	465b      	mov	r3, fp
 8004f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f14:	f7fb fb70 	bl	80005f8 <__aeabi_dmul>
 8004f18:	4682      	mov	sl, r0
 8004f1a:	468b      	mov	fp, r1
 8004f1c:	f038 080f 	bics.w	r8, r8, #15
 8004f20:	d04d      	beq.n	8004fbe <_strtod_l+0x526>
 8004f22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004f26:	dd22      	ble.n	8004f6e <_strtod_l+0x4d6>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	462e      	mov	r6, r5
 8004f2c:	9509      	str	r5, [sp, #36]	; 0x24
 8004f2e:	9507      	str	r5, [sp, #28]
 8004f30:	2322      	movs	r3, #34	; 0x22
 8004f32:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005044 <_strtod_l+0x5ac>
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	f04f 0a00 	mov.w	sl, #0
 8004f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f43f adec 	beq.w	8004b1c <_strtod_l+0x84>
 8004f44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f46:	4620      	mov	r0, r4
 8004f48:	f001 ffb8 	bl	8006ebc <_Bfree>
 8004f4c:	9907      	ldr	r1, [sp, #28]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f001 ffb4 	bl	8006ebc <_Bfree>
 8004f54:	4631      	mov	r1, r6
 8004f56:	4620      	mov	r0, r4
 8004f58:	f001 ffb0 	bl	8006ebc <_Bfree>
 8004f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f001 ffac 	bl	8006ebc <_Bfree>
 8004f64:	4629      	mov	r1, r5
 8004f66:	4620      	mov	r0, r4
 8004f68:	f001 ffa8 	bl	8006ebc <_Bfree>
 8004f6c:	e5d6      	b.n	8004b1c <_strtod_l+0x84>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004f74:	4650      	mov	r0, sl
 8004f76:	4659      	mov	r1, fp
 8004f78:	4699      	mov	r9, r3
 8004f7a:	f1b8 0f01 	cmp.w	r8, #1
 8004f7e:	dc21      	bgt.n	8004fc4 <_strtod_l+0x52c>
 8004f80:	b10b      	cbz	r3, 8004f86 <_strtod_l+0x4ee>
 8004f82:	4682      	mov	sl, r0
 8004f84:	468b      	mov	fp, r1
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <_strtod_l+0x5a8>)
 8004f88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004f8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004f90:	4652      	mov	r2, sl
 8004f92:	465b      	mov	r3, fp
 8004f94:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004f98:	f7fb fb2e 	bl	80005f8 <__aeabi_dmul>
 8004f9c:	4b29      	ldr	r3, [pc, #164]	; (8005044 <_strtod_l+0x5ac>)
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	400b      	ands	r3, r1
 8004fa2:	4929      	ldr	r1, [pc, #164]	; (8005048 <_strtod_l+0x5b0>)
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	4682      	mov	sl, r0
 8004fa8:	d8be      	bhi.n	8004f28 <_strtod_l+0x490>
 8004faa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004fae:	428b      	cmp	r3, r1
 8004fb0:	bf86      	itte	hi
 8004fb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800504c <_strtod_l+0x5b4>
 8004fb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8004fba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	e081      	b.n	80050c8 <_strtod_l+0x630>
 8004fc4:	f018 0f01 	tst.w	r8, #1
 8004fc8:	d007      	beq.n	8004fda <_strtod_l+0x542>
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <_strtod_l+0x5a8>)
 8004fcc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fb10 	bl	80005f8 <__aeabi_dmul>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f109 0901 	add.w	r9, r9, #1
 8004fde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004fe2:	e7ca      	b.n	8004f7a <_strtod_l+0x4e2>
 8004fe4:	d0eb      	beq.n	8004fbe <_strtod_l+0x526>
 8004fe6:	f1c8 0800 	rsb	r8, r8, #0
 8004fea:	f018 020f 	ands.w	r2, r8, #15
 8004fee:	d00a      	beq.n	8005006 <_strtod_l+0x56e>
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <_strtod_l+0x5a4>)
 8004ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb fc25 	bl	800084c <__aeabi_ddiv>
 8005002:	4682      	mov	sl, r0
 8005004:	468b      	mov	fp, r1
 8005006:	ea5f 1828 	movs.w	r8, r8, asr #4
 800500a:	d0d8      	beq.n	8004fbe <_strtod_l+0x526>
 800500c:	f1b8 0f1f 	cmp.w	r8, #31
 8005010:	dd1e      	ble.n	8005050 <_strtod_l+0x5b8>
 8005012:	2500      	movs	r5, #0
 8005014:	462e      	mov	r6, r5
 8005016:	9509      	str	r5, [sp, #36]	; 0x24
 8005018:	9507      	str	r5, [sp, #28]
 800501a:	2322      	movs	r3, #34	; 0x22
 800501c:	f04f 0a00 	mov.w	sl, #0
 8005020:	f04f 0b00 	mov.w	fp, #0
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	e789      	b.n	8004f3c <_strtod_l+0x4a4>
 8005028:	0800961d 	.word	0x0800961d
 800502c:	080096d4 	.word	0x080096d4
 8005030:	08009615 	.word	0x08009615
 8005034:	08009850 	.word	0x08009850
 8005038:	0800974b 	.word	0x0800974b
 800503c:	08009a38 	.word	0x08009a38
 8005040:	08009a10 	.word	0x08009a10
 8005044:	7ff00000 	.word	0x7ff00000
 8005048:	7ca00000 	.word	0x7ca00000
 800504c:	7fefffff 	.word	0x7fefffff
 8005050:	f018 0310 	ands.w	r3, r8, #16
 8005054:	bf18      	it	ne
 8005056:	236a      	movne	r3, #106	; 0x6a
 8005058:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005410 <_strtod_l+0x978>
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	4650      	mov	r0, sl
 8005060:	4659      	mov	r1, fp
 8005062:	2300      	movs	r3, #0
 8005064:	f018 0f01 	tst.w	r8, #1
 8005068:	d004      	beq.n	8005074 <_strtod_l+0x5dc>
 800506a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800506e:	f7fb fac3 	bl	80005f8 <__aeabi_dmul>
 8005072:	2301      	movs	r3, #1
 8005074:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005078:	f109 0908 	add.w	r9, r9, #8
 800507c:	d1f2      	bne.n	8005064 <_strtod_l+0x5cc>
 800507e:	b10b      	cbz	r3, 8005084 <_strtod_l+0x5ec>
 8005080:	4682      	mov	sl, r0
 8005082:	468b      	mov	fp, r1
 8005084:	9b04      	ldr	r3, [sp, #16]
 8005086:	b1bb      	cbz	r3, 80050b8 <_strtod_l+0x620>
 8005088:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800508c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005090:	2b00      	cmp	r3, #0
 8005092:	4659      	mov	r1, fp
 8005094:	dd10      	ble.n	80050b8 <_strtod_l+0x620>
 8005096:	2b1f      	cmp	r3, #31
 8005098:	f340 8128 	ble.w	80052ec <_strtod_l+0x854>
 800509c:	2b34      	cmp	r3, #52	; 0x34
 800509e:	bfde      	ittt	le
 80050a0:	3b20      	suble	r3, #32
 80050a2:	f04f 32ff 	movle.w	r2, #4294967295
 80050a6:	fa02 f303 	lslle.w	r3, r2, r3
 80050aa:	f04f 0a00 	mov.w	sl, #0
 80050ae:	bfcc      	ite	gt
 80050b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80050b4:	ea03 0b01 	andle.w	fp, r3, r1
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4650      	mov	r0, sl
 80050be:	4659      	mov	r1, fp
 80050c0:	f7fb fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d1a4      	bne.n	8005012 <_strtod_l+0x57a>
 80050c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050ce:	462b      	mov	r3, r5
 80050d0:	463a      	mov	r2, r7
 80050d2:	4620      	mov	r0, r4
 80050d4:	f001 ff5e 	bl	8006f94 <__s2b>
 80050d8:	9009      	str	r0, [sp, #36]	; 0x24
 80050da:	2800      	cmp	r0, #0
 80050dc:	f43f af24 	beq.w	8004f28 <_strtod_l+0x490>
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	1b9e      	subs	r6, r3, r6
 80050e4:	9b08      	ldr	r3, [sp, #32]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfb4      	ite	lt
 80050ea:	4633      	movlt	r3, r6
 80050ec:	2300      	movge	r3, #0
 80050ee:	9310      	str	r3, [sp, #64]	; 0x40
 80050f0:	9b08      	ldr	r3, [sp, #32]
 80050f2:	2500      	movs	r5, #0
 80050f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050f8:	9318      	str	r3, [sp, #96]	; 0x60
 80050fa:	462e      	mov	r6, r5
 80050fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fe:	4620      	mov	r0, r4
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	f001 fe9b 	bl	8006e3c <_Balloc>
 8005106:	9007      	str	r0, [sp, #28]
 8005108:	2800      	cmp	r0, #0
 800510a:	f43f af11 	beq.w	8004f30 <_strtod_l+0x498>
 800510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	3202      	adds	r2, #2
 8005114:	f103 010c 	add.w	r1, r3, #12
 8005118:	0092      	lsls	r2, r2, #2
 800511a:	300c      	adds	r0, #12
 800511c:	f001 fe80 	bl	8006e20 <memcpy>
 8005120:	ec4b ab10 	vmov	d0, sl, fp
 8005124:	aa20      	add	r2, sp, #128	; 0x80
 8005126:	a91f      	add	r1, sp, #124	; 0x7c
 8005128:	4620      	mov	r0, r4
 800512a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800512e:	f002 fa6d 	bl	800760c <__d2b>
 8005132:	901e      	str	r0, [sp, #120]	; 0x78
 8005134:	2800      	cmp	r0, #0
 8005136:	f43f aefb 	beq.w	8004f30 <_strtod_l+0x498>
 800513a:	2101      	movs	r1, #1
 800513c:	4620      	mov	r0, r4
 800513e:	f001 ffc3 	bl	80070c8 <__i2b>
 8005142:	4606      	mov	r6, r0
 8005144:	2800      	cmp	r0, #0
 8005146:	f43f aef3 	beq.w	8004f30 <_strtod_l+0x498>
 800514a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800514c:	9904      	ldr	r1, [sp, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfab      	itete	ge
 8005152:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005154:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005156:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005158:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800515c:	bfac      	ite	ge
 800515e:	eb03 0902 	addge.w	r9, r3, r2
 8005162:	1ad7      	sublt	r7, r2, r3
 8005164:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005166:	eba3 0801 	sub.w	r8, r3, r1
 800516a:	4490      	add	r8, r2
 800516c:	4ba3      	ldr	r3, [pc, #652]	; (80053fc <_strtod_l+0x964>)
 800516e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005172:	4598      	cmp	r8, r3
 8005174:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005178:	f280 80cc 	bge.w	8005314 <_strtod_l+0x87c>
 800517c:	eba3 0308 	sub.w	r3, r3, r8
 8005180:	2b1f      	cmp	r3, #31
 8005182:	eba2 0203 	sub.w	r2, r2, r3
 8005186:	f04f 0101 	mov.w	r1, #1
 800518a:	f300 80b6 	bgt.w	80052fa <_strtod_l+0x862>
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	9311      	str	r3, [sp, #68]	; 0x44
 8005194:	2300      	movs	r3, #0
 8005196:	930c      	str	r3, [sp, #48]	; 0x30
 8005198:	eb09 0802 	add.w	r8, r9, r2
 800519c:	9b04      	ldr	r3, [sp, #16]
 800519e:	45c1      	cmp	r9, r8
 80051a0:	4417      	add	r7, r2
 80051a2:	441f      	add	r7, r3
 80051a4:	464b      	mov	r3, r9
 80051a6:	bfa8      	it	ge
 80051a8:	4643      	movge	r3, r8
 80051aa:	42bb      	cmp	r3, r7
 80051ac:	bfa8      	it	ge
 80051ae:	463b      	movge	r3, r7
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bfc2      	ittt	gt
 80051b4:	eba8 0803 	subgt.w	r8, r8, r3
 80051b8:	1aff      	subgt	r7, r7, r3
 80051ba:	eba9 0903 	subgt.w	r9, r9, r3
 80051be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dd17      	ble.n	80051f4 <_strtod_l+0x75c>
 80051c4:	4631      	mov	r1, r6
 80051c6:	461a      	mov	r2, r3
 80051c8:	4620      	mov	r0, r4
 80051ca:	f002 f839 	bl	8007240 <__pow5mult>
 80051ce:	4606      	mov	r6, r0
 80051d0:	2800      	cmp	r0, #0
 80051d2:	f43f aead 	beq.w	8004f30 <_strtod_l+0x498>
 80051d6:	4601      	mov	r1, r0
 80051d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80051da:	4620      	mov	r0, r4
 80051dc:	f001 ff8a 	bl	80070f4 <__multiply>
 80051e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f43f aea4 	beq.w	8004f30 <_strtod_l+0x498>
 80051e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80051ea:	4620      	mov	r0, r4
 80051ec:	f001 fe66 	bl	8006ebc <_Bfree>
 80051f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051f2:	931e      	str	r3, [sp, #120]	; 0x78
 80051f4:	f1b8 0f00 	cmp.w	r8, #0
 80051f8:	f300 8091 	bgt.w	800531e <_strtod_l+0x886>
 80051fc:	9b08      	ldr	r3, [sp, #32]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dd08      	ble.n	8005214 <_strtod_l+0x77c>
 8005202:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005204:	9907      	ldr	r1, [sp, #28]
 8005206:	4620      	mov	r0, r4
 8005208:	f002 f81a 	bl	8007240 <__pow5mult>
 800520c:	9007      	str	r0, [sp, #28]
 800520e:	2800      	cmp	r0, #0
 8005210:	f43f ae8e 	beq.w	8004f30 <_strtod_l+0x498>
 8005214:	2f00      	cmp	r7, #0
 8005216:	dd08      	ble.n	800522a <_strtod_l+0x792>
 8005218:	9907      	ldr	r1, [sp, #28]
 800521a:	463a      	mov	r2, r7
 800521c:	4620      	mov	r0, r4
 800521e:	f002 f869 	bl	80072f4 <__lshift>
 8005222:	9007      	str	r0, [sp, #28]
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f ae83 	beq.w	8004f30 <_strtod_l+0x498>
 800522a:	f1b9 0f00 	cmp.w	r9, #0
 800522e:	dd08      	ble.n	8005242 <_strtod_l+0x7aa>
 8005230:	4631      	mov	r1, r6
 8005232:	464a      	mov	r2, r9
 8005234:	4620      	mov	r0, r4
 8005236:	f002 f85d 	bl	80072f4 <__lshift>
 800523a:	4606      	mov	r6, r0
 800523c:	2800      	cmp	r0, #0
 800523e:	f43f ae77 	beq.w	8004f30 <_strtod_l+0x498>
 8005242:	9a07      	ldr	r2, [sp, #28]
 8005244:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005246:	4620      	mov	r0, r4
 8005248:	f002 f8dc 	bl	8007404 <__mdiff>
 800524c:	4605      	mov	r5, r0
 800524e:	2800      	cmp	r0, #0
 8005250:	f43f ae6e 	beq.w	8004f30 <_strtod_l+0x498>
 8005254:	68c3      	ldr	r3, [r0, #12]
 8005256:	930f      	str	r3, [sp, #60]	; 0x3c
 8005258:	2300      	movs	r3, #0
 800525a:	60c3      	str	r3, [r0, #12]
 800525c:	4631      	mov	r1, r6
 800525e:	f002 f8b5 	bl	80073cc <__mcmp>
 8005262:	2800      	cmp	r0, #0
 8005264:	da65      	bge.n	8005332 <_strtod_l+0x89a>
 8005266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005268:	ea53 030a 	orrs.w	r3, r3, sl
 800526c:	f040 8087 	bne.w	800537e <_strtod_l+0x8e6>
 8005270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005274:	2b00      	cmp	r3, #0
 8005276:	f040 8082 	bne.w	800537e <_strtod_l+0x8e6>
 800527a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800527e:	0d1b      	lsrs	r3, r3, #20
 8005280:	051b      	lsls	r3, r3, #20
 8005282:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005286:	d97a      	bls.n	800537e <_strtod_l+0x8e6>
 8005288:	696b      	ldr	r3, [r5, #20]
 800528a:	b913      	cbnz	r3, 8005292 <_strtod_l+0x7fa>
 800528c:	692b      	ldr	r3, [r5, #16]
 800528e:	2b01      	cmp	r3, #1
 8005290:	dd75      	ble.n	800537e <_strtod_l+0x8e6>
 8005292:	4629      	mov	r1, r5
 8005294:	2201      	movs	r2, #1
 8005296:	4620      	mov	r0, r4
 8005298:	f002 f82c 	bl	80072f4 <__lshift>
 800529c:	4631      	mov	r1, r6
 800529e:	4605      	mov	r5, r0
 80052a0:	f002 f894 	bl	80073cc <__mcmp>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	dd6a      	ble.n	800537e <_strtod_l+0x8e6>
 80052a8:	9904      	ldr	r1, [sp, #16]
 80052aa:	4a55      	ldr	r2, [pc, #340]	; (8005400 <_strtod_l+0x968>)
 80052ac:	465b      	mov	r3, fp
 80052ae:	2900      	cmp	r1, #0
 80052b0:	f000 8085 	beq.w	80053be <_strtod_l+0x926>
 80052b4:	ea02 010b 	and.w	r1, r2, fp
 80052b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80052bc:	dc7f      	bgt.n	80053be <_strtod_l+0x926>
 80052be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80052c2:	f77f aeaa 	ble.w	800501a <_strtod_l+0x582>
 80052c6:	4a4f      	ldr	r2, [pc, #316]	; (8005404 <_strtod_l+0x96c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80052ce:	4650      	mov	r0, sl
 80052d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80052d4:	4659      	mov	r1, fp
 80052d6:	f7fb f98f 	bl	80005f8 <__aeabi_dmul>
 80052da:	460b      	mov	r3, r1
 80052dc:	4303      	orrs	r3, r0
 80052de:	bf08      	it	eq
 80052e0:	2322      	moveq	r3, #34	; 0x22
 80052e2:	4682      	mov	sl, r0
 80052e4:	468b      	mov	fp, r1
 80052e6:	bf08      	it	eq
 80052e8:	6023      	streq	r3, [r4, #0]
 80052ea:	e62b      	b.n	8004f44 <_strtod_l+0x4ac>
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	ea03 0a0a 	and.w	sl, r3, sl
 80052f8:	e6de      	b.n	80050b8 <_strtod_l+0x620>
 80052fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80052fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005302:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005306:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800530a:	fa01 f308 	lsl.w	r3, r1, r8
 800530e:	930c      	str	r3, [sp, #48]	; 0x30
 8005310:	9111      	str	r1, [sp, #68]	; 0x44
 8005312:	e741      	b.n	8005198 <_strtod_l+0x700>
 8005314:	2300      	movs	r3, #0
 8005316:	930c      	str	r3, [sp, #48]	; 0x30
 8005318:	2301      	movs	r3, #1
 800531a:	9311      	str	r3, [sp, #68]	; 0x44
 800531c:	e73c      	b.n	8005198 <_strtod_l+0x700>
 800531e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005320:	4642      	mov	r2, r8
 8005322:	4620      	mov	r0, r4
 8005324:	f001 ffe6 	bl	80072f4 <__lshift>
 8005328:	901e      	str	r0, [sp, #120]	; 0x78
 800532a:	2800      	cmp	r0, #0
 800532c:	f47f af66 	bne.w	80051fc <_strtod_l+0x764>
 8005330:	e5fe      	b.n	8004f30 <_strtod_l+0x498>
 8005332:	465f      	mov	r7, fp
 8005334:	d16e      	bne.n	8005414 <_strtod_l+0x97c>
 8005336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800533c:	b342      	cbz	r2, 8005390 <_strtod_l+0x8f8>
 800533e:	4a32      	ldr	r2, [pc, #200]	; (8005408 <_strtod_l+0x970>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d128      	bne.n	8005396 <_strtod_l+0x8fe>
 8005344:	9b04      	ldr	r3, [sp, #16]
 8005346:	4650      	mov	r0, sl
 8005348:	b1eb      	cbz	r3, 8005386 <_strtod_l+0x8ee>
 800534a:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <_strtod_l+0x968>)
 800534c:	403a      	ands	r2, r7
 800534e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005352:	f04f 31ff 	mov.w	r1, #4294967295
 8005356:	d819      	bhi.n	800538c <_strtod_l+0x8f4>
 8005358:	0d12      	lsrs	r2, r2, #20
 800535a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	4298      	cmp	r0, r3
 8005364:	d117      	bne.n	8005396 <_strtod_l+0x8fe>
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <_strtod_l+0x974>)
 8005368:	429f      	cmp	r7, r3
 800536a:	d102      	bne.n	8005372 <_strtod_l+0x8da>
 800536c:	3001      	adds	r0, #1
 800536e:	f43f addf 	beq.w	8004f30 <_strtod_l+0x498>
 8005372:	4b23      	ldr	r3, [pc, #140]	; (8005400 <_strtod_l+0x968>)
 8005374:	403b      	ands	r3, r7
 8005376:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800537a:	f04f 0a00 	mov.w	sl, #0
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1a0      	bne.n	80052c6 <_strtod_l+0x82e>
 8005384:	e5de      	b.n	8004f44 <_strtod_l+0x4ac>
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	e7ea      	b.n	8005362 <_strtod_l+0x8ca>
 800538c:	460b      	mov	r3, r1
 800538e:	e7e8      	b.n	8005362 <_strtod_l+0x8ca>
 8005390:	ea53 030a 	orrs.w	r3, r3, sl
 8005394:	d088      	beq.n	80052a8 <_strtod_l+0x810>
 8005396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005398:	b1db      	cbz	r3, 80053d2 <_strtod_l+0x93a>
 800539a:	423b      	tst	r3, r7
 800539c:	d0ef      	beq.n	800537e <_strtod_l+0x8e6>
 800539e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053a0:	9a04      	ldr	r2, [sp, #16]
 80053a2:	4650      	mov	r0, sl
 80053a4:	4659      	mov	r1, fp
 80053a6:	b1c3      	cbz	r3, 80053da <_strtod_l+0x942>
 80053a8:	f7ff fb5a 	bl	8004a60 <sulp>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053b4:	f7fa ff6a 	bl	800028c <__adddf3>
 80053b8:	4682      	mov	sl, r0
 80053ba:	468b      	mov	fp, r1
 80053bc:	e7df      	b.n	800537e <_strtod_l+0x8e6>
 80053be:	4013      	ands	r3, r2
 80053c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80053c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80053c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80053cc:	f04f 3aff 	mov.w	sl, #4294967295
 80053d0:	e7d5      	b.n	800537e <_strtod_l+0x8e6>
 80053d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053d4:	ea13 0f0a 	tst.w	r3, sl
 80053d8:	e7e0      	b.n	800539c <_strtod_l+0x904>
 80053da:	f7ff fb41 	bl	8004a60 <sulp>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053e6:	f7fa ff4f 	bl	8000288 <__aeabi_dsub>
 80053ea:	2200      	movs	r2, #0
 80053ec:	2300      	movs	r3, #0
 80053ee:	4682      	mov	sl, r0
 80053f0:	468b      	mov	fp, r1
 80053f2:	f7fb fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d0c1      	beq.n	800537e <_strtod_l+0x8e6>
 80053fa:	e60e      	b.n	800501a <_strtod_l+0x582>
 80053fc:	fffffc02 	.word	0xfffffc02
 8005400:	7ff00000 	.word	0x7ff00000
 8005404:	39500000 	.word	0x39500000
 8005408:	000fffff 	.word	0x000fffff
 800540c:	7fefffff 	.word	0x7fefffff
 8005410:	080096e8 	.word	0x080096e8
 8005414:	4631      	mov	r1, r6
 8005416:	4628      	mov	r0, r5
 8005418:	f002 f954 	bl	80076c4 <__ratio>
 800541c:	ec59 8b10 	vmov	r8, r9, d0
 8005420:	ee10 0a10 	vmov	r0, s0
 8005424:	2200      	movs	r2, #0
 8005426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800542a:	4649      	mov	r1, r9
 800542c:	f7fb fb60 	bl	8000af0 <__aeabi_dcmple>
 8005430:	2800      	cmp	r0, #0
 8005432:	d07c      	beq.n	800552e <_strtod_l+0xa96>
 8005434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d04c      	beq.n	80054d4 <_strtod_l+0xa3c>
 800543a:	4b95      	ldr	r3, [pc, #596]	; (8005690 <_strtod_l+0xbf8>)
 800543c:	2200      	movs	r2, #0
 800543e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005442:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005690 <_strtod_l+0xbf8>
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	4b92      	ldr	r3, [pc, #584]	; (8005694 <_strtod_l+0xbfc>)
 800544c:	403b      	ands	r3, r7
 800544e:	9311      	str	r3, [sp, #68]	; 0x44
 8005450:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005452:	4b91      	ldr	r3, [pc, #580]	; (8005698 <_strtod_l+0xc00>)
 8005454:	429a      	cmp	r2, r3
 8005456:	f040 80b2 	bne.w	80055be <_strtod_l+0xb26>
 800545a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800545e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005462:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005466:	ec4b ab10 	vmov	d0, sl, fp
 800546a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800546e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005472:	f002 f84f 	bl	8007514 <__ulp>
 8005476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800547a:	ec53 2b10 	vmov	r2, r3, d0
 800547e:	f7fb f8bb 	bl	80005f8 <__aeabi_dmul>
 8005482:	4652      	mov	r2, sl
 8005484:	465b      	mov	r3, fp
 8005486:	f7fa ff01 	bl	800028c <__adddf3>
 800548a:	460b      	mov	r3, r1
 800548c:	4981      	ldr	r1, [pc, #516]	; (8005694 <_strtod_l+0xbfc>)
 800548e:	4a83      	ldr	r2, [pc, #524]	; (800569c <_strtod_l+0xc04>)
 8005490:	4019      	ands	r1, r3
 8005492:	4291      	cmp	r1, r2
 8005494:	4682      	mov	sl, r0
 8005496:	d95e      	bls.n	8005556 <_strtod_l+0xabe>
 8005498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800549a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800549e:	4293      	cmp	r3, r2
 80054a0:	d103      	bne.n	80054aa <_strtod_l+0xa12>
 80054a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a4:	3301      	adds	r3, #1
 80054a6:	f43f ad43 	beq.w	8004f30 <_strtod_l+0x498>
 80054aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80056a8 <_strtod_l+0xc10>
 80054ae:	f04f 3aff 	mov.w	sl, #4294967295
 80054b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80054b4:	4620      	mov	r0, r4
 80054b6:	f001 fd01 	bl	8006ebc <_Bfree>
 80054ba:	9907      	ldr	r1, [sp, #28]
 80054bc:	4620      	mov	r0, r4
 80054be:	f001 fcfd 	bl	8006ebc <_Bfree>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4620      	mov	r0, r4
 80054c6:	f001 fcf9 	bl	8006ebc <_Bfree>
 80054ca:	4629      	mov	r1, r5
 80054cc:	4620      	mov	r0, r4
 80054ce:	f001 fcf5 	bl	8006ebc <_Bfree>
 80054d2:	e613      	b.n	80050fc <_strtod_l+0x664>
 80054d4:	f1ba 0f00 	cmp.w	sl, #0
 80054d8:	d11b      	bne.n	8005512 <_strtod_l+0xa7a>
 80054da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054de:	b9f3      	cbnz	r3, 800551e <_strtod_l+0xa86>
 80054e0:	4b6b      	ldr	r3, [pc, #428]	; (8005690 <_strtod_l+0xbf8>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	4640      	mov	r0, r8
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fb faf8 	bl	8000adc <__aeabi_dcmplt>
 80054ec:	b9d0      	cbnz	r0, 8005524 <_strtod_l+0xa8c>
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	4b6b      	ldr	r3, [pc, #428]	; (80056a0 <_strtod_l+0xc08>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	f7fb f87f 	bl	80005f8 <__aeabi_dmul>
 80054fa:	4680      	mov	r8, r0
 80054fc:	4689      	mov	r9, r1
 80054fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005502:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005506:	931b      	str	r3, [sp, #108]	; 0x6c
 8005508:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800550c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005510:	e79b      	b.n	800544a <_strtod_l+0x9b2>
 8005512:	f1ba 0f01 	cmp.w	sl, #1
 8005516:	d102      	bne.n	800551e <_strtod_l+0xa86>
 8005518:	2f00      	cmp	r7, #0
 800551a:	f43f ad7e 	beq.w	800501a <_strtod_l+0x582>
 800551e:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <_strtod_l+0xc0c>)
 8005520:	2200      	movs	r2, #0
 8005522:	e78c      	b.n	800543e <_strtod_l+0x9a6>
 8005524:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80056a0 <_strtod_l+0xc08>
 8005528:	f04f 0800 	mov.w	r8, #0
 800552c:	e7e7      	b.n	80054fe <_strtod_l+0xa66>
 800552e:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <_strtod_l+0xc08>)
 8005530:	4640      	mov	r0, r8
 8005532:	4649      	mov	r1, r9
 8005534:	2200      	movs	r2, #0
 8005536:	f7fb f85f 	bl	80005f8 <__aeabi_dmul>
 800553a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800553c:	4680      	mov	r8, r0
 800553e:	4689      	mov	r9, r1
 8005540:	b933      	cbnz	r3, 8005550 <_strtod_l+0xab8>
 8005542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005546:	9012      	str	r0, [sp, #72]	; 0x48
 8005548:	9313      	str	r3, [sp, #76]	; 0x4c
 800554a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800554e:	e7dd      	b.n	800550c <_strtod_l+0xa74>
 8005550:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005554:	e7f9      	b.n	800554a <_strtod_l+0xab2>
 8005556:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800555a:	9b04      	ldr	r3, [sp, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1a8      	bne.n	80054b2 <_strtod_l+0xa1a>
 8005560:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005564:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005566:	0d1b      	lsrs	r3, r3, #20
 8005568:	051b      	lsls	r3, r3, #20
 800556a:	429a      	cmp	r2, r3
 800556c:	d1a1      	bne.n	80054b2 <_strtod_l+0xa1a>
 800556e:	4640      	mov	r0, r8
 8005570:	4649      	mov	r1, r9
 8005572:	f7fb fba1 	bl	8000cb8 <__aeabi_d2lz>
 8005576:	f7fb f811 	bl	800059c <__aeabi_l2d>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4640      	mov	r0, r8
 8005580:	4649      	mov	r1, r9
 8005582:	f7fa fe81 	bl	8000288 <__aeabi_dsub>
 8005586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800558c:	ea43 030a 	orr.w	r3, r3, sl
 8005590:	4313      	orrs	r3, r2
 8005592:	4680      	mov	r8, r0
 8005594:	4689      	mov	r9, r1
 8005596:	d053      	beq.n	8005640 <_strtod_l+0xba8>
 8005598:	a335      	add	r3, pc, #212	; (adr r3, 8005670 <_strtod_l+0xbd8>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fb fa9d 	bl	8000adc <__aeabi_dcmplt>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	f47f acce 	bne.w	8004f44 <_strtod_l+0x4ac>
 80055a8:	a333      	add	r3, pc, #204	; (adr r3, 8005678 <_strtod_l+0xbe0>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	4640      	mov	r0, r8
 80055b0:	4649      	mov	r1, r9
 80055b2:	f7fb fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f43f af7b 	beq.w	80054b2 <_strtod_l+0xa1a>
 80055bc:	e4c2      	b.n	8004f44 <_strtod_l+0x4ac>
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	b333      	cbz	r3, 8005610 <_strtod_l+0xb78>
 80055c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80055c8:	d822      	bhi.n	8005610 <_strtod_l+0xb78>
 80055ca:	a32d      	add	r3, pc, #180	; (adr r3, 8005680 <_strtod_l+0xbe8>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fb fa8c 	bl	8000af0 <__aeabi_dcmple>
 80055d8:	b1a0      	cbz	r0, 8005604 <_strtod_l+0xb6c>
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	f7fb fae3 	bl	8000ba8 <__aeabi_d2uiz>
 80055e2:	2801      	cmp	r0, #1
 80055e4:	bf38      	it	cc
 80055e6:	2001      	movcc	r0, #1
 80055e8:	f7fa ff8c 	bl	8000504 <__aeabi_ui2d>
 80055ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055ee:	4680      	mov	r8, r0
 80055f0:	4689      	mov	r9, r1
 80055f2:	bb13      	cbnz	r3, 800563a <_strtod_l+0xba2>
 80055f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055f8:	9014      	str	r0, [sp, #80]	; 0x50
 80055fa:	9315      	str	r3, [sp, #84]	; 0x54
 80055fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005600:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005608:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	930d      	str	r3, [sp, #52]	; 0x34
 8005610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005614:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005618:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800561c:	f001 ff7a 	bl	8007514 <__ulp>
 8005620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005624:	ec53 2b10 	vmov	r2, r3, d0
 8005628:	f7fa ffe6 	bl	80005f8 <__aeabi_dmul>
 800562c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005630:	f7fa fe2c 	bl	800028c <__adddf3>
 8005634:	4682      	mov	sl, r0
 8005636:	468b      	mov	fp, r1
 8005638:	e78f      	b.n	800555a <_strtod_l+0xac2>
 800563a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800563e:	e7dd      	b.n	80055fc <_strtod_l+0xb64>
 8005640:	a311      	add	r3, pc, #68	; (adr r3, 8005688 <_strtod_l+0xbf0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fb fa49 	bl	8000adc <__aeabi_dcmplt>
 800564a:	e7b4      	b.n	80055b6 <_strtod_l+0xb1e>
 800564c:	2300      	movs	r3, #0
 800564e:	930e      	str	r3, [sp, #56]	; 0x38
 8005650:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005652:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	f7ff ba65 	b.w	8004b24 <_strtod_l+0x8c>
 800565a:	2b65      	cmp	r3, #101	; 0x65
 800565c:	f43f ab5d 	beq.w	8004d1a <_strtod_l+0x282>
 8005660:	2b45      	cmp	r3, #69	; 0x45
 8005662:	f43f ab5a 	beq.w	8004d1a <_strtod_l+0x282>
 8005666:	2201      	movs	r2, #1
 8005668:	f7ff bb92 	b.w	8004d90 <_strtod_l+0x2f8>
 800566c:	f3af 8000 	nop.w
 8005670:	94a03595 	.word	0x94a03595
 8005674:	3fdfffff 	.word	0x3fdfffff
 8005678:	35afe535 	.word	0x35afe535
 800567c:	3fe00000 	.word	0x3fe00000
 8005680:	ffc00000 	.word	0xffc00000
 8005684:	41dfffff 	.word	0x41dfffff
 8005688:	94a03595 	.word	0x94a03595
 800568c:	3fcfffff 	.word	0x3fcfffff
 8005690:	3ff00000 	.word	0x3ff00000
 8005694:	7ff00000 	.word	0x7ff00000
 8005698:	7fe00000 	.word	0x7fe00000
 800569c:	7c9fffff 	.word	0x7c9fffff
 80056a0:	3fe00000 	.word	0x3fe00000
 80056a4:	bff00000 	.word	0xbff00000
 80056a8:	7fefffff 	.word	0x7fefffff

080056ac <_strtod_r>:
 80056ac:	4b01      	ldr	r3, [pc, #4]	; (80056b4 <_strtod_r+0x8>)
 80056ae:	f7ff b9f3 	b.w	8004a98 <_strtod_l>
 80056b2:	bf00      	nop
 80056b4:	20000098 	.word	0x20000098

080056b8 <_strtol_l.isra.0>:
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056be:	d001      	beq.n	80056c4 <_strtol_l.isra.0+0xc>
 80056c0:	2b24      	cmp	r3, #36	; 0x24
 80056c2:	d906      	bls.n	80056d2 <_strtol_l.isra.0+0x1a>
 80056c4:	f7fe faa2 	bl	8003c0c <__errno>
 80056c8:	2316      	movs	r3, #22
 80056ca:	6003      	str	r3, [r0, #0]
 80056cc:	2000      	movs	r0, #0
 80056ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d2:	4f3a      	ldr	r7, [pc, #232]	; (80057bc <_strtol_l.isra.0+0x104>)
 80056d4:	468e      	mov	lr, r1
 80056d6:	4676      	mov	r6, lr
 80056d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80056dc:	5de5      	ldrb	r5, [r4, r7]
 80056de:	f015 0508 	ands.w	r5, r5, #8
 80056e2:	d1f8      	bne.n	80056d6 <_strtol_l.isra.0+0x1e>
 80056e4:	2c2d      	cmp	r4, #45	; 0x2d
 80056e6:	d134      	bne.n	8005752 <_strtol_l.isra.0+0x9a>
 80056e8:	f89e 4000 	ldrb.w	r4, [lr]
 80056ec:	f04f 0801 	mov.w	r8, #1
 80056f0:	f106 0e02 	add.w	lr, r6, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05c      	beq.n	80057b2 <_strtol_l.isra.0+0xfa>
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d10c      	bne.n	8005716 <_strtol_l.isra.0+0x5e>
 80056fc:	2c30      	cmp	r4, #48	; 0x30
 80056fe:	d10a      	bne.n	8005716 <_strtol_l.isra.0+0x5e>
 8005700:	f89e 4000 	ldrb.w	r4, [lr]
 8005704:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005708:	2c58      	cmp	r4, #88	; 0x58
 800570a:	d14d      	bne.n	80057a8 <_strtol_l.isra.0+0xf0>
 800570c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005710:	2310      	movs	r3, #16
 8005712:	f10e 0e02 	add.w	lr, lr, #2
 8005716:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800571a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800571e:	2600      	movs	r6, #0
 8005720:	fbbc f9f3 	udiv	r9, ip, r3
 8005724:	4635      	mov	r5, r6
 8005726:	fb03 ca19 	mls	sl, r3, r9, ip
 800572a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800572e:	2f09      	cmp	r7, #9
 8005730:	d818      	bhi.n	8005764 <_strtol_l.isra.0+0xac>
 8005732:	463c      	mov	r4, r7
 8005734:	42a3      	cmp	r3, r4
 8005736:	dd24      	ble.n	8005782 <_strtol_l.isra.0+0xca>
 8005738:	2e00      	cmp	r6, #0
 800573a:	db1f      	blt.n	800577c <_strtol_l.isra.0+0xc4>
 800573c:	45a9      	cmp	r9, r5
 800573e:	d31d      	bcc.n	800577c <_strtol_l.isra.0+0xc4>
 8005740:	d101      	bne.n	8005746 <_strtol_l.isra.0+0x8e>
 8005742:	45a2      	cmp	sl, r4
 8005744:	db1a      	blt.n	800577c <_strtol_l.isra.0+0xc4>
 8005746:	fb05 4503 	mla	r5, r5, r3, r4
 800574a:	2601      	movs	r6, #1
 800574c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005750:	e7eb      	b.n	800572a <_strtol_l.isra.0+0x72>
 8005752:	2c2b      	cmp	r4, #43	; 0x2b
 8005754:	bf08      	it	eq
 8005756:	f89e 4000 	ldrbeq.w	r4, [lr]
 800575a:	46a8      	mov	r8, r5
 800575c:	bf08      	it	eq
 800575e:	f106 0e02 	addeq.w	lr, r6, #2
 8005762:	e7c7      	b.n	80056f4 <_strtol_l.isra.0+0x3c>
 8005764:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005768:	2f19      	cmp	r7, #25
 800576a:	d801      	bhi.n	8005770 <_strtol_l.isra.0+0xb8>
 800576c:	3c37      	subs	r4, #55	; 0x37
 800576e:	e7e1      	b.n	8005734 <_strtol_l.isra.0+0x7c>
 8005770:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005774:	2f19      	cmp	r7, #25
 8005776:	d804      	bhi.n	8005782 <_strtol_l.isra.0+0xca>
 8005778:	3c57      	subs	r4, #87	; 0x57
 800577a:	e7db      	b.n	8005734 <_strtol_l.isra.0+0x7c>
 800577c:	f04f 36ff 	mov.w	r6, #4294967295
 8005780:	e7e4      	b.n	800574c <_strtol_l.isra.0+0x94>
 8005782:	2e00      	cmp	r6, #0
 8005784:	da05      	bge.n	8005792 <_strtol_l.isra.0+0xda>
 8005786:	2322      	movs	r3, #34	; 0x22
 8005788:	6003      	str	r3, [r0, #0]
 800578a:	4665      	mov	r5, ip
 800578c:	b942      	cbnz	r2, 80057a0 <_strtol_l.isra.0+0xe8>
 800578e:	4628      	mov	r0, r5
 8005790:	e79d      	b.n	80056ce <_strtol_l.isra.0+0x16>
 8005792:	f1b8 0f00 	cmp.w	r8, #0
 8005796:	d000      	beq.n	800579a <_strtol_l.isra.0+0xe2>
 8005798:	426d      	negs	r5, r5
 800579a:	2a00      	cmp	r2, #0
 800579c:	d0f7      	beq.n	800578e <_strtol_l.isra.0+0xd6>
 800579e:	b10e      	cbz	r6, 80057a4 <_strtol_l.isra.0+0xec>
 80057a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80057a4:	6011      	str	r1, [r2, #0]
 80057a6:	e7f2      	b.n	800578e <_strtol_l.isra.0+0xd6>
 80057a8:	2430      	movs	r4, #48	; 0x30
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1b3      	bne.n	8005716 <_strtol_l.isra.0+0x5e>
 80057ae:	2308      	movs	r3, #8
 80057b0:	e7b1      	b.n	8005716 <_strtol_l.isra.0+0x5e>
 80057b2:	2c30      	cmp	r4, #48	; 0x30
 80057b4:	d0a4      	beq.n	8005700 <_strtol_l.isra.0+0x48>
 80057b6:	230a      	movs	r3, #10
 80057b8:	e7ad      	b.n	8005716 <_strtol_l.isra.0+0x5e>
 80057ba:	bf00      	nop
 80057bc:	0800974d 	.word	0x0800974d

080057c0 <_strtol_r>:
 80057c0:	f7ff bf7a 	b.w	80056b8 <_strtol_l.isra.0>

080057c4 <__assert_func>:
 80057c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057c6:	4614      	mov	r4, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <__assert_func+0x2c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4605      	mov	r5, r0
 80057d0:	68d8      	ldr	r0, [r3, #12]
 80057d2:	b14c      	cbz	r4, 80057e8 <__assert_func+0x24>
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <__assert_func+0x30>)
 80057d6:	9100      	str	r1, [sp, #0]
 80057d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057dc:	4906      	ldr	r1, [pc, #24]	; (80057f8 <__assert_func+0x34>)
 80057de:	462b      	mov	r3, r5
 80057e0:	f000 ff5c 	bl	800669c <fiprintf>
 80057e4:	f002 fca2 	bl	800812c <abort>
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <__assert_func+0x38>)
 80057ea:	461c      	mov	r4, r3
 80057ec:	e7f3      	b.n	80057d6 <__assert_func+0x12>
 80057ee:	bf00      	nop
 80057f0:	20000030 	.word	0x20000030
 80057f4:	08009710 	.word	0x08009710
 80057f8:	0800971d 	.word	0x0800971d
 80057fc:	0800974b 	.word	0x0800974b

08005800 <quorem>:
 8005800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	6903      	ldr	r3, [r0, #16]
 8005806:	690c      	ldr	r4, [r1, #16]
 8005808:	42a3      	cmp	r3, r4
 800580a:	4607      	mov	r7, r0
 800580c:	f2c0 8081 	blt.w	8005912 <quorem+0x112>
 8005810:	3c01      	subs	r4, #1
 8005812:	f101 0814 	add.w	r8, r1, #20
 8005816:	f100 0514 	add.w	r5, r0, #20
 800581a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005828:	3301      	adds	r3, #1
 800582a:	429a      	cmp	r2, r3
 800582c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005834:	fbb2 f6f3 	udiv	r6, r2, r3
 8005838:	d331      	bcc.n	800589e <quorem+0x9e>
 800583a:	f04f 0e00 	mov.w	lr, #0
 800583e:	4640      	mov	r0, r8
 8005840:	46ac      	mov	ip, r5
 8005842:	46f2      	mov	sl, lr
 8005844:	f850 2b04 	ldr.w	r2, [r0], #4
 8005848:	b293      	uxth	r3, r2
 800584a:	fb06 e303 	mla	r3, r6, r3, lr
 800584e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005852:	b29b      	uxth	r3, r3
 8005854:	ebaa 0303 	sub.w	r3, sl, r3
 8005858:	0c12      	lsrs	r2, r2, #16
 800585a:	f8dc a000 	ldr.w	sl, [ip]
 800585e:	fb06 e202 	mla	r2, r6, r2, lr
 8005862:	fa13 f38a 	uxtah	r3, r3, sl
 8005866:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800586a:	fa1f fa82 	uxth.w	sl, r2
 800586e:	f8dc 2000 	ldr.w	r2, [ip]
 8005872:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005876:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800587a:	b29b      	uxth	r3, r3
 800587c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005880:	4581      	cmp	r9, r0
 8005882:	f84c 3b04 	str.w	r3, [ip], #4
 8005886:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800588a:	d2db      	bcs.n	8005844 <quorem+0x44>
 800588c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005890:	b92b      	cbnz	r3, 800589e <quorem+0x9e>
 8005892:	9b01      	ldr	r3, [sp, #4]
 8005894:	3b04      	subs	r3, #4
 8005896:	429d      	cmp	r5, r3
 8005898:	461a      	mov	r2, r3
 800589a:	d32e      	bcc.n	80058fa <quorem+0xfa>
 800589c:	613c      	str	r4, [r7, #16]
 800589e:	4638      	mov	r0, r7
 80058a0:	f001 fd94 	bl	80073cc <__mcmp>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	db24      	blt.n	80058f2 <quorem+0xf2>
 80058a8:	3601      	adds	r6, #1
 80058aa:	4628      	mov	r0, r5
 80058ac:	f04f 0c00 	mov.w	ip, #0
 80058b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80058b4:	f8d0 e000 	ldr.w	lr, [r0]
 80058b8:	b293      	uxth	r3, r2
 80058ba:	ebac 0303 	sub.w	r3, ip, r3
 80058be:	0c12      	lsrs	r2, r2, #16
 80058c0:	fa13 f38e 	uxtah	r3, r3, lr
 80058c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058d2:	45c1      	cmp	r9, r8
 80058d4:	f840 3b04 	str.w	r3, [r0], #4
 80058d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058dc:	d2e8      	bcs.n	80058b0 <quorem+0xb0>
 80058de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058e6:	b922      	cbnz	r2, 80058f2 <quorem+0xf2>
 80058e8:	3b04      	subs	r3, #4
 80058ea:	429d      	cmp	r5, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	d30a      	bcc.n	8005906 <quorem+0x106>
 80058f0:	613c      	str	r4, [r7, #16]
 80058f2:	4630      	mov	r0, r6
 80058f4:	b003      	add	sp, #12
 80058f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	3b04      	subs	r3, #4
 80058fe:	2a00      	cmp	r2, #0
 8005900:	d1cc      	bne.n	800589c <quorem+0x9c>
 8005902:	3c01      	subs	r4, #1
 8005904:	e7c7      	b.n	8005896 <quorem+0x96>
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	3b04      	subs	r3, #4
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1f0      	bne.n	80058f0 <quorem+0xf0>
 800590e:	3c01      	subs	r4, #1
 8005910:	e7eb      	b.n	80058ea <quorem+0xea>
 8005912:	2000      	movs	r0, #0
 8005914:	e7ee      	b.n	80058f4 <quorem+0xf4>
	...

08005918 <_dtoa_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	ed2d 8b02 	vpush	{d8}
 8005920:	ec57 6b10 	vmov	r6, r7, d0
 8005924:	b095      	sub	sp, #84	; 0x54
 8005926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800592c:	9105      	str	r1, [sp, #20]
 800592e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005932:	4604      	mov	r4, r0
 8005934:	9209      	str	r2, [sp, #36]	; 0x24
 8005936:	930f      	str	r3, [sp, #60]	; 0x3c
 8005938:	b975      	cbnz	r5, 8005958 <_dtoa_r+0x40>
 800593a:	2010      	movs	r0, #16
 800593c:	f001 fa56 	bl	8006dec <malloc>
 8005940:	4602      	mov	r2, r0
 8005942:	6260      	str	r0, [r4, #36]	; 0x24
 8005944:	b920      	cbnz	r0, 8005950 <_dtoa_r+0x38>
 8005946:	4bb2      	ldr	r3, [pc, #712]	; (8005c10 <_dtoa_r+0x2f8>)
 8005948:	21ea      	movs	r1, #234	; 0xea
 800594a:	48b2      	ldr	r0, [pc, #712]	; (8005c14 <_dtoa_r+0x2fc>)
 800594c:	f7ff ff3a 	bl	80057c4 <__assert_func>
 8005950:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005954:	6005      	str	r5, [r0, #0]
 8005956:	60c5      	str	r5, [r0, #12]
 8005958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	b151      	cbz	r1, 8005974 <_dtoa_r+0x5c>
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	604a      	str	r2, [r1, #4]
 8005962:	2301      	movs	r3, #1
 8005964:	4093      	lsls	r3, r2
 8005966:	608b      	str	r3, [r1, #8]
 8005968:	4620      	mov	r0, r4
 800596a:	f001 faa7 	bl	8006ebc <_Bfree>
 800596e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	1e3b      	subs	r3, r7, #0
 8005976:	bfb9      	ittee	lt
 8005978:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800597c:	9303      	strlt	r3, [sp, #12]
 800597e:	2300      	movge	r3, #0
 8005980:	f8c8 3000 	strge.w	r3, [r8]
 8005984:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005988:	4ba3      	ldr	r3, [pc, #652]	; (8005c18 <_dtoa_r+0x300>)
 800598a:	bfbc      	itt	lt
 800598c:	2201      	movlt	r2, #1
 800598e:	f8c8 2000 	strlt.w	r2, [r8]
 8005992:	ea33 0309 	bics.w	r3, r3, r9
 8005996:	d11b      	bne.n	80059d0 <_dtoa_r+0xb8>
 8005998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800599a:	f242 730f 	movw	r3, #9999	; 0x270f
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059a4:	4333      	orrs	r3, r6
 80059a6:	f000 857a 	beq.w	800649e <_dtoa_r+0xb86>
 80059aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ac:	b963      	cbnz	r3, 80059c8 <_dtoa_r+0xb0>
 80059ae:	4b9b      	ldr	r3, [pc, #620]	; (8005c1c <_dtoa_r+0x304>)
 80059b0:	e024      	b.n	80059fc <_dtoa_r+0xe4>
 80059b2:	4b9b      	ldr	r3, [pc, #620]	; (8005c20 <_dtoa_r+0x308>)
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	9800      	ldr	r0, [sp, #0]
 80059be:	b015      	add	sp, #84	; 0x54
 80059c0:	ecbd 8b02 	vpop	{d8}
 80059c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c8:	4b94      	ldr	r3, [pc, #592]	; (8005c1c <_dtoa_r+0x304>)
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	3303      	adds	r3, #3
 80059ce:	e7f3      	b.n	80059b8 <_dtoa_r+0xa0>
 80059d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059d4:	2200      	movs	r2, #0
 80059d6:	ec51 0b17 	vmov	r0, r1, d7
 80059da:	2300      	movs	r3, #0
 80059dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80059e0:	f7fb f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e4:	4680      	mov	r8, r0
 80059e6:	b158      	cbz	r0, 8005a00 <_dtoa_r+0xe8>
 80059e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059ea:	2301      	movs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8551 	beq.w	8006498 <_dtoa_r+0xb80>
 80059f6:	488b      	ldr	r0, [pc, #556]	; (8005c24 <_dtoa_r+0x30c>)
 80059f8:	6018      	str	r0, [r3, #0]
 80059fa:	1e43      	subs	r3, r0, #1
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	e7dd      	b.n	80059bc <_dtoa_r+0xa4>
 8005a00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a04:	aa12      	add	r2, sp, #72	; 0x48
 8005a06:	a913      	add	r1, sp, #76	; 0x4c
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f001 fdff 	bl	800760c <__d2b>
 8005a0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a12:	4683      	mov	fp, r0
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	d07c      	beq.n	8005b12 <_dtoa_r+0x1fa>
 8005a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005a26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a32:	4b7d      	ldr	r3, [pc, #500]	; (8005c28 <_dtoa_r+0x310>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	4630      	mov	r0, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	f7fa fc25 	bl	8000288 <__aeabi_dsub>
 8005a3e:	a36e      	add	r3, pc, #440	; (adr r3, 8005bf8 <_dtoa_r+0x2e0>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	a36d      	add	r3, pc, #436	; (adr r3, 8005c00 <_dtoa_r+0x2e8>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	4606      	mov	r6, r0
 8005a54:	4628      	mov	r0, r5
 8005a56:	460f      	mov	r7, r1
 8005a58:	f7fa fd64 	bl	8000524 <__aeabi_i2d>
 8005a5c:	a36a      	add	r3, pc, #424	; (adr r3, 8005c08 <_dtoa_r+0x2f0>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fdc9 	bl	80005f8 <__aeabi_dmul>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	f7fa fc0d 	bl	800028c <__adddf3>
 8005a72:	4606      	mov	r6, r0
 8005a74:	460f      	mov	r7, r1
 8005a76:	f7fb f86f 	bl	8000b58 <__aeabi_d2iz>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4630      	mov	r0, r6
 8005a82:	4639      	mov	r1, r7
 8005a84:	f7fb f82a 	bl	8000adc <__aeabi_dcmplt>
 8005a88:	b148      	cbz	r0, 8005a9e <_dtoa_r+0x186>
 8005a8a:	4650      	mov	r0, sl
 8005a8c:	f7fa fd4a 	bl	8000524 <__aeabi_i2d>
 8005a90:	4632      	mov	r2, r6
 8005a92:	463b      	mov	r3, r7
 8005a94:	f7fb f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a98:	b908      	cbnz	r0, 8005a9e <_dtoa_r+0x186>
 8005a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a9e:	f1ba 0f16 	cmp.w	sl, #22
 8005aa2:	d854      	bhi.n	8005b4e <_dtoa_r+0x236>
 8005aa4:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <_dtoa_r+0x314>)
 8005aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ab2:	f7fb f813 	bl	8000adc <__aeabi_dcmplt>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d04b      	beq.n	8005b52 <_dtoa_r+0x23a>
 8005aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005abe:	2300      	movs	r3, #0
 8005ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ac4:	1b5d      	subs	r5, r3, r5
 8005ac6:	1e6b      	subs	r3, r5, #1
 8005ac8:	9304      	str	r3, [sp, #16]
 8005aca:	bf43      	ittte	mi
 8005acc:	2300      	movmi	r3, #0
 8005ace:	f1c5 0801 	rsbmi	r8, r5, #1
 8005ad2:	9304      	strmi	r3, [sp, #16]
 8005ad4:	f04f 0800 	movpl.w	r8, #0
 8005ad8:	f1ba 0f00 	cmp.w	sl, #0
 8005adc:	db3b      	blt.n	8005b56 <_dtoa_r+0x23e>
 8005ade:	9b04      	ldr	r3, [sp, #16]
 8005ae0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005ae4:	4453      	add	r3, sl
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9306      	str	r3, [sp, #24]
 8005aec:	9b05      	ldr	r3, [sp, #20]
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d869      	bhi.n	8005bc6 <_dtoa_r+0x2ae>
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	bfc4      	itt	gt
 8005af6:	3b04      	subgt	r3, #4
 8005af8:	9305      	strgt	r3, [sp, #20]
 8005afa:	9b05      	ldr	r3, [sp, #20]
 8005afc:	f1a3 0302 	sub.w	r3, r3, #2
 8005b00:	bfcc      	ite	gt
 8005b02:	2500      	movgt	r5, #0
 8005b04:	2501      	movle	r5, #1
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d869      	bhi.n	8005bde <_dtoa_r+0x2c6>
 8005b0a:	e8df f003 	tbb	[pc, r3]
 8005b0e:	4e2c      	.short	0x4e2c
 8005b10:	5a4c      	.short	0x5a4c
 8005b12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b16:	441d      	add	r5, r3
 8005b18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	bfc1      	itttt	gt
 8005b20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b28:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b30:	bfda      	itte	le
 8005b32:	f1c3 0320 	rsble	r3, r3, #32
 8005b36:	fa06 f003 	lslle.w	r0, r6, r3
 8005b3a:	4318      	orrgt	r0, r3
 8005b3c:	f7fa fce2 	bl	8000504 <__aeabi_ui2d>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4606      	mov	r6, r0
 8005b44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b48:	3d01      	subs	r5, #1
 8005b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8005b4c:	e771      	b.n	8005a32 <_dtoa_r+0x11a>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e7b6      	b.n	8005ac0 <_dtoa_r+0x1a8>
 8005b52:	900e      	str	r0, [sp, #56]	; 0x38
 8005b54:	e7b5      	b.n	8005ac2 <_dtoa_r+0x1aa>
 8005b56:	f1ca 0300 	rsb	r3, sl, #0
 8005b5a:	9306      	str	r3, [sp, #24]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	eba8 080a 	sub.w	r8, r8, sl
 8005b62:	930d      	str	r3, [sp, #52]	; 0x34
 8005b64:	e7c2      	b.n	8005aec <_dtoa_r+0x1d4>
 8005b66:	2300      	movs	r3, #0
 8005b68:	9308      	str	r3, [sp, #32]
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dc39      	bgt.n	8005be4 <_dtoa_r+0x2cc>
 8005b70:	f04f 0901 	mov.w	r9, #1
 8005b74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b78:	464b      	mov	r3, r9
 8005b7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b80:	2200      	movs	r2, #0
 8005b82:	6042      	str	r2, [r0, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	f102 0614 	add.w	r6, r2, #20
 8005b8a:	429e      	cmp	r6, r3
 8005b8c:	6841      	ldr	r1, [r0, #4]
 8005b8e:	d92f      	bls.n	8005bf0 <_dtoa_r+0x2d8>
 8005b90:	4620      	mov	r0, r4
 8005b92:	f001 f953 	bl	8006e3c <_Balloc>
 8005b96:	9000      	str	r0, [sp, #0]
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d14b      	bne.n	8005c34 <_dtoa_r+0x31c>
 8005b9c:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <_dtoa_r+0x318>)
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ba4:	e6d1      	b.n	800594a <_dtoa_r+0x32>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e7de      	b.n	8005b68 <_dtoa_r+0x250>
 8005baa:	2300      	movs	r3, #0
 8005bac:	9308      	str	r3, [sp, #32]
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	eb0a 0903 	add.w	r9, sl, r3
 8005bb4:	f109 0301 	add.w	r3, r9, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	bfb8      	it	lt
 8005bbe:	2301      	movlt	r3, #1
 8005bc0:	e7dd      	b.n	8005b7e <_dtoa_r+0x266>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e7f2      	b.n	8005bac <_dtoa_r+0x294>
 8005bc6:	2501      	movs	r5, #1
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	9508      	str	r5, [sp, #32]
 8005bce:	f04f 39ff 	mov.w	r9, #4294967295
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bd8:	2312      	movs	r3, #18
 8005bda:	9209      	str	r2, [sp, #36]	; 0x24
 8005bdc:	e7cf      	b.n	8005b7e <_dtoa_r+0x266>
 8005bde:	2301      	movs	r3, #1
 8005be0:	9308      	str	r3, [sp, #32]
 8005be2:	e7f4      	b.n	8005bce <_dtoa_r+0x2b6>
 8005be4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bec:	464b      	mov	r3, r9
 8005bee:	e7c6      	b.n	8005b7e <_dtoa_r+0x266>
 8005bf0:	3101      	adds	r1, #1
 8005bf2:	6041      	str	r1, [r0, #4]
 8005bf4:	0052      	lsls	r2, r2, #1
 8005bf6:	e7c6      	b.n	8005b86 <_dtoa_r+0x26e>
 8005bf8:	636f4361 	.word	0x636f4361
 8005bfc:	3fd287a7 	.word	0x3fd287a7
 8005c00:	8b60c8b3 	.word	0x8b60c8b3
 8005c04:	3fc68a28 	.word	0x3fc68a28
 8005c08:	509f79fb 	.word	0x509f79fb
 8005c0c:	3fd34413 	.word	0x3fd34413
 8005c10:	08009649 	.word	0x08009649
 8005c14:	0800985a 	.word	0x0800985a
 8005c18:	7ff00000 	.word	0x7ff00000
 8005c1c:	08009856 	.word	0x08009856
 8005c20:	0800984d 	.word	0x0800984d
 8005c24:	08009621 	.word	0x08009621
 8005c28:	3ff80000 	.word	0x3ff80000
 8005c2c:	08009a38 	.word	0x08009a38
 8005c30:	080098b9 	.word	0x080098b9
 8005c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c36:	9a00      	ldr	r2, [sp, #0]
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	9b01      	ldr	r3, [sp, #4]
 8005c3c:	2b0e      	cmp	r3, #14
 8005c3e:	f200 80ad 	bhi.w	8005d9c <_dtoa_r+0x484>
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	f000 80aa 	beq.w	8005d9c <_dtoa_r+0x484>
 8005c48:	f1ba 0f00 	cmp.w	sl, #0
 8005c4c:	dd36      	ble.n	8005cbc <_dtoa_r+0x3a4>
 8005c4e:	4ac3      	ldr	r2, [pc, #780]	; (8005f5c <_dtoa_r+0x644>)
 8005c50:	f00a 030f 	and.w	r3, sl, #15
 8005c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c58:	ed93 7b00 	vldr	d7, [r3]
 8005c5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005c64:	eeb0 8a47 	vmov.f32	s16, s14
 8005c68:	eef0 8a67 	vmov.f32	s17, s15
 8005c6c:	d016      	beq.n	8005c9c <_dtoa_r+0x384>
 8005c6e:	4bbc      	ldr	r3, [pc, #752]	; (8005f60 <_dtoa_r+0x648>)
 8005c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c78:	f7fa fde8 	bl	800084c <__aeabi_ddiv>
 8005c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c80:	f007 070f 	and.w	r7, r7, #15
 8005c84:	2503      	movs	r5, #3
 8005c86:	4eb6      	ldr	r6, [pc, #728]	; (8005f60 <_dtoa_r+0x648>)
 8005c88:	b957      	cbnz	r7, 8005ca0 <_dtoa_r+0x388>
 8005c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8e:	ec53 2b18 	vmov	r2, r3, d8
 8005c92:	f7fa fddb 	bl	800084c <__aeabi_ddiv>
 8005c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9a:	e029      	b.n	8005cf0 <_dtoa_r+0x3d8>
 8005c9c:	2502      	movs	r5, #2
 8005c9e:	e7f2      	b.n	8005c86 <_dtoa_r+0x36e>
 8005ca0:	07f9      	lsls	r1, r7, #31
 8005ca2:	d508      	bpl.n	8005cb6 <_dtoa_r+0x39e>
 8005ca4:	ec51 0b18 	vmov	r0, r1, d8
 8005ca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cac:	f7fa fca4 	bl	80005f8 <__aeabi_dmul>
 8005cb0:	ec41 0b18 	vmov	d8, r0, r1
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	107f      	asrs	r7, r7, #1
 8005cb8:	3608      	adds	r6, #8
 8005cba:	e7e5      	b.n	8005c88 <_dtoa_r+0x370>
 8005cbc:	f000 80a6 	beq.w	8005e0c <_dtoa_r+0x4f4>
 8005cc0:	f1ca 0600 	rsb	r6, sl, #0
 8005cc4:	4ba5      	ldr	r3, [pc, #660]	; (8005f5c <_dtoa_r+0x644>)
 8005cc6:	4fa6      	ldr	r7, [pc, #664]	; (8005f60 <_dtoa_r+0x648>)
 8005cc8:	f006 020f 	and.w	r2, r6, #15
 8005ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cd8:	f7fa fc8e 	bl	80005f8 <__aeabi_dmul>
 8005cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce0:	1136      	asrs	r6, r6, #4
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2502      	movs	r5, #2
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	f040 8085 	bne.w	8005df6 <_dtoa_r+0x4de>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1d2      	bne.n	8005c96 <_dtoa_r+0x37e>
 8005cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 808c 	beq.w	8005e10 <_dtoa_r+0x4f8>
 8005cf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cfc:	4b99      	ldr	r3, [pc, #612]	; (8005f64 <_dtoa_r+0x64c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4630      	mov	r0, r6
 8005d02:	4639      	mov	r1, r7
 8005d04:	f7fa feea 	bl	8000adc <__aeabi_dcmplt>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f000 8081 	beq.w	8005e10 <_dtoa_r+0x4f8>
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d07d      	beq.n	8005e10 <_dtoa_r+0x4f8>
 8005d14:	f1b9 0f00 	cmp.w	r9, #0
 8005d18:	dd3c      	ble.n	8005d94 <_dtoa_r+0x47c>
 8005d1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	2200      	movs	r2, #0
 8005d22:	4b91      	ldr	r3, [pc, #580]	; (8005f68 <_dtoa_r+0x650>)
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa fc66 	bl	80005f8 <__aeabi_dmul>
 8005d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d30:	3501      	adds	r5, #1
 8005d32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005d36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fa fbf2 	bl	8000524 <__aeabi_i2d>
 8005d40:	4632      	mov	r2, r6
 8005d42:	463b      	mov	r3, r7
 8005d44:	f7fa fc58 	bl	80005f8 <__aeabi_dmul>
 8005d48:	4b88      	ldr	r3, [pc, #544]	; (8005f6c <_dtoa_r+0x654>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f7fa fa9e 	bl	800028c <__adddf3>
 8005d50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d58:	9303      	str	r3, [sp, #12]
 8005d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d15c      	bne.n	8005e1a <_dtoa_r+0x502>
 8005d60:	4b83      	ldr	r3, [pc, #524]	; (8005f70 <_dtoa_r+0x658>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fa8e 	bl	8000288 <__aeabi_dsub>
 8005d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d70:	4606      	mov	r6, r0
 8005d72:	460f      	mov	r7, r1
 8005d74:	f7fa fed0 	bl	8000b18 <__aeabi_dcmpgt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f040 8296 	bne.w	80062aa <_dtoa_r+0x992>
 8005d7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d82:	4630      	mov	r0, r6
 8005d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d88:	4639      	mov	r1, r7
 8005d8a:	f7fa fea7 	bl	8000adc <__aeabi_dcmplt>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f040 8288 	bne.w	80062a4 <_dtoa_r+0x98c>
 8005d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f2c0 8158 	blt.w	8006054 <_dtoa_r+0x73c>
 8005da4:	f1ba 0f0e 	cmp.w	sl, #14
 8005da8:	f300 8154 	bgt.w	8006054 <_dtoa_r+0x73c>
 8005dac:	4b6b      	ldr	r3, [pc, #428]	; (8005f5c <_dtoa_r+0x644>)
 8005dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005db2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f280 80e3 	bge.w	8005f84 <_dtoa_r+0x66c>
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f300 80df 	bgt.w	8005f84 <_dtoa_r+0x66c>
 8005dc6:	f040 826d 	bne.w	80062a4 <_dtoa_r+0x98c>
 8005dca:	4b69      	ldr	r3, [pc, #420]	; (8005f70 <_dtoa_r+0x658>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa fc11 	bl	80005f8 <__aeabi_dmul>
 8005dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dda:	f7fa fe93 	bl	8000b04 <__aeabi_dcmpge>
 8005dde:	9e01      	ldr	r6, [sp, #4]
 8005de0:	4637      	mov	r7, r6
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f040 8243 	bne.w	800626e <_dtoa_r+0x956>
 8005de8:	9d00      	ldr	r5, [sp, #0]
 8005dea:	2331      	movs	r3, #49	; 0x31
 8005dec:	f805 3b01 	strb.w	r3, [r5], #1
 8005df0:	f10a 0a01 	add.w	sl, sl, #1
 8005df4:	e23f      	b.n	8006276 <_dtoa_r+0x95e>
 8005df6:	07f2      	lsls	r2, r6, #31
 8005df8:	d505      	bpl.n	8005e06 <_dtoa_r+0x4ee>
 8005dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfe:	f7fa fbfb 	bl	80005f8 <__aeabi_dmul>
 8005e02:	3501      	adds	r5, #1
 8005e04:	2301      	movs	r3, #1
 8005e06:	1076      	asrs	r6, r6, #1
 8005e08:	3708      	adds	r7, #8
 8005e0a:	e76c      	b.n	8005ce6 <_dtoa_r+0x3ce>
 8005e0c:	2502      	movs	r5, #2
 8005e0e:	e76f      	b.n	8005cf0 <_dtoa_r+0x3d8>
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e16:	930c      	str	r3, [sp, #48]	; 0x30
 8005e18:	e78d      	b.n	8005d36 <_dtoa_r+0x41e>
 8005e1a:	9900      	ldr	r1, [sp, #0]
 8005e1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e20:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <_dtoa_r+0x644>)
 8005e22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e26:	4401      	add	r1, r0
 8005e28:	9102      	str	r1, [sp, #8]
 8005e2a:	9908      	ldr	r1, [sp, #32]
 8005e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8005e30:	eef0 8a67 	vmov.f32	s17, s15
 8005e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d045      	beq.n	8005ecc <_dtoa_r+0x5b4>
 8005e40:	494c      	ldr	r1, [pc, #304]	; (8005f74 <_dtoa_r+0x65c>)
 8005e42:	2000      	movs	r0, #0
 8005e44:	f7fa fd02 	bl	800084c <__aeabi_ddiv>
 8005e48:	ec53 2b18 	vmov	r2, r3, d8
 8005e4c:	f7fa fa1c 	bl	8000288 <__aeabi_dsub>
 8005e50:	9d00      	ldr	r5, [sp, #0]
 8005e52:	ec41 0b18 	vmov	d8, r0, r1
 8005e56:	4639      	mov	r1, r7
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f7fa fe7d 	bl	8000b58 <__aeabi_d2iz>
 8005e5e:	900c      	str	r0, [sp, #48]	; 0x30
 8005e60:	f7fa fb60 	bl	8000524 <__aeabi_i2d>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4630      	mov	r0, r6
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	f7fa fa0c 	bl	8000288 <__aeabi_dsub>
 8005e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e72:	3330      	adds	r3, #48	; 0x30
 8005e74:	f805 3b01 	strb.w	r3, [r5], #1
 8005e78:	ec53 2b18 	vmov	r2, r3, d8
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	460f      	mov	r7, r1
 8005e80:	f7fa fe2c 	bl	8000adc <__aeabi_dcmplt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d165      	bne.n	8005f54 <_dtoa_r+0x63c>
 8005e88:	4632      	mov	r2, r6
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	4935      	ldr	r1, [pc, #212]	; (8005f64 <_dtoa_r+0x64c>)
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f7fa f9fa 	bl	8000288 <__aeabi_dsub>
 8005e94:	ec53 2b18 	vmov	r2, r3, d8
 8005e98:	f7fa fe20 	bl	8000adc <__aeabi_dcmplt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f040 80b9 	bne.w	8006014 <_dtoa_r+0x6fc>
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	429d      	cmp	r5, r3
 8005ea6:	f43f af75 	beq.w	8005d94 <_dtoa_r+0x47c>
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <_dtoa_r+0x650>)
 8005eac:	ec51 0b18 	vmov	r0, r1, d8
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f7fa fba1 	bl	80005f8 <__aeabi_dmul>
 8005eb6:	4b2c      	ldr	r3, [pc, #176]	; (8005f68 <_dtoa_r+0x650>)
 8005eb8:	ec41 0b18 	vmov	d8, r0, r1
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa fb99 	bl	80005f8 <__aeabi_dmul>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460f      	mov	r7, r1
 8005eca:	e7c4      	b.n	8005e56 <_dtoa_r+0x53e>
 8005ecc:	ec51 0b17 	vmov	r0, r1, d7
 8005ed0:	f7fa fb92 	bl	80005f8 <__aeabi_dmul>
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	9d00      	ldr	r5, [sp, #0]
 8005ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8005eda:	ec41 0b18 	vmov	d8, r0, r1
 8005ede:	4639      	mov	r1, r7
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7fa fe39 	bl	8000b58 <__aeabi_d2iz>
 8005ee6:	9011      	str	r0, [sp, #68]	; 0x44
 8005ee8:	f7fa fb1c 	bl	8000524 <__aeabi_i2d>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa f9c8 	bl	8000288 <__aeabi_dsub>
 8005ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005efa:	3330      	adds	r3, #48	; 0x30
 8005efc:	f805 3b01 	strb.w	r3, [r5], #1
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	429d      	cmp	r5, r3
 8005f04:	4606      	mov	r6, r0
 8005f06:	460f      	mov	r7, r1
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	d134      	bne.n	8005f78 <_dtoa_r+0x660>
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <_dtoa_r+0x65c>)
 8005f10:	ec51 0b18 	vmov	r0, r1, d8
 8005f14:	f7fa f9ba 	bl	800028c <__adddf3>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	4639      	mov	r1, r7
 8005f20:	f7fa fdfa 	bl	8000b18 <__aeabi_dcmpgt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d175      	bne.n	8006014 <_dtoa_r+0x6fc>
 8005f28:	ec53 2b18 	vmov	r2, r3, d8
 8005f2c:	4911      	ldr	r1, [pc, #68]	; (8005f74 <_dtoa_r+0x65c>)
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f7fa f9aa 	bl	8000288 <__aeabi_dsub>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fdce 	bl	8000adc <__aeabi_dcmplt>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f43f af27 	beq.w	8005d94 <_dtoa_r+0x47c>
 8005f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f48:	1e6b      	subs	r3, r5, #1
 8005f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f50:	2b30      	cmp	r3, #48	; 0x30
 8005f52:	d0f8      	beq.n	8005f46 <_dtoa_r+0x62e>
 8005f54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f58:	e04a      	b.n	8005ff0 <_dtoa_r+0x6d8>
 8005f5a:	bf00      	nop
 8005f5c:	08009a38 	.word	0x08009a38
 8005f60:	08009a10 	.word	0x08009a10
 8005f64:	3ff00000 	.word	0x3ff00000
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	401c0000 	.word	0x401c0000
 8005f70:	40140000 	.word	0x40140000
 8005f74:	3fe00000 	.word	0x3fe00000
 8005f78:	4baf      	ldr	r3, [pc, #700]	; (8006238 <_dtoa_r+0x920>)
 8005f7a:	f7fa fb3d 	bl	80005f8 <__aeabi_dmul>
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460f      	mov	r7, r1
 8005f82:	e7ac      	b.n	8005ede <_dtoa_r+0x5c6>
 8005f84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f88:	9d00      	ldr	r5, [sp, #0]
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4639      	mov	r1, r7
 8005f92:	f7fa fc5b 	bl	800084c <__aeabi_ddiv>
 8005f96:	f7fa fddf 	bl	8000b58 <__aeabi_d2iz>
 8005f9a:	9002      	str	r0, [sp, #8]
 8005f9c:	f7fa fac2 	bl	8000524 <__aeabi_i2d>
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	f7fa fb28 	bl	80005f8 <__aeabi_dmul>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4630      	mov	r0, r6
 8005fae:	4639      	mov	r1, r7
 8005fb0:	f7fa f96a 	bl	8000288 <__aeabi_dsub>
 8005fb4:	9e02      	ldr	r6, [sp, #8]
 8005fb6:	9f01      	ldr	r7, [sp, #4]
 8005fb8:	3630      	adds	r6, #48	; 0x30
 8005fba:	f805 6b01 	strb.w	r6, [r5], #1
 8005fbe:	9e00      	ldr	r6, [sp, #0]
 8005fc0:	1bae      	subs	r6, r5, r6
 8005fc2:	42b7      	cmp	r7, r6
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	d137      	bne.n	800603a <_dtoa_r+0x722>
 8005fca:	f7fa f95f 	bl	800028c <__adddf3>
 8005fce:	4642      	mov	r2, r8
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	f7fa fd9f 	bl	8000b18 <__aeabi_dcmpgt>
 8005fda:	b9c8      	cbnz	r0, 8006010 <_dtoa_r+0x6f8>
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f7fa fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe8:	b110      	cbz	r0, 8005ff0 <_dtoa_r+0x6d8>
 8005fea:	9b02      	ldr	r3, [sp, #8]
 8005fec:	07d9      	lsls	r1, r3, #31
 8005fee:	d40f      	bmi.n	8006010 <_dtoa_r+0x6f8>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	4659      	mov	r1, fp
 8005ff4:	f000 ff62 	bl	8006ebc <_Bfree>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	702b      	strb	r3, [r5, #0]
 8005ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ffe:	f10a 0001 	add.w	r0, sl, #1
 8006002:	6018      	str	r0, [r3, #0]
 8006004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006006:	2b00      	cmp	r3, #0
 8006008:	f43f acd8 	beq.w	80059bc <_dtoa_r+0xa4>
 800600c:	601d      	str	r5, [r3, #0]
 800600e:	e4d5      	b.n	80059bc <_dtoa_r+0xa4>
 8006010:	f8cd a01c 	str.w	sl, [sp, #28]
 8006014:	462b      	mov	r3, r5
 8006016:	461d      	mov	r5, r3
 8006018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800601c:	2a39      	cmp	r2, #57	; 0x39
 800601e:	d108      	bne.n	8006032 <_dtoa_r+0x71a>
 8006020:	9a00      	ldr	r2, [sp, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d1f7      	bne.n	8006016 <_dtoa_r+0x6fe>
 8006026:	9a07      	ldr	r2, [sp, #28]
 8006028:	9900      	ldr	r1, [sp, #0]
 800602a:	3201      	adds	r2, #1
 800602c:	9207      	str	r2, [sp, #28]
 800602e:	2230      	movs	r2, #48	; 0x30
 8006030:	700a      	strb	r2, [r1, #0]
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	3201      	adds	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	e78c      	b.n	8005f54 <_dtoa_r+0x63c>
 800603a:	4b7f      	ldr	r3, [pc, #508]	; (8006238 <_dtoa_r+0x920>)
 800603c:	2200      	movs	r2, #0
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	2200      	movs	r2, #0
 8006044:	2300      	movs	r3, #0
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	f7fa fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800604e:	2800      	cmp	r0, #0
 8006050:	d09b      	beq.n	8005f8a <_dtoa_r+0x672>
 8006052:	e7cd      	b.n	8005ff0 <_dtoa_r+0x6d8>
 8006054:	9a08      	ldr	r2, [sp, #32]
 8006056:	2a00      	cmp	r2, #0
 8006058:	f000 80c4 	beq.w	80061e4 <_dtoa_r+0x8cc>
 800605c:	9a05      	ldr	r2, [sp, #20]
 800605e:	2a01      	cmp	r2, #1
 8006060:	f300 80a8 	bgt.w	80061b4 <_dtoa_r+0x89c>
 8006064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006066:	2a00      	cmp	r2, #0
 8006068:	f000 80a0 	beq.w	80061ac <_dtoa_r+0x894>
 800606c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006070:	9e06      	ldr	r6, [sp, #24]
 8006072:	4645      	mov	r5, r8
 8006074:	9a04      	ldr	r2, [sp, #16]
 8006076:	2101      	movs	r1, #1
 8006078:	441a      	add	r2, r3
 800607a:	4620      	mov	r0, r4
 800607c:	4498      	add	r8, r3
 800607e:	9204      	str	r2, [sp, #16]
 8006080:	f001 f822 	bl	80070c8 <__i2b>
 8006084:	4607      	mov	r7, r0
 8006086:	2d00      	cmp	r5, #0
 8006088:	dd0b      	ble.n	80060a2 <_dtoa_r+0x78a>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd08      	ble.n	80060a2 <_dtoa_r+0x78a>
 8006090:	42ab      	cmp	r3, r5
 8006092:	9a04      	ldr	r2, [sp, #16]
 8006094:	bfa8      	it	ge
 8006096:	462b      	movge	r3, r5
 8006098:	eba8 0803 	sub.w	r8, r8, r3
 800609c:	1aed      	subs	r5, r5, r3
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	9b06      	ldr	r3, [sp, #24]
 80060a4:	b1fb      	cbz	r3, 80060e6 <_dtoa_r+0x7ce>
 80060a6:	9b08      	ldr	r3, [sp, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 809f 	beq.w	80061ec <_dtoa_r+0x8d4>
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	dd11      	ble.n	80060d6 <_dtoa_r+0x7be>
 80060b2:	4639      	mov	r1, r7
 80060b4:	4632      	mov	r2, r6
 80060b6:	4620      	mov	r0, r4
 80060b8:	f001 f8c2 	bl	8007240 <__pow5mult>
 80060bc:	465a      	mov	r2, fp
 80060be:	4601      	mov	r1, r0
 80060c0:	4607      	mov	r7, r0
 80060c2:	4620      	mov	r0, r4
 80060c4:	f001 f816 	bl	80070f4 <__multiply>
 80060c8:	4659      	mov	r1, fp
 80060ca:	9007      	str	r0, [sp, #28]
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 fef5 	bl	8006ebc <_Bfree>
 80060d2:	9b07      	ldr	r3, [sp, #28]
 80060d4:	469b      	mov	fp, r3
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	1b9a      	subs	r2, r3, r6
 80060da:	d004      	beq.n	80060e6 <_dtoa_r+0x7ce>
 80060dc:	4659      	mov	r1, fp
 80060de:	4620      	mov	r0, r4
 80060e0:	f001 f8ae 	bl	8007240 <__pow5mult>
 80060e4:	4683      	mov	fp, r0
 80060e6:	2101      	movs	r1, #1
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 ffed 	bl	80070c8 <__i2b>
 80060ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	4606      	mov	r6, r0
 80060f4:	dd7c      	ble.n	80061f0 <_dtoa_r+0x8d8>
 80060f6:	461a      	mov	r2, r3
 80060f8:	4601      	mov	r1, r0
 80060fa:	4620      	mov	r0, r4
 80060fc:	f001 f8a0 	bl	8007240 <__pow5mult>
 8006100:	9b05      	ldr	r3, [sp, #20]
 8006102:	2b01      	cmp	r3, #1
 8006104:	4606      	mov	r6, r0
 8006106:	dd76      	ble.n	80061f6 <_dtoa_r+0x8de>
 8006108:	2300      	movs	r3, #0
 800610a:	9306      	str	r3, [sp, #24]
 800610c:	6933      	ldr	r3, [r6, #16]
 800610e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006112:	6918      	ldr	r0, [r3, #16]
 8006114:	f000 ff88 	bl	8007028 <__hi0bits>
 8006118:	f1c0 0020 	rsb	r0, r0, #32
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	4418      	add	r0, r3
 8006120:	f010 001f 	ands.w	r0, r0, #31
 8006124:	f000 8086 	beq.w	8006234 <_dtoa_r+0x91c>
 8006128:	f1c0 0320 	rsb	r3, r0, #32
 800612c:	2b04      	cmp	r3, #4
 800612e:	dd7f      	ble.n	8006230 <_dtoa_r+0x918>
 8006130:	f1c0 001c 	rsb	r0, r0, #28
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	4403      	add	r3, r0
 8006138:	4480      	add	r8, r0
 800613a:	4405      	add	r5, r0
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	f1b8 0f00 	cmp.w	r8, #0
 8006142:	dd05      	ble.n	8006150 <_dtoa_r+0x838>
 8006144:	4659      	mov	r1, fp
 8006146:	4642      	mov	r2, r8
 8006148:	4620      	mov	r0, r4
 800614a:	f001 f8d3 	bl	80072f4 <__lshift>
 800614e:	4683      	mov	fp, r0
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	dd05      	ble.n	8006162 <_dtoa_r+0x84a>
 8006156:	4631      	mov	r1, r6
 8006158:	461a      	mov	r2, r3
 800615a:	4620      	mov	r0, r4
 800615c:	f001 f8ca 	bl	80072f4 <__lshift>
 8006160:	4606      	mov	r6, r0
 8006162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d069      	beq.n	800623c <_dtoa_r+0x924>
 8006168:	4631      	mov	r1, r6
 800616a:	4658      	mov	r0, fp
 800616c:	f001 f92e 	bl	80073cc <__mcmp>
 8006170:	2800      	cmp	r0, #0
 8006172:	da63      	bge.n	800623c <_dtoa_r+0x924>
 8006174:	2300      	movs	r3, #0
 8006176:	4659      	mov	r1, fp
 8006178:	220a      	movs	r2, #10
 800617a:	4620      	mov	r0, r4
 800617c:	f000 fec0 	bl	8006f00 <__multadd>
 8006180:	9b08      	ldr	r3, [sp, #32]
 8006182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006186:	4683      	mov	fp, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 818f 	beq.w	80064ac <_dtoa_r+0xb94>
 800618e:	4639      	mov	r1, r7
 8006190:	2300      	movs	r3, #0
 8006192:	220a      	movs	r2, #10
 8006194:	4620      	mov	r0, r4
 8006196:	f000 feb3 	bl	8006f00 <__multadd>
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	4607      	mov	r7, r0
 80061a0:	f300 808e 	bgt.w	80062c0 <_dtoa_r+0x9a8>
 80061a4:	9b05      	ldr	r3, [sp, #20]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dc50      	bgt.n	800624c <_dtoa_r+0x934>
 80061aa:	e089      	b.n	80062c0 <_dtoa_r+0x9a8>
 80061ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061b2:	e75d      	b.n	8006070 <_dtoa_r+0x758>
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	1e5e      	subs	r6, r3, #1
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	42b3      	cmp	r3, r6
 80061bc:	bfbf      	itttt	lt
 80061be:	9b06      	ldrlt	r3, [sp, #24]
 80061c0:	9606      	strlt	r6, [sp, #24]
 80061c2:	1af2      	sublt	r2, r6, r3
 80061c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80061c6:	bfb6      	itet	lt
 80061c8:	189b      	addlt	r3, r3, r2
 80061ca:	1b9e      	subge	r6, r3, r6
 80061cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	bfb8      	it	lt
 80061d2:	2600      	movlt	r6, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfb5      	itete	lt
 80061d8:	eba8 0503 	sublt.w	r5, r8, r3
 80061dc:	9b01      	ldrge	r3, [sp, #4]
 80061de:	2300      	movlt	r3, #0
 80061e0:	4645      	movge	r5, r8
 80061e2:	e747      	b.n	8006074 <_dtoa_r+0x75c>
 80061e4:	9e06      	ldr	r6, [sp, #24]
 80061e6:	9f08      	ldr	r7, [sp, #32]
 80061e8:	4645      	mov	r5, r8
 80061ea:	e74c      	b.n	8006086 <_dtoa_r+0x76e>
 80061ec:	9a06      	ldr	r2, [sp, #24]
 80061ee:	e775      	b.n	80060dc <_dtoa_r+0x7c4>
 80061f0:	9b05      	ldr	r3, [sp, #20]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	dc18      	bgt.n	8006228 <_dtoa_r+0x910>
 80061f6:	9b02      	ldr	r3, [sp, #8]
 80061f8:	b9b3      	cbnz	r3, 8006228 <_dtoa_r+0x910>
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006200:	b9a3      	cbnz	r3, 800622c <_dtoa_r+0x914>
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006208:	0d1b      	lsrs	r3, r3, #20
 800620a:	051b      	lsls	r3, r3, #20
 800620c:	b12b      	cbz	r3, 800621a <_dtoa_r+0x902>
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	f108 0801 	add.w	r8, r8, #1
 8006218:	2301      	movs	r3, #1
 800621a:	9306      	str	r3, [sp, #24]
 800621c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800621e:	2b00      	cmp	r3, #0
 8006220:	f47f af74 	bne.w	800610c <_dtoa_r+0x7f4>
 8006224:	2001      	movs	r0, #1
 8006226:	e779      	b.n	800611c <_dtoa_r+0x804>
 8006228:	2300      	movs	r3, #0
 800622a:	e7f6      	b.n	800621a <_dtoa_r+0x902>
 800622c:	9b02      	ldr	r3, [sp, #8]
 800622e:	e7f4      	b.n	800621a <_dtoa_r+0x902>
 8006230:	d085      	beq.n	800613e <_dtoa_r+0x826>
 8006232:	4618      	mov	r0, r3
 8006234:	301c      	adds	r0, #28
 8006236:	e77d      	b.n	8006134 <_dtoa_r+0x81c>
 8006238:	40240000 	.word	0x40240000
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dc38      	bgt.n	80062b4 <_dtoa_r+0x99c>
 8006242:	9b05      	ldr	r3, [sp, #20]
 8006244:	2b02      	cmp	r3, #2
 8006246:	dd35      	ble.n	80062b4 <_dtoa_r+0x99c>
 8006248:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800624c:	f1b9 0f00 	cmp.w	r9, #0
 8006250:	d10d      	bne.n	800626e <_dtoa_r+0x956>
 8006252:	4631      	mov	r1, r6
 8006254:	464b      	mov	r3, r9
 8006256:	2205      	movs	r2, #5
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fe51 	bl	8006f00 <__multadd>
 800625e:	4601      	mov	r1, r0
 8006260:	4606      	mov	r6, r0
 8006262:	4658      	mov	r0, fp
 8006264:	f001 f8b2 	bl	80073cc <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	f73f adbd 	bgt.w	8005de8 <_dtoa_r+0x4d0>
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	9d00      	ldr	r5, [sp, #0]
 8006272:	ea6f 0a03 	mvn.w	sl, r3
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	4631      	mov	r1, r6
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fe1d 	bl	8006ebc <_Bfree>
 8006282:	2f00      	cmp	r7, #0
 8006284:	f43f aeb4 	beq.w	8005ff0 <_dtoa_r+0x6d8>
 8006288:	f1b8 0f00 	cmp.w	r8, #0
 800628c:	d005      	beq.n	800629a <_dtoa_r+0x982>
 800628e:	45b8      	cmp	r8, r7
 8006290:	d003      	beq.n	800629a <_dtoa_r+0x982>
 8006292:	4641      	mov	r1, r8
 8006294:	4620      	mov	r0, r4
 8006296:	f000 fe11 	bl	8006ebc <_Bfree>
 800629a:	4639      	mov	r1, r7
 800629c:	4620      	mov	r0, r4
 800629e:	f000 fe0d 	bl	8006ebc <_Bfree>
 80062a2:	e6a5      	b.n	8005ff0 <_dtoa_r+0x6d8>
 80062a4:	2600      	movs	r6, #0
 80062a6:	4637      	mov	r7, r6
 80062a8:	e7e1      	b.n	800626e <_dtoa_r+0x956>
 80062aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80062ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80062b0:	4637      	mov	r7, r6
 80062b2:	e599      	b.n	8005de8 <_dtoa_r+0x4d0>
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80fd 	beq.w	80064ba <_dtoa_r+0xba2>
 80062c0:	2d00      	cmp	r5, #0
 80062c2:	dd05      	ble.n	80062d0 <_dtoa_r+0x9b8>
 80062c4:	4639      	mov	r1, r7
 80062c6:	462a      	mov	r2, r5
 80062c8:	4620      	mov	r0, r4
 80062ca:	f001 f813 	bl	80072f4 <__lshift>
 80062ce:	4607      	mov	r7, r0
 80062d0:	9b06      	ldr	r3, [sp, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d05c      	beq.n	8006390 <_dtoa_r+0xa78>
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fdaf 	bl	8006e3c <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b928      	cbnz	r0, 80062ee <_dtoa_r+0x9d6>
 80062e2:	4b80      	ldr	r3, [pc, #512]	; (80064e4 <_dtoa_r+0xbcc>)
 80062e4:	4602      	mov	r2, r0
 80062e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062ea:	f7ff bb2e 	b.w	800594a <_dtoa_r+0x32>
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	3202      	adds	r2, #2
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	f107 010c 	add.w	r1, r7, #12
 80062f8:	300c      	adds	r0, #12
 80062fa:	f000 fd91 	bl	8006e20 <memcpy>
 80062fe:	2201      	movs	r2, #1
 8006300:	4629      	mov	r1, r5
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fff6 	bl	80072f4 <__lshift>
 8006308:	9b00      	ldr	r3, [sp, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	9b00      	ldr	r3, [sp, #0]
 8006310:	444b      	add	r3, r9
 8006312:	9307      	str	r3, [sp, #28]
 8006314:	9b02      	ldr	r3, [sp, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	46b8      	mov	r8, r7
 800631c:	9306      	str	r3, [sp, #24]
 800631e:	4607      	mov	r7, r0
 8006320:	9b01      	ldr	r3, [sp, #4]
 8006322:	4631      	mov	r1, r6
 8006324:	3b01      	subs	r3, #1
 8006326:	4658      	mov	r0, fp
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	f7ff fa69 	bl	8005800 <quorem>
 800632e:	4603      	mov	r3, r0
 8006330:	3330      	adds	r3, #48	; 0x30
 8006332:	9004      	str	r0, [sp, #16]
 8006334:	4641      	mov	r1, r8
 8006336:	4658      	mov	r0, fp
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	f001 f847 	bl	80073cc <__mcmp>
 800633e:	463a      	mov	r2, r7
 8006340:	4681      	mov	r9, r0
 8006342:	4631      	mov	r1, r6
 8006344:	4620      	mov	r0, r4
 8006346:	f001 f85d 	bl	8007404 <__mdiff>
 800634a:	68c2      	ldr	r2, [r0, #12]
 800634c:	9b08      	ldr	r3, [sp, #32]
 800634e:	4605      	mov	r5, r0
 8006350:	bb02      	cbnz	r2, 8006394 <_dtoa_r+0xa7c>
 8006352:	4601      	mov	r1, r0
 8006354:	4658      	mov	r0, fp
 8006356:	f001 f839 	bl	80073cc <__mcmp>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	4602      	mov	r2, r0
 800635e:	4629      	mov	r1, r5
 8006360:	4620      	mov	r0, r4
 8006362:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006366:	f000 fda9 	bl	8006ebc <_Bfree>
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800636e:	9d01      	ldr	r5, [sp, #4]
 8006370:	ea43 0102 	orr.w	r1, r3, r2
 8006374:	9b06      	ldr	r3, [sp, #24]
 8006376:	430b      	orrs	r3, r1
 8006378:	9b08      	ldr	r3, [sp, #32]
 800637a:	d10d      	bne.n	8006398 <_dtoa_r+0xa80>
 800637c:	2b39      	cmp	r3, #57	; 0x39
 800637e:	d029      	beq.n	80063d4 <_dtoa_r+0xabc>
 8006380:	f1b9 0f00 	cmp.w	r9, #0
 8006384:	dd01      	ble.n	800638a <_dtoa_r+0xa72>
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	3331      	adds	r3, #49	; 0x31
 800638a:	9a02      	ldr	r2, [sp, #8]
 800638c:	7013      	strb	r3, [r2, #0]
 800638e:	e774      	b.n	800627a <_dtoa_r+0x962>
 8006390:	4638      	mov	r0, r7
 8006392:	e7b9      	b.n	8006308 <_dtoa_r+0x9f0>
 8006394:	2201      	movs	r2, #1
 8006396:	e7e2      	b.n	800635e <_dtoa_r+0xa46>
 8006398:	f1b9 0f00 	cmp.w	r9, #0
 800639c:	db06      	blt.n	80063ac <_dtoa_r+0xa94>
 800639e:	9905      	ldr	r1, [sp, #20]
 80063a0:	ea41 0909 	orr.w	r9, r1, r9
 80063a4:	9906      	ldr	r1, [sp, #24]
 80063a6:	ea59 0101 	orrs.w	r1, r9, r1
 80063aa:	d120      	bne.n	80063ee <_dtoa_r+0xad6>
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	ddec      	ble.n	800638a <_dtoa_r+0xa72>
 80063b0:	4659      	mov	r1, fp
 80063b2:	2201      	movs	r2, #1
 80063b4:	4620      	mov	r0, r4
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	f000 ff9c 	bl	80072f4 <__lshift>
 80063bc:	4631      	mov	r1, r6
 80063be:	4683      	mov	fp, r0
 80063c0:	f001 f804 	bl	80073cc <__mcmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	dc02      	bgt.n	80063d0 <_dtoa_r+0xab8>
 80063ca:	d1de      	bne.n	800638a <_dtoa_r+0xa72>
 80063cc:	07da      	lsls	r2, r3, #31
 80063ce:	d5dc      	bpl.n	800638a <_dtoa_r+0xa72>
 80063d0:	2b39      	cmp	r3, #57	; 0x39
 80063d2:	d1d8      	bne.n	8006386 <_dtoa_r+0xa6e>
 80063d4:	9a02      	ldr	r2, [sp, #8]
 80063d6:	2339      	movs	r3, #57	; 0x39
 80063d8:	7013      	strb	r3, [r2, #0]
 80063da:	462b      	mov	r3, r5
 80063dc:	461d      	mov	r5, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063e4:	2a39      	cmp	r2, #57	; 0x39
 80063e6:	d050      	beq.n	800648a <_dtoa_r+0xb72>
 80063e8:	3201      	adds	r2, #1
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e745      	b.n	800627a <_dtoa_r+0x962>
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	dd03      	ble.n	80063fa <_dtoa_r+0xae2>
 80063f2:	2b39      	cmp	r3, #57	; 0x39
 80063f4:	d0ee      	beq.n	80063d4 <_dtoa_r+0xabc>
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7c7      	b.n	800638a <_dtoa_r+0xa72>
 80063fa:	9a01      	ldr	r2, [sp, #4]
 80063fc:	9907      	ldr	r1, [sp, #28]
 80063fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006402:	428a      	cmp	r2, r1
 8006404:	d02a      	beq.n	800645c <_dtoa_r+0xb44>
 8006406:	4659      	mov	r1, fp
 8006408:	2300      	movs	r3, #0
 800640a:	220a      	movs	r2, #10
 800640c:	4620      	mov	r0, r4
 800640e:	f000 fd77 	bl	8006f00 <__multadd>
 8006412:	45b8      	cmp	r8, r7
 8006414:	4683      	mov	fp, r0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	f04f 020a 	mov.w	r2, #10
 800641e:	4641      	mov	r1, r8
 8006420:	4620      	mov	r0, r4
 8006422:	d107      	bne.n	8006434 <_dtoa_r+0xb1c>
 8006424:	f000 fd6c 	bl	8006f00 <__multadd>
 8006428:	4680      	mov	r8, r0
 800642a:	4607      	mov	r7, r0
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	3301      	adds	r3, #1
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	e775      	b.n	8006320 <_dtoa_r+0xa08>
 8006434:	f000 fd64 	bl	8006f00 <__multadd>
 8006438:	4639      	mov	r1, r7
 800643a:	4680      	mov	r8, r0
 800643c:	2300      	movs	r3, #0
 800643e:	220a      	movs	r2, #10
 8006440:	4620      	mov	r0, r4
 8006442:	f000 fd5d 	bl	8006f00 <__multadd>
 8006446:	4607      	mov	r7, r0
 8006448:	e7f0      	b.n	800642c <_dtoa_r+0xb14>
 800644a:	f1b9 0f00 	cmp.w	r9, #0
 800644e:	9a00      	ldr	r2, [sp, #0]
 8006450:	bfcc      	ite	gt
 8006452:	464d      	movgt	r5, r9
 8006454:	2501      	movle	r5, #1
 8006456:	4415      	add	r5, r2
 8006458:	f04f 0800 	mov.w	r8, #0
 800645c:	4659      	mov	r1, fp
 800645e:	2201      	movs	r2, #1
 8006460:	4620      	mov	r0, r4
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	f000 ff46 	bl	80072f4 <__lshift>
 8006468:	4631      	mov	r1, r6
 800646a:	4683      	mov	fp, r0
 800646c:	f000 ffae 	bl	80073cc <__mcmp>
 8006470:	2800      	cmp	r0, #0
 8006472:	dcb2      	bgt.n	80063da <_dtoa_r+0xac2>
 8006474:	d102      	bne.n	800647c <_dtoa_r+0xb64>
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	07db      	lsls	r3, r3, #31
 800647a:	d4ae      	bmi.n	80063da <_dtoa_r+0xac2>
 800647c:	462b      	mov	r3, r5
 800647e:	461d      	mov	r5, r3
 8006480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006484:	2a30      	cmp	r2, #48	; 0x30
 8006486:	d0fa      	beq.n	800647e <_dtoa_r+0xb66>
 8006488:	e6f7      	b.n	800627a <_dtoa_r+0x962>
 800648a:	9a00      	ldr	r2, [sp, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d1a5      	bne.n	80063dc <_dtoa_r+0xac4>
 8006490:	f10a 0a01 	add.w	sl, sl, #1
 8006494:	2331      	movs	r3, #49	; 0x31
 8006496:	e779      	b.n	800638c <_dtoa_r+0xa74>
 8006498:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <_dtoa_r+0xbd0>)
 800649a:	f7ff baaf 	b.w	80059fc <_dtoa_r+0xe4>
 800649e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f47f aa86 	bne.w	80059b2 <_dtoa_r+0x9a>
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <_dtoa_r+0xbd4>)
 80064a8:	f7ff baa8 	b.w	80059fc <_dtoa_r+0xe4>
 80064ac:	f1b9 0f00 	cmp.w	r9, #0
 80064b0:	dc03      	bgt.n	80064ba <_dtoa_r+0xba2>
 80064b2:	9b05      	ldr	r3, [sp, #20]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	f73f aec9 	bgt.w	800624c <_dtoa_r+0x934>
 80064ba:	9d00      	ldr	r5, [sp, #0]
 80064bc:	4631      	mov	r1, r6
 80064be:	4658      	mov	r0, fp
 80064c0:	f7ff f99e 	bl	8005800 <quorem>
 80064c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064c8:	f805 3b01 	strb.w	r3, [r5], #1
 80064cc:	9a00      	ldr	r2, [sp, #0]
 80064ce:	1aaa      	subs	r2, r5, r2
 80064d0:	4591      	cmp	r9, r2
 80064d2:	ddba      	ble.n	800644a <_dtoa_r+0xb32>
 80064d4:	4659      	mov	r1, fp
 80064d6:	2300      	movs	r3, #0
 80064d8:	220a      	movs	r2, #10
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 fd10 	bl	8006f00 <__multadd>
 80064e0:	4683      	mov	fp, r0
 80064e2:	e7eb      	b.n	80064bc <_dtoa_r+0xba4>
 80064e4:	080098b9 	.word	0x080098b9
 80064e8:	08009620 	.word	0x08009620
 80064ec:	0800984d 	.word	0x0800984d

080064f0 <std>:
 80064f0:	2300      	movs	r3, #0
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	e9c0 3300 	strd	r3, r3, [r0]
 80064fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064fe:	6083      	str	r3, [r0, #8]
 8006500:	8181      	strh	r1, [r0, #12]
 8006502:	6643      	str	r3, [r0, #100]	; 0x64
 8006504:	81c2      	strh	r2, [r0, #14]
 8006506:	6183      	str	r3, [r0, #24]
 8006508:	4619      	mov	r1, r3
 800650a:	2208      	movs	r2, #8
 800650c:	305c      	adds	r0, #92	; 0x5c
 800650e:	f7fd fba7 	bl	8003c60 <memset>
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <std+0x38>)
 8006514:	6263      	str	r3, [r4, #36]	; 0x24
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <std+0x3c>)
 8006518:	62a3      	str	r3, [r4, #40]	; 0x28
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <std+0x40>)
 800651c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <std+0x44>)
 8006520:	6224      	str	r4, [r4, #32]
 8006522:	6323      	str	r3, [r4, #48]	; 0x30
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	08007ec1 	.word	0x08007ec1
 800652c:	08007ee3 	.word	0x08007ee3
 8006530:	08007f1b 	.word	0x08007f1b
 8006534:	08007f3f 	.word	0x08007f3f

08006538 <_cleanup_r>:
 8006538:	4901      	ldr	r1, [pc, #4]	; (8006540 <_cleanup_r+0x8>)
 800653a:	f000 b8c1 	b.w	80066c0 <_fwalk_reent>
 800653e:	bf00      	nop
 8006540:	08008269 	.word	0x08008269

08006544 <__sfmoreglue>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	1e4a      	subs	r2, r1, #1
 8006548:	2568      	movs	r5, #104	; 0x68
 800654a:	4355      	muls	r5, r2
 800654c:	460e      	mov	r6, r1
 800654e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006552:	f001 f98d 	bl	8007870 <_malloc_r>
 8006556:	4604      	mov	r4, r0
 8006558:	b140      	cbz	r0, 800656c <__sfmoreglue+0x28>
 800655a:	2100      	movs	r1, #0
 800655c:	e9c0 1600 	strd	r1, r6, [r0]
 8006560:	300c      	adds	r0, #12
 8006562:	60a0      	str	r0, [r4, #8]
 8006564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006568:	f7fd fb7a 	bl	8003c60 <memset>
 800656c:	4620      	mov	r0, r4
 800656e:	bd70      	pop	{r4, r5, r6, pc}

08006570 <__sfp_lock_acquire>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__sfp_lock_acquire+0x8>)
 8006572:	f000 bc38 	b.w	8006de6 <__retarget_lock_acquire_recursive>
 8006576:	bf00      	nop
 8006578:	20002238 	.word	0x20002238

0800657c <__sfp_lock_release>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__sfp_lock_release+0x8>)
 800657e:	f000 bc33 	b.w	8006de8 <__retarget_lock_release_recursive>
 8006582:	bf00      	nop
 8006584:	20002238 	.word	0x20002238

08006588 <__sinit_lock_acquire>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__sinit_lock_acquire+0x8>)
 800658a:	f000 bc2c 	b.w	8006de6 <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	20002233 	.word	0x20002233

08006594 <__sinit_lock_release>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__sinit_lock_release+0x8>)
 8006596:	f000 bc27 	b.w	8006de8 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	20002233 	.word	0x20002233

080065a0 <__sinit>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	f7ff fff0 	bl	8006588 <__sinit_lock_acquire>
 80065a8:	69a3      	ldr	r3, [r4, #24]
 80065aa:	b11b      	cbz	r3, 80065b4 <__sinit+0x14>
 80065ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b0:	f7ff bff0 	b.w	8006594 <__sinit_lock_release>
 80065b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065b8:	6523      	str	r3, [r4, #80]	; 0x50
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <__sinit+0x68>)
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <__sinit+0x6c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80065c2:	42a3      	cmp	r3, r4
 80065c4:	bf04      	itt	eq
 80065c6:	2301      	moveq	r3, #1
 80065c8:	61a3      	streq	r3, [r4, #24]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f820 	bl	8006610 <__sfp>
 80065d0:	6060      	str	r0, [r4, #4]
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f81c 	bl	8006610 <__sfp>
 80065d8:	60a0      	str	r0, [r4, #8]
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 f818 	bl	8006610 <__sfp>
 80065e0:	2200      	movs	r2, #0
 80065e2:	60e0      	str	r0, [r4, #12]
 80065e4:	2104      	movs	r1, #4
 80065e6:	6860      	ldr	r0, [r4, #4]
 80065e8:	f7ff ff82 	bl	80064f0 <std>
 80065ec:	68a0      	ldr	r0, [r4, #8]
 80065ee:	2201      	movs	r2, #1
 80065f0:	2109      	movs	r1, #9
 80065f2:	f7ff ff7d 	bl	80064f0 <std>
 80065f6:	68e0      	ldr	r0, [r4, #12]
 80065f8:	2202      	movs	r2, #2
 80065fa:	2112      	movs	r1, #18
 80065fc:	f7ff ff78 	bl	80064f0 <std>
 8006600:	2301      	movs	r3, #1
 8006602:	61a3      	str	r3, [r4, #24]
 8006604:	e7d2      	b.n	80065ac <__sinit+0xc>
 8006606:	bf00      	nop
 8006608:	0800960c 	.word	0x0800960c
 800660c:	08006539 	.word	0x08006539

08006610 <__sfp>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	4607      	mov	r7, r0
 8006614:	f7ff ffac 	bl	8006570 <__sfp_lock_acquire>
 8006618:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <__sfp+0x84>)
 800661a:	681e      	ldr	r6, [r3, #0]
 800661c:	69b3      	ldr	r3, [r6, #24]
 800661e:	b913      	cbnz	r3, 8006626 <__sfp+0x16>
 8006620:	4630      	mov	r0, r6
 8006622:	f7ff ffbd 	bl	80065a0 <__sinit>
 8006626:	3648      	adds	r6, #72	; 0x48
 8006628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	d503      	bpl.n	8006638 <__sfp+0x28>
 8006630:	6833      	ldr	r3, [r6, #0]
 8006632:	b30b      	cbz	r3, 8006678 <__sfp+0x68>
 8006634:	6836      	ldr	r6, [r6, #0]
 8006636:	e7f7      	b.n	8006628 <__sfp+0x18>
 8006638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800663c:	b9d5      	cbnz	r5, 8006674 <__sfp+0x64>
 800663e:	4b16      	ldr	r3, [pc, #88]	; (8006698 <__sfp+0x88>)
 8006640:	60e3      	str	r3, [r4, #12]
 8006642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006646:	6665      	str	r5, [r4, #100]	; 0x64
 8006648:	f000 fbcc 	bl	8006de4 <__retarget_lock_init_recursive>
 800664c:	f7ff ff96 	bl	800657c <__sfp_lock_release>
 8006650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006658:	6025      	str	r5, [r4, #0]
 800665a:	61a5      	str	r5, [r4, #24]
 800665c:	2208      	movs	r2, #8
 800665e:	4629      	mov	r1, r5
 8006660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006664:	f7fd fafc 	bl	8003c60 <memset>
 8006668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800666c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006670:	4620      	mov	r0, r4
 8006672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006674:	3468      	adds	r4, #104	; 0x68
 8006676:	e7d9      	b.n	800662c <__sfp+0x1c>
 8006678:	2104      	movs	r1, #4
 800667a:	4638      	mov	r0, r7
 800667c:	f7ff ff62 	bl	8006544 <__sfmoreglue>
 8006680:	4604      	mov	r4, r0
 8006682:	6030      	str	r0, [r6, #0]
 8006684:	2800      	cmp	r0, #0
 8006686:	d1d5      	bne.n	8006634 <__sfp+0x24>
 8006688:	f7ff ff78 	bl	800657c <__sfp_lock_release>
 800668c:	230c      	movs	r3, #12
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	e7ee      	b.n	8006670 <__sfp+0x60>
 8006692:	bf00      	nop
 8006694:	0800960c 	.word	0x0800960c
 8006698:	ffff0001 	.word	0xffff0001

0800669c <fiprintf>:
 800669c:	b40e      	push	{r1, r2, r3}
 800669e:	b503      	push	{r0, r1, lr}
 80066a0:	4601      	mov	r1, r0
 80066a2:	ab03      	add	r3, sp, #12
 80066a4:	4805      	ldr	r0, [pc, #20]	; (80066bc <fiprintf+0x20>)
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	f001 fabf 	bl	8007c30 <_vfiprintf_r>
 80066b2:	b002      	add	sp, #8
 80066b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b8:	b003      	add	sp, #12
 80066ba:	4770      	bx	lr
 80066bc:	20000030 	.word	0x20000030

080066c0 <_fwalk_reent>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	4606      	mov	r6, r0
 80066c6:	4688      	mov	r8, r1
 80066c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066cc:	2700      	movs	r7, #0
 80066ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d2:	f1b9 0901 	subs.w	r9, r9, #1
 80066d6:	d505      	bpl.n	80066e4 <_fwalk_reent+0x24>
 80066d8:	6824      	ldr	r4, [r4, #0]
 80066da:	2c00      	cmp	r4, #0
 80066dc:	d1f7      	bne.n	80066ce <_fwalk_reent+0xe>
 80066de:	4638      	mov	r0, r7
 80066e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e4:	89ab      	ldrh	r3, [r5, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d907      	bls.n	80066fa <_fwalk_reent+0x3a>
 80066ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ee:	3301      	adds	r3, #1
 80066f0:	d003      	beq.n	80066fa <_fwalk_reent+0x3a>
 80066f2:	4629      	mov	r1, r5
 80066f4:	4630      	mov	r0, r6
 80066f6:	47c0      	blx	r8
 80066f8:	4307      	orrs	r7, r0
 80066fa:	3568      	adds	r5, #104	; 0x68
 80066fc:	e7e9      	b.n	80066d2 <_fwalk_reent+0x12>

080066fe <rshift>:
 80066fe:	6903      	ldr	r3, [r0, #16]
 8006700:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006708:	ea4f 1261 	mov.w	r2, r1, asr #5
 800670c:	f100 0414 	add.w	r4, r0, #20
 8006710:	dd45      	ble.n	800679e <rshift+0xa0>
 8006712:	f011 011f 	ands.w	r1, r1, #31
 8006716:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800671a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800671e:	d10c      	bne.n	800673a <rshift+0x3c>
 8006720:	f100 0710 	add.w	r7, r0, #16
 8006724:	4629      	mov	r1, r5
 8006726:	42b1      	cmp	r1, r6
 8006728:	d334      	bcc.n	8006794 <rshift+0x96>
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	1eea      	subs	r2, r5, #3
 8006730:	4296      	cmp	r6, r2
 8006732:	bf38      	it	cc
 8006734:	2300      	movcc	r3, #0
 8006736:	4423      	add	r3, r4
 8006738:	e015      	b.n	8006766 <rshift+0x68>
 800673a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800673e:	f1c1 0820 	rsb	r8, r1, #32
 8006742:	40cf      	lsrs	r7, r1
 8006744:	f105 0e04 	add.w	lr, r5, #4
 8006748:	46a1      	mov	r9, r4
 800674a:	4576      	cmp	r6, lr
 800674c:	46f4      	mov	ip, lr
 800674e:	d815      	bhi.n	800677c <rshift+0x7e>
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	009a      	lsls	r2, r3, #2
 8006754:	3a04      	subs	r2, #4
 8006756:	3501      	adds	r5, #1
 8006758:	42ae      	cmp	r6, r5
 800675a:	bf38      	it	cc
 800675c:	2200      	movcc	r2, #0
 800675e:	18a3      	adds	r3, r4, r2
 8006760:	50a7      	str	r7, [r4, r2]
 8006762:	b107      	cbz	r7, 8006766 <rshift+0x68>
 8006764:	3304      	adds	r3, #4
 8006766:	1b1a      	subs	r2, r3, r4
 8006768:	42a3      	cmp	r3, r4
 800676a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800676e:	bf08      	it	eq
 8006770:	2300      	moveq	r3, #0
 8006772:	6102      	str	r2, [r0, #16]
 8006774:	bf08      	it	eq
 8006776:	6143      	streq	r3, [r0, #20]
 8006778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800677c:	f8dc c000 	ldr.w	ip, [ip]
 8006780:	fa0c fc08 	lsl.w	ip, ip, r8
 8006784:	ea4c 0707 	orr.w	r7, ip, r7
 8006788:	f849 7b04 	str.w	r7, [r9], #4
 800678c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006790:	40cf      	lsrs	r7, r1
 8006792:	e7da      	b.n	800674a <rshift+0x4c>
 8006794:	f851 cb04 	ldr.w	ip, [r1], #4
 8006798:	f847 cf04 	str.w	ip, [r7, #4]!
 800679c:	e7c3      	b.n	8006726 <rshift+0x28>
 800679e:	4623      	mov	r3, r4
 80067a0:	e7e1      	b.n	8006766 <rshift+0x68>

080067a2 <__hexdig_fun>:
 80067a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80067a6:	2b09      	cmp	r3, #9
 80067a8:	d802      	bhi.n	80067b0 <__hexdig_fun+0xe>
 80067aa:	3820      	subs	r0, #32
 80067ac:	b2c0      	uxtb	r0, r0
 80067ae:	4770      	bx	lr
 80067b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80067b4:	2b05      	cmp	r3, #5
 80067b6:	d801      	bhi.n	80067bc <__hexdig_fun+0x1a>
 80067b8:	3847      	subs	r0, #71	; 0x47
 80067ba:	e7f7      	b.n	80067ac <__hexdig_fun+0xa>
 80067bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	d801      	bhi.n	80067c8 <__hexdig_fun+0x26>
 80067c4:	3827      	subs	r0, #39	; 0x27
 80067c6:	e7f1      	b.n	80067ac <__hexdig_fun+0xa>
 80067c8:	2000      	movs	r0, #0
 80067ca:	4770      	bx	lr

080067cc <__gethex>:
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	ed2d 8b02 	vpush	{d8}
 80067d4:	b089      	sub	sp, #36	; 0x24
 80067d6:	ee08 0a10 	vmov	s16, r0
 80067da:	9304      	str	r3, [sp, #16]
 80067dc:	4bbc      	ldr	r3, [pc, #752]	; (8006ad0 <__gethex+0x304>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	4618      	mov	r0, r3
 80067e4:	468b      	mov	fp, r1
 80067e6:	4690      	mov	r8, r2
 80067e8:	f7f9 fcf2 	bl	80001d0 <strlen>
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	f8db 2000 	ldr.w	r2, [fp]
 80067f2:	4403      	add	r3, r0
 80067f4:	4682      	mov	sl, r0
 80067f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	1c93      	adds	r3, r2, #2
 80067fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006802:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006806:	32fe      	adds	r2, #254	; 0xfe
 8006808:	18d1      	adds	r1, r2, r3
 800680a:	461f      	mov	r7, r3
 800680c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006810:	9100      	str	r1, [sp, #0]
 8006812:	2830      	cmp	r0, #48	; 0x30
 8006814:	d0f8      	beq.n	8006808 <__gethex+0x3c>
 8006816:	f7ff ffc4 	bl	80067a2 <__hexdig_fun>
 800681a:	4604      	mov	r4, r0
 800681c:	2800      	cmp	r0, #0
 800681e:	d13a      	bne.n	8006896 <__gethex+0xca>
 8006820:	9901      	ldr	r1, [sp, #4]
 8006822:	4652      	mov	r2, sl
 8006824:	4638      	mov	r0, r7
 8006826:	f001 fb8e 	bl	8007f46 <strncmp>
 800682a:	4605      	mov	r5, r0
 800682c:	2800      	cmp	r0, #0
 800682e:	d168      	bne.n	8006902 <__gethex+0x136>
 8006830:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006834:	eb07 060a 	add.w	r6, r7, sl
 8006838:	f7ff ffb3 	bl	80067a2 <__hexdig_fun>
 800683c:	2800      	cmp	r0, #0
 800683e:	d062      	beq.n	8006906 <__gethex+0x13a>
 8006840:	4633      	mov	r3, r6
 8006842:	7818      	ldrb	r0, [r3, #0]
 8006844:	2830      	cmp	r0, #48	; 0x30
 8006846:	461f      	mov	r7, r3
 8006848:	f103 0301 	add.w	r3, r3, #1
 800684c:	d0f9      	beq.n	8006842 <__gethex+0x76>
 800684e:	f7ff ffa8 	bl	80067a2 <__hexdig_fun>
 8006852:	2301      	movs	r3, #1
 8006854:	fab0 f480 	clz	r4, r0
 8006858:	0964      	lsrs	r4, r4, #5
 800685a:	4635      	mov	r5, r6
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	463a      	mov	r2, r7
 8006860:	4616      	mov	r6, r2
 8006862:	3201      	adds	r2, #1
 8006864:	7830      	ldrb	r0, [r6, #0]
 8006866:	f7ff ff9c 	bl	80067a2 <__hexdig_fun>
 800686a:	2800      	cmp	r0, #0
 800686c:	d1f8      	bne.n	8006860 <__gethex+0x94>
 800686e:	9901      	ldr	r1, [sp, #4]
 8006870:	4652      	mov	r2, sl
 8006872:	4630      	mov	r0, r6
 8006874:	f001 fb67 	bl	8007f46 <strncmp>
 8006878:	b980      	cbnz	r0, 800689c <__gethex+0xd0>
 800687a:	b94d      	cbnz	r5, 8006890 <__gethex+0xc4>
 800687c:	eb06 050a 	add.w	r5, r6, sl
 8006880:	462a      	mov	r2, r5
 8006882:	4616      	mov	r6, r2
 8006884:	3201      	adds	r2, #1
 8006886:	7830      	ldrb	r0, [r6, #0]
 8006888:	f7ff ff8b 	bl	80067a2 <__hexdig_fun>
 800688c:	2800      	cmp	r0, #0
 800688e:	d1f8      	bne.n	8006882 <__gethex+0xb6>
 8006890:	1bad      	subs	r5, r5, r6
 8006892:	00ad      	lsls	r5, r5, #2
 8006894:	e004      	b.n	80068a0 <__gethex+0xd4>
 8006896:	2400      	movs	r4, #0
 8006898:	4625      	mov	r5, r4
 800689a:	e7e0      	b.n	800685e <__gethex+0x92>
 800689c:	2d00      	cmp	r5, #0
 800689e:	d1f7      	bne.n	8006890 <__gethex+0xc4>
 80068a0:	7833      	ldrb	r3, [r6, #0]
 80068a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068a6:	2b50      	cmp	r3, #80	; 0x50
 80068a8:	d13b      	bne.n	8006922 <__gethex+0x156>
 80068aa:	7873      	ldrb	r3, [r6, #1]
 80068ac:	2b2b      	cmp	r3, #43	; 0x2b
 80068ae:	d02c      	beq.n	800690a <__gethex+0x13e>
 80068b0:	2b2d      	cmp	r3, #45	; 0x2d
 80068b2:	d02e      	beq.n	8006912 <__gethex+0x146>
 80068b4:	1c71      	adds	r1, r6, #1
 80068b6:	f04f 0900 	mov.w	r9, #0
 80068ba:	7808      	ldrb	r0, [r1, #0]
 80068bc:	f7ff ff71 	bl	80067a2 <__hexdig_fun>
 80068c0:	1e43      	subs	r3, r0, #1
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b18      	cmp	r3, #24
 80068c6:	d82c      	bhi.n	8006922 <__gethex+0x156>
 80068c8:	f1a0 0210 	sub.w	r2, r0, #16
 80068cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80068d0:	f7ff ff67 	bl	80067a2 <__hexdig_fun>
 80068d4:	1e43      	subs	r3, r0, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b18      	cmp	r3, #24
 80068da:	d91d      	bls.n	8006918 <__gethex+0x14c>
 80068dc:	f1b9 0f00 	cmp.w	r9, #0
 80068e0:	d000      	beq.n	80068e4 <__gethex+0x118>
 80068e2:	4252      	negs	r2, r2
 80068e4:	4415      	add	r5, r2
 80068e6:	f8cb 1000 	str.w	r1, [fp]
 80068ea:	b1e4      	cbz	r4, 8006926 <__gethex+0x15a>
 80068ec:	9b00      	ldr	r3, [sp, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bf14      	ite	ne
 80068f2:	2700      	movne	r7, #0
 80068f4:	2706      	moveq	r7, #6
 80068f6:	4638      	mov	r0, r7
 80068f8:	b009      	add	sp, #36	; 0x24
 80068fa:	ecbd 8b02 	vpop	{d8}
 80068fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006902:	463e      	mov	r6, r7
 8006904:	4625      	mov	r5, r4
 8006906:	2401      	movs	r4, #1
 8006908:	e7ca      	b.n	80068a0 <__gethex+0xd4>
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	1cb1      	adds	r1, r6, #2
 8006910:	e7d3      	b.n	80068ba <__gethex+0xee>
 8006912:	f04f 0901 	mov.w	r9, #1
 8006916:	e7fa      	b.n	800690e <__gethex+0x142>
 8006918:	230a      	movs	r3, #10
 800691a:	fb03 0202 	mla	r2, r3, r2, r0
 800691e:	3a10      	subs	r2, #16
 8006920:	e7d4      	b.n	80068cc <__gethex+0x100>
 8006922:	4631      	mov	r1, r6
 8006924:	e7df      	b.n	80068e6 <__gethex+0x11a>
 8006926:	1bf3      	subs	r3, r6, r7
 8006928:	3b01      	subs	r3, #1
 800692a:	4621      	mov	r1, r4
 800692c:	2b07      	cmp	r3, #7
 800692e:	dc0b      	bgt.n	8006948 <__gethex+0x17c>
 8006930:	ee18 0a10 	vmov	r0, s16
 8006934:	f000 fa82 	bl	8006e3c <_Balloc>
 8006938:	4604      	mov	r4, r0
 800693a:	b940      	cbnz	r0, 800694e <__gethex+0x182>
 800693c:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <__gethex+0x308>)
 800693e:	4602      	mov	r2, r0
 8006940:	21de      	movs	r1, #222	; 0xde
 8006942:	4865      	ldr	r0, [pc, #404]	; (8006ad8 <__gethex+0x30c>)
 8006944:	f7fe ff3e 	bl	80057c4 <__assert_func>
 8006948:	3101      	adds	r1, #1
 800694a:	105b      	asrs	r3, r3, #1
 800694c:	e7ee      	b.n	800692c <__gethex+0x160>
 800694e:	f100 0914 	add.w	r9, r0, #20
 8006952:	f04f 0b00 	mov.w	fp, #0
 8006956:	f1ca 0301 	rsb	r3, sl, #1
 800695a:	f8cd 9008 	str.w	r9, [sp, #8]
 800695e:	f8cd b000 	str.w	fp, [sp]
 8006962:	9306      	str	r3, [sp, #24]
 8006964:	42b7      	cmp	r7, r6
 8006966:	d340      	bcc.n	80069ea <__gethex+0x21e>
 8006968:	9802      	ldr	r0, [sp, #8]
 800696a:	9b00      	ldr	r3, [sp, #0]
 800696c:	f840 3b04 	str.w	r3, [r0], #4
 8006970:	eba0 0009 	sub.w	r0, r0, r9
 8006974:	1080      	asrs	r0, r0, #2
 8006976:	0146      	lsls	r6, r0, #5
 8006978:	6120      	str	r0, [r4, #16]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fb54 	bl	8007028 <__hi0bits>
 8006980:	1a30      	subs	r0, r6, r0
 8006982:	f8d8 6000 	ldr.w	r6, [r8]
 8006986:	42b0      	cmp	r0, r6
 8006988:	dd63      	ble.n	8006a52 <__gethex+0x286>
 800698a:	1b87      	subs	r7, r0, r6
 800698c:	4639      	mov	r1, r7
 800698e:	4620      	mov	r0, r4
 8006990:	f000 feee 	bl	8007770 <__any_on>
 8006994:	4682      	mov	sl, r0
 8006996:	b1a8      	cbz	r0, 80069c4 <__gethex+0x1f8>
 8006998:	1e7b      	subs	r3, r7, #1
 800699a:	1159      	asrs	r1, r3, #5
 800699c:	f003 021f 	and.w	r2, r3, #31
 80069a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80069a4:	f04f 0a01 	mov.w	sl, #1
 80069a8:	fa0a f202 	lsl.w	r2, sl, r2
 80069ac:	420a      	tst	r2, r1
 80069ae:	d009      	beq.n	80069c4 <__gethex+0x1f8>
 80069b0:	4553      	cmp	r3, sl
 80069b2:	dd05      	ble.n	80069c0 <__gethex+0x1f4>
 80069b4:	1eb9      	subs	r1, r7, #2
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 feda 	bl	8007770 <__any_on>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d145      	bne.n	8006a4c <__gethex+0x280>
 80069c0:	f04f 0a02 	mov.w	sl, #2
 80069c4:	4639      	mov	r1, r7
 80069c6:	4620      	mov	r0, r4
 80069c8:	f7ff fe99 	bl	80066fe <rshift>
 80069cc:	443d      	add	r5, r7
 80069ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069d2:	42ab      	cmp	r3, r5
 80069d4:	da4c      	bge.n	8006a70 <__gethex+0x2a4>
 80069d6:	ee18 0a10 	vmov	r0, s16
 80069da:	4621      	mov	r1, r4
 80069dc:	f000 fa6e 	bl	8006ebc <_Bfree>
 80069e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069e2:	2300      	movs	r3, #0
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	27a3      	movs	r7, #163	; 0xa3
 80069e8:	e785      	b.n	80068f6 <__gethex+0x12a>
 80069ea:	1e73      	subs	r3, r6, #1
 80069ec:	9a05      	ldr	r2, [sp, #20]
 80069ee:	9303      	str	r3, [sp, #12]
 80069f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d019      	beq.n	8006a2c <__gethex+0x260>
 80069f8:	f1bb 0f20 	cmp.w	fp, #32
 80069fc:	d107      	bne.n	8006a0e <__gethex+0x242>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	9a00      	ldr	r2, [sp, #0]
 8006a02:	f843 2b04 	str.w	r2, [r3], #4
 8006a06:	9302      	str	r3, [sp, #8]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	469b      	mov	fp, r3
 8006a0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006a12:	f7ff fec6 	bl	80067a2 <__hexdig_fun>
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	f000 000f 	and.w	r0, r0, #15
 8006a1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006a20:	4303      	orrs	r3, r0
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	f10b 0b04 	add.w	fp, fp, #4
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	e00d      	b.n	8006a48 <__gethex+0x27c>
 8006a2c:	9b03      	ldr	r3, [sp, #12]
 8006a2e:	9a06      	ldr	r2, [sp, #24]
 8006a30:	4413      	add	r3, r2
 8006a32:	42bb      	cmp	r3, r7
 8006a34:	d3e0      	bcc.n	80069f8 <__gethex+0x22c>
 8006a36:	4618      	mov	r0, r3
 8006a38:	9901      	ldr	r1, [sp, #4]
 8006a3a:	9307      	str	r3, [sp, #28]
 8006a3c:	4652      	mov	r2, sl
 8006a3e:	f001 fa82 	bl	8007f46 <strncmp>
 8006a42:	9b07      	ldr	r3, [sp, #28]
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d1d7      	bne.n	80069f8 <__gethex+0x22c>
 8006a48:	461e      	mov	r6, r3
 8006a4a:	e78b      	b.n	8006964 <__gethex+0x198>
 8006a4c:	f04f 0a03 	mov.w	sl, #3
 8006a50:	e7b8      	b.n	80069c4 <__gethex+0x1f8>
 8006a52:	da0a      	bge.n	8006a6a <__gethex+0x29e>
 8006a54:	1a37      	subs	r7, r6, r0
 8006a56:	4621      	mov	r1, r4
 8006a58:	ee18 0a10 	vmov	r0, s16
 8006a5c:	463a      	mov	r2, r7
 8006a5e:	f000 fc49 	bl	80072f4 <__lshift>
 8006a62:	1bed      	subs	r5, r5, r7
 8006a64:	4604      	mov	r4, r0
 8006a66:	f100 0914 	add.w	r9, r0, #20
 8006a6a:	f04f 0a00 	mov.w	sl, #0
 8006a6e:	e7ae      	b.n	80069ce <__gethex+0x202>
 8006a70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a74:	42a8      	cmp	r0, r5
 8006a76:	dd72      	ble.n	8006b5e <__gethex+0x392>
 8006a78:	1b45      	subs	r5, r0, r5
 8006a7a:	42ae      	cmp	r6, r5
 8006a7c:	dc36      	bgt.n	8006aec <__gethex+0x320>
 8006a7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d02a      	beq.n	8006adc <__gethex+0x310>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d02c      	beq.n	8006ae4 <__gethex+0x318>
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d115      	bne.n	8006aba <__gethex+0x2ee>
 8006a8e:	42ae      	cmp	r6, r5
 8006a90:	d113      	bne.n	8006aba <__gethex+0x2ee>
 8006a92:	2e01      	cmp	r6, #1
 8006a94:	d10b      	bne.n	8006aae <__gethex+0x2e2>
 8006a96:	9a04      	ldr	r2, [sp, #16]
 8006a98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	f8c9 3000 	str.w	r3, [r9]
 8006aa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aa8:	2762      	movs	r7, #98	; 0x62
 8006aaa:	601c      	str	r4, [r3, #0]
 8006aac:	e723      	b.n	80068f6 <__gethex+0x12a>
 8006aae:	1e71      	subs	r1, r6, #1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fe5d 	bl	8007770 <__any_on>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d1ed      	bne.n	8006a96 <__gethex+0x2ca>
 8006aba:	ee18 0a10 	vmov	r0, s16
 8006abe:	4621      	mov	r1, r4
 8006ac0:	f000 f9fc 	bl	8006ebc <_Bfree>
 8006ac4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	2750      	movs	r7, #80	; 0x50
 8006acc:	e713      	b.n	80068f6 <__gethex+0x12a>
 8006ace:	bf00      	nop
 8006ad0:	08009998 	.word	0x08009998
 8006ad4:	080098b9 	.word	0x080098b9
 8006ad8:	0800992c 	.word	0x0800992c
 8006adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1eb      	bne.n	8006aba <__gethex+0x2ee>
 8006ae2:	e7d8      	b.n	8006a96 <__gethex+0x2ca>
 8006ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1d5      	bne.n	8006a96 <__gethex+0x2ca>
 8006aea:	e7e6      	b.n	8006aba <__gethex+0x2ee>
 8006aec:	1e6f      	subs	r7, r5, #1
 8006aee:	f1ba 0f00 	cmp.w	sl, #0
 8006af2:	d131      	bne.n	8006b58 <__gethex+0x38c>
 8006af4:	b127      	cbz	r7, 8006b00 <__gethex+0x334>
 8006af6:	4639      	mov	r1, r7
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fe39 	bl	8007770 <__any_on>
 8006afe:	4682      	mov	sl, r0
 8006b00:	117b      	asrs	r3, r7, #5
 8006b02:	2101      	movs	r1, #1
 8006b04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006b08:	f007 071f 	and.w	r7, r7, #31
 8006b0c:	fa01 f707 	lsl.w	r7, r1, r7
 8006b10:	421f      	tst	r7, r3
 8006b12:	4629      	mov	r1, r5
 8006b14:	4620      	mov	r0, r4
 8006b16:	bf18      	it	ne
 8006b18:	f04a 0a02 	orrne.w	sl, sl, #2
 8006b1c:	1b76      	subs	r6, r6, r5
 8006b1e:	f7ff fdee 	bl	80066fe <rshift>
 8006b22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006b26:	2702      	movs	r7, #2
 8006b28:	f1ba 0f00 	cmp.w	sl, #0
 8006b2c:	d048      	beq.n	8006bc0 <__gethex+0x3f4>
 8006b2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d015      	beq.n	8006b62 <__gethex+0x396>
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d017      	beq.n	8006b6a <__gethex+0x39e>
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d109      	bne.n	8006b52 <__gethex+0x386>
 8006b3e:	f01a 0f02 	tst.w	sl, #2
 8006b42:	d006      	beq.n	8006b52 <__gethex+0x386>
 8006b44:	f8d9 0000 	ldr.w	r0, [r9]
 8006b48:	ea4a 0a00 	orr.w	sl, sl, r0
 8006b4c:	f01a 0f01 	tst.w	sl, #1
 8006b50:	d10e      	bne.n	8006b70 <__gethex+0x3a4>
 8006b52:	f047 0710 	orr.w	r7, r7, #16
 8006b56:	e033      	b.n	8006bc0 <__gethex+0x3f4>
 8006b58:	f04f 0a01 	mov.w	sl, #1
 8006b5c:	e7d0      	b.n	8006b00 <__gethex+0x334>
 8006b5e:	2701      	movs	r7, #1
 8006b60:	e7e2      	b.n	8006b28 <__gethex+0x35c>
 8006b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b64:	f1c3 0301 	rsb	r3, r3, #1
 8006b68:	9315      	str	r3, [sp, #84]	; 0x54
 8006b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0f0      	beq.n	8006b52 <__gethex+0x386>
 8006b70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006b74:	f104 0314 	add.w	r3, r4, #20
 8006b78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006b7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006b80:	f04f 0c00 	mov.w	ip, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b8a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b8e:	d01c      	beq.n	8006bca <__gethex+0x3fe>
 8006b90:	3201      	adds	r2, #1
 8006b92:	6002      	str	r2, [r0, #0]
 8006b94:	2f02      	cmp	r7, #2
 8006b96:	f104 0314 	add.w	r3, r4, #20
 8006b9a:	d13f      	bne.n	8006c1c <__gethex+0x450>
 8006b9c:	f8d8 2000 	ldr.w	r2, [r8]
 8006ba0:	3a01      	subs	r2, #1
 8006ba2:	42b2      	cmp	r2, r6
 8006ba4:	d10a      	bne.n	8006bbc <__gethex+0x3f0>
 8006ba6:	1171      	asrs	r1, r6, #5
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bae:	f006 061f 	and.w	r6, r6, #31
 8006bb2:	fa02 f606 	lsl.w	r6, r2, r6
 8006bb6:	421e      	tst	r6, r3
 8006bb8:	bf18      	it	ne
 8006bba:	4617      	movne	r7, r2
 8006bbc:	f047 0720 	orr.w	r7, r7, #32
 8006bc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bc2:	601c      	str	r4, [r3, #0]
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	601d      	str	r5, [r3, #0]
 8006bc8:	e695      	b.n	80068f6 <__gethex+0x12a>
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8006bd0:	d8d8      	bhi.n	8006b84 <__gethex+0x3b8>
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	459b      	cmp	fp, r3
 8006bd6:	db19      	blt.n	8006c0c <__gethex+0x440>
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	ee18 0a10 	vmov	r0, s16
 8006bde:	3101      	adds	r1, #1
 8006be0:	f000 f92c 	bl	8006e3c <_Balloc>
 8006be4:	4681      	mov	r9, r0
 8006be6:	b918      	cbnz	r0, 8006bf0 <__gethex+0x424>
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <__gethex+0x488>)
 8006bea:	4602      	mov	r2, r0
 8006bec:	2184      	movs	r1, #132	; 0x84
 8006bee:	e6a8      	b.n	8006942 <__gethex+0x176>
 8006bf0:	6922      	ldr	r2, [r4, #16]
 8006bf2:	3202      	adds	r2, #2
 8006bf4:	f104 010c 	add.w	r1, r4, #12
 8006bf8:	0092      	lsls	r2, r2, #2
 8006bfa:	300c      	adds	r0, #12
 8006bfc:	f000 f910 	bl	8006e20 <memcpy>
 8006c00:	4621      	mov	r1, r4
 8006c02:	ee18 0a10 	vmov	r0, s16
 8006c06:	f000 f959 	bl	8006ebc <_Bfree>
 8006c0a:	464c      	mov	r4, r9
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c14:	6122      	str	r2, [r4, #16]
 8006c16:	2201      	movs	r2, #1
 8006c18:	615a      	str	r2, [r3, #20]
 8006c1a:	e7bb      	b.n	8006b94 <__gethex+0x3c8>
 8006c1c:	6922      	ldr	r2, [r4, #16]
 8006c1e:	455a      	cmp	r2, fp
 8006c20:	dd0b      	ble.n	8006c3a <__gethex+0x46e>
 8006c22:	2101      	movs	r1, #1
 8006c24:	4620      	mov	r0, r4
 8006c26:	f7ff fd6a 	bl	80066fe <rshift>
 8006c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c2e:	3501      	adds	r5, #1
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	f6ff aed0 	blt.w	80069d6 <__gethex+0x20a>
 8006c36:	2701      	movs	r7, #1
 8006c38:	e7c0      	b.n	8006bbc <__gethex+0x3f0>
 8006c3a:	f016 061f 	ands.w	r6, r6, #31
 8006c3e:	d0fa      	beq.n	8006c36 <__gethex+0x46a>
 8006c40:	449a      	add	sl, r3
 8006c42:	f1c6 0620 	rsb	r6, r6, #32
 8006c46:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006c4a:	f000 f9ed 	bl	8007028 <__hi0bits>
 8006c4e:	42b0      	cmp	r0, r6
 8006c50:	dbe7      	blt.n	8006c22 <__gethex+0x456>
 8006c52:	e7f0      	b.n	8006c36 <__gethex+0x46a>
 8006c54:	080098b9 	.word	0x080098b9

08006c58 <L_shift>:
 8006c58:	f1c2 0208 	rsb	r2, r2, #8
 8006c5c:	0092      	lsls	r2, r2, #2
 8006c5e:	b570      	push	{r4, r5, r6, lr}
 8006c60:	f1c2 0620 	rsb	r6, r2, #32
 8006c64:	6843      	ldr	r3, [r0, #4]
 8006c66:	6804      	ldr	r4, [r0, #0]
 8006c68:	fa03 f506 	lsl.w	r5, r3, r6
 8006c6c:	432c      	orrs	r4, r5
 8006c6e:	40d3      	lsrs	r3, r2
 8006c70:	6004      	str	r4, [r0, #0]
 8006c72:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c76:	4288      	cmp	r0, r1
 8006c78:	d3f4      	bcc.n	8006c64 <L_shift+0xc>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}

08006c7c <__match>:
 8006c7c:	b530      	push	{r4, r5, lr}
 8006c7e:	6803      	ldr	r3, [r0, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c86:	b914      	cbnz	r4, 8006c8e <__match+0x12>
 8006c88:	6003      	str	r3, [r0, #0]
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	bd30      	pop	{r4, r5, pc}
 8006c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c96:	2d19      	cmp	r5, #25
 8006c98:	bf98      	it	ls
 8006c9a:	3220      	addls	r2, #32
 8006c9c:	42a2      	cmp	r2, r4
 8006c9e:	d0f0      	beq.n	8006c82 <__match+0x6>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e7f3      	b.n	8006c8c <__match+0x10>

08006ca4 <__hexnan>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	680b      	ldr	r3, [r1, #0]
 8006caa:	6801      	ldr	r1, [r0, #0]
 8006cac:	115e      	asrs	r6, r3, #5
 8006cae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006cb2:	f013 031f 	ands.w	r3, r3, #31
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	bf18      	it	ne
 8006cba:	3604      	addne	r6, #4
 8006cbc:	2500      	movs	r5, #0
 8006cbe:	1f37      	subs	r7, r6, #4
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	4690      	mov	r8, r2
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8006cca:	46b9      	mov	r9, r7
 8006ccc:	463c      	mov	r4, r7
 8006cce:	9502      	str	r5, [sp, #8]
 8006cd0:	46ab      	mov	fp, r5
 8006cd2:	784a      	ldrb	r2, [r1, #1]
 8006cd4:	1c4b      	adds	r3, r1, #1
 8006cd6:	9303      	str	r3, [sp, #12]
 8006cd8:	b342      	cbz	r2, 8006d2c <__hexnan+0x88>
 8006cda:	4610      	mov	r0, r2
 8006cdc:	9105      	str	r1, [sp, #20]
 8006cde:	9204      	str	r2, [sp, #16]
 8006ce0:	f7ff fd5f 	bl	80067a2 <__hexdig_fun>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d14f      	bne.n	8006d88 <__hexnan+0xe4>
 8006ce8:	9a04      	ldr	r2, [sp, #16]
 8006cea:	9905      	ldr	r1, [sp, #20]
 8006cec:	2a20      	cmp	r2, #32
 8006cee:	d818      	bhi.n	8006d22 <__hexnan+0x7e>
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	459b      	cmp	fp, r3
 8006cf4:	dd13      	ble.n	8006d1e <__hexnan+0x7a>
 8006cf6:	454c      	cmp	r4, r9
 8006cf8:	d206      	bcs.n	8006d08 <__hexnan+0x64>
 8006cfa:	2d07      	cmp	r5, #7
 8006cfc:	dc04      	bgt.n	8006d08 <__hexnan+0x64>
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4649      	mov	r1, r9
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7ff ffa8 	bl	8006c58 <L_shift>
 8006d08:	4544      	cmp	r4, r8
 8006d0a:	d950      	bls.n	8006dae <__hexnan+0x10a>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f1a4 0904 	sub.w	r9, r4, #4
 8006d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d16:	f8cd b008 	str.w	fp, [sp, #8]
 8006d1a:	464c      	mov	r4, r9
 8006d1c:	461d      	mov	r5, r3
 8006d1e:	9903      	ldr	r1, [sp, #12]
 8006d20:	e7d7      	b.n	8006cd2 <__hexnan+0x2e>
 8006d22:	2a29      	cmp	r2, #41	; 0x29
 8006d24:	d156      	bne.n	8006dd4 <__hexnan+0x130>
 8006d26:	3102      	adds	r1, #2
 8006d28:	f8ca 1000 	str.w	r1, [sl]
 8006d2c:	f1bb 0f00 	cmp.w	fp, #0
 8006d30:	d050      	beq.n	8006dd4 <__hexnan+0x130>
 8006d32:	454c      	cmp	r4, r9
 8006d34:	d206      	bcs.n	8006d44 <__hexnan+0xa0>
 8006d36:	2d07      	cmp	r5, #7
 8006d38:	dc04      	bgt.n	8006d44 <__hexnan+0xa0>
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff ff8a 	bl	8006c58 <L_shift>
 8006d44:	4544      	cmp	r4, r8
 8006d46:	d934      	bls.n	8006db2 <__hexnan+0x10e>
 8006d48:	f1a8 0204 	sub.w	r2, r8, #4
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006d52:	f842 1f04 	str.w	r1, [r2, #4]!
 8006d56:	429f      	cmp	r7, r3
 8006d58:	d2f9      	bcs.n	8006d4e <__hexnan+0xaa>
 8006d5a:	1b3b      	subs	r3, r7, r4
 8006d5c:	f023 0303 	bic.w	r3, r3, #3
 8006d60:	3304      	adds	r3, #4
 8006d62:	3401      	adds	r4, #1
 8006d64:	3e03      	subs	r6, #3
 8006d66:	42b4      	cmp	r4, r6
 8006d68:	bf88      	it	hi
 8006d6a:	2304      	movhi	r3, #4
 8006d6c:	4443      	add	r3, r8
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f843 2b04 	str.w	r2, [r3], #4
 8006d74:	429f      	cmp	r7, r3
 8006d76:	d2fb      	bcs.n	8006d70 <__hexnan+0xcc>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	b91b      	cbnz	r3, 8006d84 <__hexnan+0xe0>
 8006d7c:	4547      	cmp	r7, r8
 8006d7e:	d127      	bne.n	8006dd0 <__hexnan+0x12c>
 8006d80:	2301      	movs	r3, #1
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	2005      	movs	r0, #5
 8006d86:	e026      	b.n	8006dd6 <__hexnan+0x132>
 8006d88:	3501      	adds	r5, #1
 8006d8a:	2d08      	cmp	r5, #8
 8006d8c:	f10b 0b01 	add.w	fp, fp, #1
 8006d90:	dd06      	ble.n	8006da0 <__hexnan+0xfc>
 8006d92:	4544      	cmp	r4, r8
 8006d94:	d9c3      	bls.n	8006d1e <__hexnan+0x7a>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d9c:	2501      	movs	r5, #1
 8006d9e:	3c04      	subs	r4, #4
 8006da0:	6822      	ldr	r2, [r4, #0]
 8006da2:	f000 000f 	and.w	r0, r0, #15
 8006da6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	e7b7      	b.n	8006d1e <__hexnan+0x7a>
 8006dae:	2508      	movs	r5, #8
 8006db0:	e7b5      	b.n	8006d1e <__hexnan+0x7a>
 8006db2:	9b01      	ldr	r3, [sp, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0df      	beq.n	8006d78 <__hexnan+0xd4>
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbc:	f1c3 0320 	rsb	r3, r3, #32
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006dc8:	401a      	ands	r2, r3
 8006dca:	f846 2c04 	str.w	r2, [r6, #-4]
 8006dce:	e7d3      	b.n	8006d78 <__hexnan+0xd4>
 8006dd0:	3f04      	subs	r7, #4
 8006dd2:	e7d1      	b.n	8006d78 <__hexnan+0xd4>
 8006dd4:	2004      	movs	r0, #4
 8006dd6:	b007      	add	sp, #28
 8006dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ddc <_localeconv_r>:
 8006ddc:	4800      	ldr	r0, [pc, #0]	; (8006de0 <_localeconv_r+0x4>)
 8006dde:	4770      	bx	lr
 8006de0:	20000188 	.word	0x20000188

08006de4 <__retarget_lock_init_recursive>:
 8006de4:	4770      	bx	lr

08006de6 <__retarget_lock_acquire_recursive>:
 8006de6:	4770      	bx	lr

08006de8 <__retarget_lock_release_recursive>:
 8006de8:	4770      	bx	lr
	...

08006dec <malloc>:
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <malloc+0xc>)
 8006dee:	4601      	mov	r1, r0
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f000 bd3d 	b.w	8007870 <_malloc_r>
 8006df6:	bf00      	nop
 8006df8:	20000030 	.word	0x20000030

08006dfc <__ascii_mbtowc>:
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	b901      	cbnz	r1, 8006e02 <__ascii_mbtowc+0x6>
 8006e00:	a901      	add	r1, sp, #4
 8006e02:	b142      	cbz	r2, 8006e16 <__ascii_mbtowc+0x1a>
 8006e04:	b14b      	cbz	r3, 8006e1a <__ascii_mbtowc+0x1e>
 8006e06:	7813      	ldrb	r3, [r2, #0]
 8006e08:	600b      	str	r3, [r1, #0]
 8006e0a:	7812      	ldrb	r2, [r2, #0]
 8006e0c:	1e10      	subs	r0, r2, #0
 8006e0e:	bf18      	it	ne
 8006e10:	2001      	movne	r0, #1
 8006e12:	b002      	add	sp, #8
 8006e14:	4770      	bx	lr
 8006e16:	4610      	mov	r0, r2
 8006e18:	e7fb      	b.n	8006e12 <__ascii_mbtowc+0x16>
 8006e1a:	f06f 0001 	mvn.w	r0, #1
 8006e1e:	e7f8      	b.n	8006e12 <__ascii_mbtowc+0x16>

08006e20 <memcpy>:
 8006e20:	440a      	add	r2, r1
 8006e22:	4291      	cmp	r1, r2
 8006e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e28:	d100      	bne.n	8006e2c <memcpy+0xc>
 8006e2a:	4770      	bx	lr
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e36:	4291      	cmp	r1, r2
 8006e38:	d1f9      	bne.n	8006e2e <memcpy+0xe>
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <_Balloc>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Balloc+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffd0 	bl	8006dec <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Balloc+0x20>
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <_Balloc+0x78>)
 8006e54:	4818      	ldr	r0, [pc, #96]	; (8006eb8 <_Balloc+0x7c>)
 8006e56:	2166      	movs	r1, #102	; 0x66
 8006e58:	f7fe fcb4 	bl	80057c4 <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e66:	68f3      	ldr	r3, [r6, #12]
 8006e68:	b183      	cbz	r3, 8006e8c <_Balloc+0x50>
 8006e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e72:	b9b8      	cbnz	r0, 8006ea4 <_Balloc+0x68>
 8006e74:	2101      	movs	r1, #1
 8006e76:	fa01 f605 	lsl.w	r6, r1, r5
 8006e7a:	1d72      	adds	r2, r6, #5
 8006e7c:	0092      	lsls	r2, r2, #2
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fc97 	bl	80077b2 <_calloc_r>
 8006e84:	b160      	cbz	r0, 8006ea0 <_Balloc+0x64>
 8006e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e8a:	e00e      	b.n	8006eaa <_Balloc+0x6e>
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fc8e 	bl	80077b2 <_calloc_r>
 8006e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e98:	60f0      	str	r0, [r6, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e4      	bne.n	8006e6a <_Balloc+0x2e>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	6802      	ldr	r2, [r0, #0]
 8006ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006eb0:	e7f7      	b.n	8006ea2 <_Balloc+0x66>
 8006eb2:	bf00      	nop
 8006eb4:	08009649 	.word	0x08009649
 8006eb8:	080099ac 	.word	0x080099ac

08006ebc <_Bfree>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	b976      	cbnz	r6, 8006ee4 <_Bfree+0x28>
 8006ec6:	2010      	movs	r0, #16
 8006ec8:	f7ff ff90 	bl	8006dec <malloc>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6268      	str	r0, [r5, #36]	; 0x24
 8006ed0:	b920      	cbnz	r0, 8006edc <_Bfree+0x20>
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <_Bfree+0x3c>)
 8006ed4:	4809      	ldr	r0, [pc, #36]	; (8006efc <_Bfree+0x40>)
 8006ed6:	218a      	movs	r1, #138	; 0x8a
 8006ed8:	f7fe fc74 	bl	80057c4 <__assert_func>
 8006edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee0:	6006      	str	r6, [r0, #0]
 8006ee2:	60c6      	str	r6, [r0, #12]
 8006ee4:	b13c      	cbz	r4, 8006ef6 <_Bfree+0x3a>
 8006ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ef0:	6021      	str	r1, [r4, #0]
 8006ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	08009649 	.word	0x08009649
 8006efc:	080099ac 	.word	0x080099ac

08006f00 <__multadd>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	690e      	ldr	r6, [r1, #16]
 8006f06:	4607      	mov	r7, r0
 8006f08:	4698      	mov	r8, r3
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	f101 0014 	add.w	r0, r1, #20
 8006f10:	2300      	movs	r3, #0
 8006f12:	6805      	ldr	r5, [r0, #0]
 8006f14:	b2a9      	uxth	r1, r5
 8006f16:	fb02 8101 	mla	r1, r2, r1, r8
 8006f1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f1e:	0c2d      	lsrs	r5, r5, #16
 8006f20:	fb02 c505 	mla	r5, r2, r5, ip
 8006f24:	b289      	uxth	r1, r1
 8006f26:	3301      	adds	r3, #1
 8006f28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	f840 1b04 	str.w	r1, [r0], #4
 8006f32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f36:	dcec      	bgt.n	8006f12 <__multadd+0x12>
 8006f38:	f1b8 0f00 	cmp.w	r8, #0
 8006f3c:	d022      	beq.n	8006f84 <__multadd+0x84>
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	dc19      	bgt.n	8006f78 <__multadd+0x78>
 8006f44:	6861      	ldr	r1, [r4, #4]
 8006f46:	4638      	mov	r0, r7
 8006f48:	3101      	adds	r1, #1
 8006f4a:	f7ff ff77 	bl	8006e3c <_Balloc>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b928      	cbnz	r0, 8006f5e <__multadd+0x5e>
 8006f52:	4602      	mov	r2, r0
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <__multadd+0x8c>)
 8006f56:	480e      	ldr	r0, [pc, #56]	; (8006f90 <__multadd+0x90>)
 8006f58:	21b5      	movs	r1, #181	; 0xb5
 8006f5a:	f7fe fc33 	bl	80057c4 <__assert_func>
 8006f5e:	6922      	ldr	r2, [r4, #16]
 8006f60:	3202      	adds	r2, #2
 8006f62:	f104 010c 	add.w	r1, r4, #12
 8006f66:	0092      	lsls	r2, r2, #2
 8006f68:	300c      	adds	r0, #12
 8006f6a:	f7ff ff59 	bl	8006e20 <memcpy>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ffa3 	bl	8006ebc <_Bfree>
 8006f76:	462c      	mov	r4, r5
 8006f78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f82:	6126      	str	r6, [r4, #16]
 8006f84:	4620      	mov	r0, r4
 8006f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f8a:	bf00      	nop
 8006f8c:	080098b9 	.word	0x080098b9
 8006f90:	080099ac 	.word	0x080099ac

08006f94 <__s2b>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	4615      	mov	r5, r2
 8006f9c:	461f      	mov	r7, r3
 8006f9e:	2209      	movs	r2, #9
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fa8:	2100      	movs	r1, #0
 8006faa:	2201      	movs	r2, #1
 8006fac:	429a      	cmp	r2, r3
 8006fae:	db09      	blt.n	8006fc4 <__s2b+0x30>
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7ff ff43 	bl	8006e3c <_Balloc>
 8006fb6:	b940      	cbnz	r0, 8006fca <__s2b+0x36>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4b19      	ldr	r3, [pc, #100]	; (8007020 <__s2b+0x8c>)
 8006fbc:	4819      	ldr	r0, [pc, #100]	; (8007024 <__s2b+0x90>)
 8006fbe:	21ce      	movs	r1, #206	; 0xce
 8006fc0:	f7fe fc00 	bl	80057c4 <__assert_func>
 8006fc4:	0052      	lsls	r2, r2, #1
 8006fc6:	3101      	adds	r1, #1
 8006fc8:	e7f0      	b.n	8006fac <__s2b+0x18>
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	6143      	str	r3, [r0, #20]
 8006fce:	2d09      	cmp	r5, #9
 8006fd0:	f04f 0301 	mov.w	r3, #1
 8006fd4:	6103      	str	r3, [r0, #16]
 8006fd6:	dd16      	ble.n	8007006 <__s2b+0x72>
 8006fd8:	f104 0909 	add.w	r9, r4, #9
 8006fdc:	46c8      	mov	r8, r9
 8006fde:	442c      	add	r4, r5
 8006fe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	3b30      	subs	r3, #48	; 0x30
 8006fe8:	220a      	movs	r2, #10
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff ff88 	bl	8006f00 <__multadd>
 8006ff0:	45a0      	cmp	r8, r4
 8006ff2:	d1f5      	bne.n	8006fe0 <__s2b+0x4c>
 8006ff4:	f1a5 0408 	sub.w	r4, r5, #8
 8006ff8:	444c      	add	r4, r9
 8006ffa:	1b2d      	subs	r5, r5, r4
 8006ffc:	1963      	adds	r3, r4, r5
 8006ffe:	42bb      	cmp	r3, r7
 8007000:	db04      	blt.n	800700c <__s2b+0x78>
 8007002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007006:	340a      	adds	r4, #10
 8007008:	2509      	movs	r5, #9
 800700a:	e7f6      	b.n	8006ffa <__s2b+0x66>
 800700c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007010:	4601      	mov	r1, r0
 8007012:	3b30      	subs	r3, #48	; 0x30
 8007014:	220a      	movs	r2, #10
 8007016:	4630      	mov	r0, r6
 8007018:	f7ff ff72 	bl	8006f00 <__multadd>
 800701c:	e7ee      	b.n	8006ffc <__s2b+0x68>
 800701e:	bf00      	nop
 8007020:	080098b9 	.word	0x080098b9
 8007024:	080099ac 	.word	0x080099ac

08007028 <__hi0bits>:
 8007028:	0c03      	lsrs	r3, r0, #16
 800702a:	041b      	lsls	r3, r3, #16
 800702c:	b9d3      	cbnz	r3, 8007064 <__hi0bits+0x3c>
 800702e:	0400      	lsls	r0, r0, #16
 8007030:	2310      	movs	r3, #16
 8007032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007036:	bf04      	itt	eq
 8007038:	0200      	lsleq	r0, r0, #8
 800703a:	3308      	addeq	r3, #8
 800703c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007040:	bf04      	itt	eq
 8007042:	0100      	lsleq	r0, r0, #4
 8007044:	3304      	addeq	r3, #4
 8007046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800704a:	bf04      	itt	eq
 800704c:	0080      	lsleq	r0, r0, #2
 800704e:	3302      	addeq	r3, #2
 8007050:	2800      	cmp	r0, #0
 8007052:	db05      	blt.n	8007060 <__hi0bits+0x38>
 8007054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007058:	f103 0301 	add.w	r3, r3, #1
 800705c:	bf08      	it	eq
 800705e:	2320      	moveq	r3, #32
 8007060:	4618      	mov	r0, r3
 8007062:	4770      	bx	lr
 8007064:	2300      	movs	r3, #0
 8007066:	e7e4      	b.n	8007032 <__hi0bits+0xa>

08007068 <__lo0bits>:
 8007068:	6803      	ldr	r3, [r0, #0]
 800706a:	f013 0207 	ands.w	r2, r3, #7
 800706e:	4601      	mov	r1, r0
 8007070:	d00b      	beq.n	800708a <__lo0bits+0x22>
 8007072:	07da      	lsls	r2, r3, #31
 8007074:	d424      	bmi.n	80070c0 <__lo0bits+0x58>
 8007076:	0798      	lsls	r0, r3, #30
 8007078:	bf49      	itett	mi
 800707a:	085b      	lsrmi	r3, r3, #1
 800707c:	089b      	lsrpl	r3, r3, #2
 800707e:	2001      	movmi	r0, #1
 8007080:	600b      	strmi	r3, [r1, #0]
 8007082:	bf5c      	itt	pl
 8007084:	600b      	strpl	r3, [r1, #0]
 8007086:	2002      	movpl	r0, #2
 8007088:	4770      	bx	lr
 800708a:	b298      	uxth	r0, r3
 800708c:	b9b0      	cbnz	r0, 80070bc <__lo0bits+0x54>
 800708e:	0c1b      	lsrs	r3, r3, #16
 8007090:	2010      	movs	r0, #16
 8007092:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007096:	bf04      	itt	eq
 8007098:	0a1b      	lsreq	r3, r3, #8
 800709a:	3008      	addeq	r0, #8
 800709c:	071a      	lsls	r2, r3, #28
 800709e:	bf04      	itt	eq
 80070a0:	091b      	lsreq	r3, r3, #4
 80070a2:	3004      	addeq	r0, #4
 80070a4:	079a      	lsls	r2, r3, #30
 80070a6:	bf04      	itt	eq
 80070a8:	089b      	lsreq	r3, r3, #2
 80070aa:	3002      	addeq	r0, #2
 80070ac:	07da      	lsls	r2, r3, #31
 80070ae:	d403      	bmi.n	80070b8 <__lo0bits+0x50>
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	f100 0001 	add.w	r0, r0, #1
 80070b6:	d005      	beq.n	80070c4 <__lo0bits+0x5c>
 80070b8:	600b      	str	r3, [r1, #0]
 80070ba:	4770      	bx	lr
 80070bc:	4610      	mov	r0, r2
 80070be:	e7e8      	b.n	8007092 <__lo0bits+0x2a>
 80070c0:	2000      	movs	r0, #0
 80070c2:	4770      	bx	lr
 80070c4:	2020      	movs	r0, #32
 80070c6:	4770      	bx	lr

080070c8 <__i2b>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	2101      	movs	r1, #1
 80070ce:	f7ff feb5 	bl	8006e3c <_Balloc>
 80070d2:	4602      	mov	r2, r0
 80070d4:	b928      	cbnz	r0, 80070e2 <__i2b+0x1a>
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <__i2b+0x24>)
 80070d8:	4805      	ldr	r0, [pc, #20]	; (80070f0 <__i2b+0x28>)
 80070da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070de:	f7fe fb71 	bl	80057c4 <__assert_func>
 80070e2:	2301      	movs	r3, #1
 80070e4:	6144      	str	r4, [r0, #20]
 80070e6:	6103      	str	r3, [r0, #16]
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	bf00      	nop
 80070ec:	080098b9 	.word	0x080098b9
 80070f0:	080099ac 	.word	0x080099ac

080070f4 <__multiply>:
 80070f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	4614      	mov	r4, r2
 80070fa:	690a      	ldr	r2, [r1, #16]
 80070fc:	6923      	ldr	r3, [r4, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	bfb8      	it	lt
 8007102:	460b      	movlt	r3, r1
 8007104:	460d      	mov	r5, r1
 8007106:	bfbc      	itt	lt
 8007108:	4625      	movlt	r5, r4
 800710a:	461c      	movlt	r4, r3
 800710c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007110:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007114:	68ab      	ldr	r3, [r5, #8]
 8007116:	6869      	ldr	r1, [r5, #4]
 8007118:	eb0a 0709 	add.w	r7, sl, r9
 800711c:	42bb      	cmp	r3, r7
 800711e:	b085      	sub	sp, #20
 8007120:	bfb8      	it	lt
 8007122:	3101      	addlt	r1, #1
 8007124:	f7ff fe8a 	bl	8006e3c <_Balloc>
 8007128:	b930      	cbnz	r0, 8007138 <__multiply+0x44>
 800712a:	4602      	mov	r2, r0
 800712c:	4b42      	ldr	r3, [pc, #264]	; (8007238 <__multiply+0x144>)
 800712e:	4843      	ldr	r0, [pc, #268]	; (800723c <__multiply+0x148>)
 8007130:	f240 115d 	movw	r1, #349	; 0x15d
 8007134:	f7fe fb46 	bl	80057c4 <__assert_func>
 8007138:	f100 0614 	add.w	r6, r0, #20
 800713c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007140:	4633      	mov	r3, r6
 8007142:	2200      	movs	r2, #0
 8007144:	4543      	cmp	r3, r8
 8007146:	d31e      	bcc.n	8007186 <__multiply+0x92>
 8007148:	f105 0c14 	add.w	ip, r5, #20
 800714c:	f104 0314 	add.w	r3, r4, #20
 8007150:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007154:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007158:	9202      	str	r2, [sp, #8]
 800715a:	ebac 0205 	sub.w	r2, ip, r5
 800715e:	3a15      	subs	r2, #21
 8007160:	f022 0203 	bic.w	r2, r2, #3
 8007164:	3204      	adds	r2, #4
 8007166:	f105 0115 	add.w	r1, r5, #21
 800716a:	458c      	cmp	ip, r1
 800716c:	bf38      	it	cc
 800716e:	2204      	movcc	r2, #4
 8007170:	9201      	str	r2, [sp, #4]
 8007172:	9a02      	ldr	r2, [sp, #8]
 8007174:	9303      	str	r3, [sp, #12]
 8007176:	429a      	cmp	r2, r3
 8007178:	d808      	bhi.n	800718c <__multiply+0x98>
 800717a:	2f00      	cmp	r7, #0
 800717c:	dc55      	bgt.n	800722a <__multiply+0x136>
 800717e:	6107      	str	r7, [r0, #16]
 8007180:	b005      	add	sp, #20
 8007182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	f843 2b04 	str.w	r2, [r3], #4
 800718a:	e7db      	b.n	8007144 <__multiply+0x50>
 800718c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007190:	f1ba 0f00 	cmp.w	sl, #0
 8007194:	d020      	beq.n	80071d8 <__multiply+0xe4>
 8007196:	f105 0e14 	add.w	lr, r5, #20
 800719a:	46b1      	mov	r9, r6
 800719c:	2200      	movs	r2, #0
 800719e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80071a2:	f8d9 b000 	ldr.w	fp, [r9]
 80071a6:	b2a1      	uxth	r1, r4
 80071a8:	fa1f fb8b 	uxth.w	fp, fp
 80071ac:	fb0a b101 	mla	r1, sl, r1, fp
 80071b0:	4411      	add	r1, r2
 80071b2:	f8d9 2000 	ldr.w	r2, [r9]
 80071b6:	0c24      	lsrs	r4, r4, #16
 80071b8:	0c12      	lsrs	r2, r2, #16
 80071ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80071be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80071c2:	b289      	uxth	r1, r1
 80071c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071c8:	45f4      	cmp	ip, lr
 80071ca:	f849 1b04 	str.w	r1, [r9], #4
 80071ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80071d2:	d8e4      	bhi.n	800719e <__multiply+0xaa>
 80071d4:	9901      	ldr	r1, [sp, #4]
 80071d6:	5072      	str	r2, [r6, r1]
 80071d8:	9a03      	ldr	r2, [sp, #12]
 80071da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071de:	3304      	adds	r3, #4
 80071e0:	f1b9 0f00 	cmp.w	r9, #0
 80071e4:	d01f      	beq.n	8007226 <__multiply+0x132>
 80071e6:	6834      	ldr	r4, [r6, #0]
 80071e8:	f105 0114 	add.w	r1, r5, #20
 80071ec:	46b6      	mov	lr, r6
 80071ee:	f04f 0a00 	mov.w	sl, #0
 80071f2:	880a      	ldrh	r2, [r1, #0]
 80071f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80071f8:	fb09 b202 	mla	r2, r9, r2, fp
 80071fc:	4492      	add	sl, r2
 80071fe:	b2a4      	uxth	r4, r4
 8007200:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007204:	f84e 4b04 	str.w	r4, [lr], #4
 8007208:	f851 4b04 	ldr.w	r4, [r1], #4
 800720c:	f8be 2000 	ldrh.w	r2, [lr]
 8007210:	0c24      	lsrs	r4, r4, #16
 8007212:	fb09 2404 	mla	r4, r9, r4, r2
 8007216:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800721a:	458c      	cmp	ip, r1
 800721c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007220:	d8e7      	bhi.n	80071f2 <__multiply+0xfe>
 8007222:	9a01      	ldr	r2, [sp, #4]
 8007224:	50b4      	str	r4, [r6, r2]
 8007226:	3604      	adds	r6, #4
 8007228:	e7a3      	b.n	8007172 <__multiply+0x7e>
 800722a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1a5      	bne.n	800717e <__multiply+0x8a>
 8007232:	3f01      	subs	r7, #1
 8007234:	e7a1      	b.n	800717a <__multiply+0x86>
 8007236:	bf00      	nop
 8007238:	080098b9 	.word	0x080098b9
 800723c:	080099ac 	.word	0x080099ac

08007240 <__pow5mult>:
 8007240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007244:	4615      	mov	r5, r2
 8007246:	f012 0203 	ands.w	r2, r2, #3
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	d007      	beq.n	8007260 <__pow5mult+0x20>
 8007250:	4c25      	ldr	r4, [pc, #148]	; (80072e8 <__pow5mult+0xa8>)
 8007252:	3a01      	subs	r2, #1
 8007254:	2300      	movs	r3, #0
 8007256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800725a:	f7ff fe51 	bl	8006f00 <__multadd>
 800725e:	4607      	mov	r7, r0
 8007260:	10ad      	asrs	r5, r5, #2
 8007262:	d03d      	beq.n	80072e0 <__pow5mult+0xa0>
 8007264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007266:	b97c      	cbnz	r4, 8007288 <__pow5mult+0x48>
 8007268:	2010      	movs	r0, #16
 800726a:	f7ff fdbf 	bl	8006dec <malloc>
 800726e:	4602      	mov	r2, r0
 8007270:	6270      	str	r0, [r6, #36]	; 0x24
 8007272:	b928      	cbnz	r0, 8007280 <__pow5mult+0x40>
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <__pow5mult+0xac>)
 8007276:	481e      	ldr	r0, [pc, #120]	; (80072f0 <__pow5mult+0xb0>)
 8007278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800727c:	f7fe faa2 	bl	80057c4 <__assert_func>
 8007280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007284:	6004      	str	r4, [r0, #0]
 8007286:	60c4      	str	r4, [r0, #12]
 8007288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800728c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007290:	b94c      	cbnz	r4, 80072a6 <__pow5mult+0x66>
 8007292:	f240 2171 	movw	r1, #625	; 0x271
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ff16 	bl	80070c8 <__i2b>
 800729c:	2300      	movs	r3, #0
 800729e:	f8c8 0008 	str.w	r0, [r8, #8]
 80072a2:	4604      	mov	r4, r0
 80072a4:	6003      	str	r3, [r0, #0]
 80072a6:	f04f 0900 	mov.w	r9, #0
 80072aa:	07eb      	lsls	r3, r5, #31
 80072ac:	d50a      	bpl.n	80072c4 <__pow5mult+0x84>
 80072ae:	4639      	mov	r1, r7
 80072b0:	4622      	mov	r2, r4
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ff1e 	bl	80070f4 <__multiply>
 80072b8:	4639      	mov	r1, r7
 80072ba:	4680      	mov	r8, r0
 80072bc:	4630      	mov	r0, r6
 80072be:	f7ff fdfd 	bl	8006ebc <_Bfree>
 80072c2:	4647      	mov	r7, r8
 80072c4:	106d      	asrs	r5, r5, #1
 80072c6:	d00b      	beq.n	80072e0 <__pow5mult+0xa0>
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	b938      	cbnz	r0, 80072dc <__pow5mult+0x9c>
 80072cc:	4622      	mov	r2, r4
 80072ce:	4621      	mov	r1, r4
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ff0f 	bl	80070f4 <__multiply>
 80072d6:	6020      	str	r0, [r4, #0]
 80072d8:	f8c0 9000 	str.w	r9, [r0]
 80072dc:	4604      	mov	r4, r0
 80072de:	e7e4      	b.n	80072aa <__pow5mult+0x6a>
 80072e0:	4638      	mov	r0, r7
 80072e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e6:	bf00      	nop
 80072e8:	08009b00 	.word	0x08009b00
 80072ec:	08009649 	.word	0x08009649
 80072f0:	080099ac 	.word	0x080099ac

080072f4 <__lshift>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	460c      	mov	r4, r1
 80072fa:	6849      	ldr	r1, [r1, #4]
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007302:	68a3      	ldr	r3, [r4, #8]
 8007304:	4607      	mov	r7, r0
 8007306:	4691      	mov	r9, r2
 8007308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800730c:	f108 0601 	add.w	r6, r8, #1
 8007310:	42b3      	cmp	r3, r6
 8007312:	db0b      	blt.n	800732c <__lshift+0x38>
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff fd91 	bl	8006e3c <_Balloc>
 800731a:	4605      	mov	r5, r0
 800731c:	b948      	cbnz	r0, 8007332 <__lshift+0x3e>
 800731e:	4602      	mov	r2, r0
 8007320:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <__lshift+0xd0>)
 8007322:	4829      	ldr	r0, [pc, #164]	; (80073c8 <__lshift+0xd4>)
 8007324:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007328:	f7fe fa4c 	bl	80057c4 <__assert_func>
 800732c:	3101      	adds	r1, #1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	e7ee      	b.n	8007310 <__lshift+0x1c>
 8007332:	2300      	movs	r3, #0
 8007334:	f100 0114 	add.w	r1, r0, #20
 8007338:	f100 0210 	add.w	r2, r0, #16
 800733c:	4618      	mov	r0, r3
 800733e:	4553      	cmp	r3, sl
 8007340:	db33      	blt.n	80073aa <__lshift+0xb6>
 8007342:	6920      	ldr	r0, [r4, #16]
 8007344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007348:	f104 0314 	add.w	r3, r4, #20
 800734c:	f019 091f 	ands.w	r9, r9, #31
 8007350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007358:	d02b      	beq.n	80073b2 <__lshift+0xbe>
 800735a:	f1c9 0e20 	rsb	lr, r9, #32
 800735e:	468a      	mov	sl, r1
 8007360:	2200      	movs	r2, #0
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	fa00 f009 	lsl.w	r0, r0, r9
 8007368:	4302      	orrs	r2, r0
 800736a:	f84a 2b04 	str.w	r2, [sl], #4
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007372:	459c      	cmp	ip, r3
 8007374:	fa22 f20e 	lsr.w	r2, r2, lr
 8007378:	d8f3      	bhi.n	8007362 <__lshift+0x6e>
 800737a:	ebac 0304 	sub.w	r3, ip, r4
 800737e:	3b15      	subs	r3, #21
 8007380:	f023 0303 	bic.w	r3, r3, #3
 8007384:	3304      	adds	r3, #4
 8007386:	f104 0015 	add.w	r0, r4, #21
 800738a:	4584      	cmp	ip, r0
 800738c:	bf38      	it	cc
 800738e:	2304      	movcc	r3, #4
 8007390:	50ca      	str	r2, [r1, r3]
 8007392:	b10a      	cbz	r2, 8007398 <__lshift+0xa4>
 8007394:	f108 0602 	add.w	r6, r8, #2
 8007398:	3e01      	subs	r6, #1
 800739a:	4638      	mov	r0, r7
 800739c:	612e      	str	r6, [r5, #16]
 800739e:	4621      	mov	r1, r4
 80073a0:	f7ff fd8c 	bl	8006ebc <_Bfree>
 80073a4:	4628      	mov	r0, r5
 80073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ae:	3301      	adds	r3, #1
 80073b0:	e7c5      	b.n	800733e <__lshift+0x4a>
 80073b2:	3904      	subs	r1, #4
 80073b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80073bc:	459c      	cmp	ip, r3
 80073be:	d8f9      	bhi.n	80073b4 <__lshift+0xc0>
 80073c0:	e7ea      	b.n	8007398 <__lshift+0xa4>
 80073c2:	bf00      	nop
 80073c4:	080098b9 	.word	0x080098b9
 80073c8:	080099ac 	.word	0x080099ac

080073cc <__mcmp>:
 80073cc:	b530      	push	{r4, r5, lr}
 80073ce:	6902      	ldr	r2, [r0, #16]
 80073d0:	690c      	ldr	r4, [r1, #16]
 80073d2:	1b12      	subs	r2, r2, r4
 80073d4:	d10e      	bne.n	80073f4 <__mcmp+0x28>
 80073d6:	f100 0314 	add.w	r3, r0, #20
 80073da:	3114      	adds	r1, #20
 80073dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073ec:	42a5      	cmp	r5, r4
 80073ee:	d003      	beq.n	80073f8 <__mcmp+0x2c>
 80073f0:	d305      	bcc.n	80073fe <__mcmp+0x32>
 80073f2:	2201      	movs	r2, #1
 80073f4:	4610      	mov	r0, r2
 80073f6:	bd30      	pop	{r4, r5, pc}
 80073f8:	4283      	cmp	r3, r0
 80073fa:	d3f3      	bcc.n	80073e4 <__mcmp+0x18>
 80073fc:	e7fa      	b.n	80073f4 <__mcmp+0x28>
 80073fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007402:	e7f7      	b.n	80073f4 <__mcmp+0x28>

08007404 <__mdiff>:
 8007404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	460c      	mov	r4, r1
 800740a:	4606      	mov	r6, r0
 800740c:	4611      	mov	r1, r2
 800740e:	4620      	mov	r0, r4
 8007410:	4617      	mov	r7, r2
 8007412:	f7ff ffdb 	bl	80073cc <__mcmp>
 8007416:	1e05      	subs	r5, r0, #0
 8007418:	d110      	bne.n	800743c <__mdiff+0x38>
 800741a:	4629      	mov	r1, r5
 800741c:	4630      	mov	r0, r6
 800741e:	f7ff fd0d 	bl	8006e3c <_Balloc>
 8007422:	b930      	cbnz	r0, 8007432 <__mdiff+0x2e>
 8007424:	4b39      	ldr	r3, [pc, #228]	; (800750c <__mdiff+0x108>)
 8007426:	4602      	mov	r2, r0
 8007428:	f240 2132 	movw	r1, #562	; 0x232
 800742c:	4838      	ldr	r0, [pc, #224]	; (8007510 <__mdiff+0x10c>)
 800742e:	f7fe f9c9 	bl	80057c4 <__assert_func>
 8007432:	2301      	movs	r3, #1
 8007434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743c:	bfa4      	itt	ge
 800743e:	463b      	movge	r3, r7
 8007440:	4627      	movge	r7, r4
 8007442:	4630      	mov	r0, r6
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	bfa6      	itte	ge
 8007448:	461c      	movge	r4, r3
 800744a:	2500      	movge	r5, #0
 800744c:	2501      	movlt	r5, #1
 800744e:	f7ff fcf5 	bl	8006e3c <_Balloc>
 8007452:	b920      	cbnz	r0, 800745e <__mdiff+0x5a>
 8007454:	4b2d      	ldr	r3, [pc, #180]	; (800750c <__mdiff+0x108>)
 8007456:	4602      	mov	r2, r0
 8007458:	f44f 7110 	mov.w	r1, #576	; 0x240
 800745c:	e7e6      	b.n	800742c <__mdiff+0x28>
 800745e:	693e      	ldr	r6, [r7, #16]
 8007460:	60c5      	str	r5, [r0, #12]
 8007462:	6925      	ldr	r5, [r4, #16]
 8007464:	f107 0114 	add.w	r1, r7, #20
 8007468:	f104 0914 	add.w	r9, r4, #20
 800746c:	f100 0e14 	add.w	lr, r0, #20
 8007470:	f107 0210 	add.w	r2, r7, #16
 8007474:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007478:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800747c:	46f2      	mov	sl, lr
 800747e:	2700      	movs	r7, #0
 8007480:	f859 3b04 	ldr.w	r3, [r9], #4
 8007484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007488:	fa1f f883 	uxth.w	r8, r3
 800748c:	fa17 f78b 	uxtah	r7, r7, fp
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	eba7 0808 	sub.w	r8, r7, r8
 8007496:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800749a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800749e:	fa1f f888 	uxth.w	r8, r8
 80074a2:	141f      	asrs	r7, r3, #16
 80074a4:	454d      	cmp	r5, r9
 80074a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074aa:	f84a 3b04 	str.w	r3, [sl], #4
 80074ae:	d8e7      	bhi.n	8007480 <__mdiff+0x7c>
 80074b0:	1b2b      	subs	r3, r5, r4
 80074b2:	3b15      	subs	r3, #21
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	3304      	adds	r3, #4
 80074ba:	3415      	adds	r4, #21
 80074bc:	42a5      	cmp	r5, r4
 80074be:	bf38      	it	cc
 80074c0:	2304      	movcc	r3, #4
 80074c2:	4419      	add	r1, r3
 80074c4:	4473      	add	r3, lr
 80074c6:	469e      	mov	lr, r3
 80074c8:	460d      	mov	r5, r1
 80074ca:	4565      	cmp	r5, ip
 80074cc:	d30e      	bcc.n	80074ec <__mdiff+0xe8>
 80074ce:	f10c 0203 	add.w	r2, ip, #3
 80074d2:	1a52      	subs	r2, r2, r1
 80074d4:	f022 0203 	bic.w	r2, r2, #3
 80074d8:	3903      	subs	r1, #3
 80074da:	458c      	cmp	ip, r1
 80074dc:	bf38      	it	cc
 80074de:	2200      	movcc	r2, #0
 80074e0:	441a      	add	r2, r3
 80074e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074e6:	b17b      	cbz	r3, 8007508 <__mdiff+0x104>
 80074e8:	6106      	str	r6, [r0, #16]
 80074ea:	e7a5      	b.n	8007438 <__mdiff+0x34>
 80074ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80074f0:	fa17 f488 	uxtah	r4, r7, r8
 80074f4:	1422      	asrs	r2, r4, #16
 80074f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80074fa:	b2a4      	uxth	r4, r4
 80074fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007500:	f84e 4b04 	str.w	r4, [lr], #4
 8007504:	1417      	asrs	r7, r2, #16
 8007506:	e7e0      	b.n	80074ca <__mdiff+0xc6>
 8007508:	3e01      	subs	r6, #1
 800750a:	e7ea      	b.n	80074e2 <__mdiff+0xde>
 800750c:	080098b9 	.word	0x080098b9
 8007510:	080099ac 	.word	0x080099ac

08007514 <__ulp>:
 8007514:	b082      	sub	sp, #8
 8007516:	ed8d 0b00 	vstr	d0, [sp]
 800751a:	9b01      	ldr	r3, [sp, #4]
 800751c:	4912      	ldr	r1, [pc, #72]	; (8007568 <__ulp+0x54>)
 800751e:	4019      	ands	r1, r3
 8007520:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007524:	2900      	cmp	r1, #0
 8007526:	dd05      	ble.n	8007534 <__ulp+0x20>
 8007528:	2200      	movs	r2, #0
 800752a:	460b      	mov	r3, r1
 800752c:	ec43 2b10 	vmov	d0, r2, r3
 8007530:	b002      	add	sp, #8
 8007532:	4770      	bx	lr
 8007534:	4249      	negs	r1, r1
 8007536:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800753a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	da04      	bge.n	8007552 <__ulp+0x3e>
 8007548:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800754c:	fa41 f300 	asr.w	r3, r1, r0
 8007550:	e7ec      	b.n	800752c <__ulp+0x18>
 8007552:	f1a0 0114 	sub.w	r1, r0, #20
 8007556:	291e      	cmp	r1, #30
 8007558:	bfda      	itte	le
 800755a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800755e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007562:	2101      	movgt	r1, #1
 8007564:	460a      	mov	r2, r1
 8007566:	e7e1      	b.n	800752c <__ulp+0x18>
 8007568:	7ff00000 	.word	0x7ff00000

0800756c <__b2d>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	6905      	ldr	r5, [r0, #16]
 8007570:	f100 0714 	add.w	r7, r0, #20
 8007574:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007578:	1f2e      	subs	r6, r5, #4
 800757a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff fd52 	bl	8007028 <__hi0bits>
 8007584:	f1c0 0320 	rsb	r3, r0, #32
 8007588:	280a      	cmp	r0, #10
 800758a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007608 <__b2d+0x9c>
 800758e:	600b      	str	r3, [r1, #0]
 8007590:	dc14      	bgt.n	80075bc <__b2d+0x50>
 8007592:	f1c0 0e0b 	rsb	lr, r0, #11
 8007596:	fa24 f10e 	lsr.w	r1, r4, lr
 800759a:	42b7      	cmp	r7, r6
 800759c:	ea41 030c 	orr.w	r3, r1, ip
 80075a0:	bf34      	ite	cc
 80075a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80075a6:	2100      	movcs	r1, #0
 80075a8:	3015      	adds	r0, #21
 80075aa:	fa04 f000 	lsl.w	r0, r4, r0
 80075ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80075b2:	ea40 0201 	orr.w	r2, r0, r1
 80075b6:	ec43 2b10 	vmov	d0, r2, r3
 80075ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075bc:	42b7      	cmp	r7, r6
 80075be:	bf3a      	itte	cc
 80075c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80075c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80075c8:	2100      	movcs	r1, #0
 80075ca:	380b      	subs	r0, #11
 80075cc:	d017      	beq.n	80075fe <__b2d+0x92>
 80075ce:	f1c0 0c20 	rsb	ip, r0, #32
 80075d2:	fa04 f500 	lsl.w	r5, r4, r0
 80075d6:	42be      	cmp	r6, r7
 80075d8:	fa21 f40c 	lsr.w	r4, r1, ip
 80075dc:	ea45 0504 	orr.w	r5, r5, r4
 80075e0:	bf8c      	ite	hi
 80075e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80075e6:	2400      	movls	r4, #0
 80075e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80075ec:	fa01 f000 	lsl.w	r0, r1, r0
 80075f0:	fa24 f40c 	lsr.w	r4, r4, ip
 80075f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075f8:	ea40 0204 	orr.w	r2, r0, r4
 80075fc:	e7db      	b.n	80075b6 <__b2d+0x4a>
 80075fe:	ea44 030c 	orr.w	r3, r4, ip
 8007602:	460a      	mov	r2, r1
 8007604:	e7d7      	b.n	80075b6 <__b2d+0x4a>
 8007606:	bf00      	nop
 8007608:	3ff00000 	.word	0x3ff00000

0800760c <__d2b>:
 800760c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007610:	4689      	mov	r9, r1
 8007612:	2101      	movs	r1, #1
 8007614:	ec57 6b10 	vmov	r6, r7, d0
 8007618:	4690      	mov	r8, r2
 800761a:	f7ff fc0f 	bl	8006e3c <_Balloc>
 800761e:	4604      	mov	r4, r0
 8007620:	b930      	cbnz	r0, 8007630 <__d2b+0x24>
 8007622:	4602      	mov	r2, r0
 8007624:	4b25      	ldr	r3, [pc, #148]	; (80076bc <__d2b+0xb0>)
 8007626:	4826      	ldr	r0, [pc, #152]	; (80076c0 <__d2b+0xb4>)
 8007628:	f240 310a 	movw	r1, #778	; 0x30a
 800762c:	f7fe f8ca 	bl	80057c4 <__assert_func>
 8007630:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007634:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007638:	bb35      	cbnz	r5, 8007688 <__d2b+0x7c>
 800763a:	2e00      	cmp	r6, #0
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	d028      	beq.n	8007692 <__d2b+0x86>
 8007640:	4668      	mov	r0, sp
 8007642:	9600      	str	r6, [sp, #0]
 8007644:	f7ff fd10 	bl	8007068 <__lo0bits>
 8007648:	9900      	ldr	r1, [sp, #0]
 800764a:	b300      	cbz	r0, 800768e <__d2b+0x82>
 800764c:	9a01      	ldr	r2, [sp, #4]
 800764e:	f1c0 0320 	rsb	r3, r0, #32
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	430b      	orrs	r3, r1
 8007658:	40c2      	lsrs	r2, r0
 800765a:	6163      	str	r3, [r4, #20]
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9b01      	ldr	r3, [sp, #4]
 8007660:	61a3      	str	r3, [r4, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	bf14      	ite	ne
 8007666:	2202      	movne	r2, #2
 8007668:	2201      	moveq	r2, #1
 800766a:	6122      	str	r2, [r4, #16]
 800766c:	b1d5      	cbz	r5, 80076a4 <__d2b+0x98>
 800766e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007672:	4405      	add	r5, r0
 8007674:	f8c9 5000 	str.w	r5, [r9]
 8007678:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800767c:	f8c8 0000 	str.w	r0, [r8]
 8007680:	4620      	mov	r0, r4
 8007682:	b003      	add	sp, #12
 8007684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800768c:	e7d5      	b.n	800763a <__d2b+0x2e>
 800768e:	6161      	str	r1, [r4, #20]
 8007690:	e7e5      	b.n	800765e <__d2b+0x52>
 8007692:	a801      	add	r0, sp, #4
 8007694:	f7ff fce8 	bl	8007068 <__lo0bits>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	6163      	str	r3, [r4, #20]
 800769c:	2201      	movs	r2, #1
 800769e:	6122      	str	r2, [r4, #16]
 80076a0:	3020      	adds	r0, #32
 80076a2:	e7e3      	b.n	800766c <__d2b+0x60>
 80076a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076ac:	f8c9 0000 	str.w	r0, [r9]
 80076b0:	6918      	ldr	r0, [r3, #16]
 80076b2:	f7ff fcb9 	bl	8007028 <__hi0bits>
 80076b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076ba:	e7df      	b.n	800767c <__d2b+0x70>
 80076bc:	080098b9 	.word	0x080098b9
 80076c0:	080099ac 	.word	0x080099ac

080076c4 <__ratio>:
 80076c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	4688      	mov	r8, r1
 80076ca:	4669      	mov	r1, sp
 80076cc:	4681      	mov	r9, r0
 80076ce:	f7ff ff4d 	bl	800756c <__b2d>
 80076d2:	a901      	add	r1, sp, #4
 80076d4:	4640      	mov	r0, r8
 80076d6:	ec55 4b10 	vmov	r4, r5, d0
 80076da:	f7ff ff47 	bl	800756c <__b2d>
 80076de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80076e6:	eba3 0c02 	sub.w	ip, r3, r2
 80076ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80076ee:	1a9b      	subs	r3, r3, r2
 80076f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80076f4:	ec51 0b10 	vmov	r0, r1, d0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfd6      	itet	le
 80076fc:	460a      	movle	r2, r1
 80076fe:	462a      	movgt	r2, r5
 8007700:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007704:	468b      	mov	fp, r1
 8007706:	462f      	mov	r7, r5
 8007708:	bfd4      	ite	le
 800770a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800770e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007712:	4620      	mov	r0, r4
 8007714:	ee10 2a10 	vmov	r2, s0
 8007718:	465b      	mov	r3, fp
 800771a:	4639      	mov	r1, r7
 800771c:	f7f9 f896 	bl	800084c <__aeabi_ddiv>
 8007720:	ec41 0b10 	vmov	d0, r0, r1
 8007724:	b003      	add	sp, #12
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800772a <__copybits>:
 800772a:	3901      	subs	r1, #1
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	1149      	asrs	r1, r1, #5
 8007730:	6914      	ldr	r4, [r2, #16]
 8007732:	3101      	adds	r1, #1
 8007734:	f102 0314 	add.w	r3, r2, #20
 8007738:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800773c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007740:	1f05      	subs	r5, r0, #4
 8007742:	42a3      	cmp	r3, r4
 8007744:	d30c      	bcc.n	8007760 <__copybits+0x36>
 8007746:	1aa3      	subs	r3, r4, r2
 8007748:	3b11      	subs	r3, #17
 800774a:	f023 0303 	bic.w	r3, r3, #3
 800774e:	3211      	adds	r2, #17
 8007750:	42a2      	cmp	r2, r4
 8007752:	bf88      	it	hi
 8007754:	2300      	movhi	r3, #0
 8007756:	4418      	add	r0, r3
 8007758:	2300      	movs	r3, #0
 800775a:	4288      	cmp	r0, r1
 800775c:	d305      	bcc.n	800776a <__copybits+0x40>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	f853 6b04 	ldr.w	r6, [r3], #4
 8007764:	f845 6f04 	str.w	r6, [r5, #4]!
 8007768:	e7eb      	b.n	8007742 <__copybits+0x18>
 800776a:	f840 3b04 	str.w	r3, [r0], #4
 800776e:	e7f4      	b.n	800775a <__copybits+0x30>

08007770 <__any_on>:
 8007770:	f100 0214 	add.w	r2, r0, #20
 8007774:	6900      	ldr	r0, [r0, #16]
 8007776:	114b      	asrs	r3, r1, #5
 8007778:	4298      	cmp	r0, r3
 800777a:	b510      	push	{r4, lr}
 800777c:	db11      	blt.n	80077a2 <__any_on+0x32>
 800777e:	dd0a      	ble.n	8007796 <__any_on+0x26>
 8007780:	f011 011f 	ands.w	r1, r1, #31
 8007784:	d007      	beq.n	8007796 <__any_on+0x26>
 8007786:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800778a:	fa24 f001 	lsr.w	r0, r4, r1
 800778e:	fa00 f101 	lsl.w	r1, r0, r1
 8007792:	428c      	cmp	r4, r1
 8007794:	d10b      	bne.n	80077ae <__any_on+0x3e>
 8007796:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800779a:	4293      	cmp	r3, r2
 800779c:	d803      	bhi.n	80077a6 <__any_on+0x36>
 800779e:	2000      	movs	r0, #0
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	4603      	mov	r3, r0
 80077a4:	e7f7      	b.n	8007796 <__any_on+0x26>
 80077a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077aa:	2900      	cmp	r1, #0
 80077ac:	d0f5      	beq.n	800779a <__any_on+0x2a>
 80077ae:	2001      	movs	r0, #1
 80077b0:	e7f6      	b.n	80077a0 <__any_on+0x30>

080077b2 <_calloc_r>:
 80077b2:	b513      	push	{r0, r1, r4, lr}
 80077b4:	434a      	muls	r2, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	f000 f859 	bl	8007870 <_malloc_r>
 80077be:	4604      	mov	r4, r0
 80077c0:	b118      	cbz	r0, 80077ca <_calloc_r+0x18>
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	2100      	movs	r1, #0
 80077c6:	f7fc fa4b 	bl	8003c60 <memset>
 80077ca:	4620      	mov	r0, r4
 80077cc:	b002      	add	sp, #8
 80077ce:	bd10      	pop	{r4, pc}

080077d0 <_free_r>:
 80077d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d048      	beq.n	8007868 <_free_r+0x98>
 80077d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077da:	9001      	str	r0, [sp, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f1a1 0404 	sub.w	r4, r1, #4
 80077e2:	bfb8      	it	lt
 80077e4:	18e4      	addlt	r4, r4, r3
 80077e6:	f000 fe0b 	bl	8008400 <__malloc_lock>
 80077ea:	4a20      	ldr	r2, [pc, #128]	; (800786c <_free_r+0x9c>)
 80077ec:	9801      	ldr	r0, [sp, #4]
 80077ee:	6813      	ldr	r3, [r2, #0]
 80077f0:	4615      	mov	r5, r2
 80077f2:	b933      	cbnz	r3, 8007802 <_free_r+0x32>
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	6014      	str	r4, [r2, #0]
 80077f8:	b003      	add	sp, #12
 80077fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077fe:	f000 be05 	b.w	800840c <__malloc_unlock>
 8007802:	42a3      	cmp	r3, r4
 8007804:	d90b      	bls.n	800781e <_free_r+0x4e>
 8007806:	6821      	ldr	r1, [r4, #0]
 8007808:	1862      	adds	r2, r4, r1
 800780a:	4293      	cmp	r3, r2
 800780c:	bf04      	itt	eq
 800780e:	681a      	ldreq	r2, [r3, #0]
 8007810:	685b      	ldreq	r3, [r3, #4]
 8007812:	6063      	str	r3, [r4, #4]
 8007814:	bf04      	itt	eq
 8007816:	1852      	addeq	r2, r2, r1
 8007818:	6022      	streq	r2, [r4, #0]
 800781a:	602c      	str	r4, [r5, #0]
 800781c:	e7ec      	b.n	80077f8 <_free_r+0x28>
 800781e:	461a      	mov	r2, r3
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b10b      	cbz	r3, 8007828 <_free_r+0x58>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d9fa      	bls.n	800781e <_free_r+0x4e>
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	1855      	adds	r5, r2, r1
 800782c:	42a5      	cmp	r5, r4
 800782e:	d10b      	bne.n	8007848 <_free_r+0x78>
 8007830:	6824      	ldr	r4, [r4, #0]
 8007832:	4421      	add	r1, r4
 8007834:	1854      	adds	r4, r2, r1
 8007836:	42a3      	cmp	r3, r4
 8007838:	6011      	str	r1, [r2, #0]
 800783a:	d1dd      	bne.n	80077f8 <_free_r+0x28>
 800783c:	681c      	ldr	r4, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	6053      	str	r3, [r2, #4]
 8007842:	4421      	add	r1, r4
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	e7d7      	b.n	80077f8 <_free_r+0x28>
 8007848:	d902      	bls.n	8007850 <_free_r+0x80>
 800784a:	230c      	movs	r3, #12
 800784c:	6003      	str	r3, [r0, #0]
 800784e:	e7d3      	b.n	80077f8 <_free_r+0x28>
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	1961      	adds	r1, r4, r5
 8007854:	428b      	cmp	r3, r1
 8007856:	bf04      	itt	eq
 8007858:	6819      	ldreq	r1, [r3, #0]
 800785a:	685b      	ldreq	r3, [r3, #4]
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	bf04      	itt	eq
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	6054      	str	r4, [r2, #4]
 8007866:	e7c7      	b.n	80077f8 <_free_r+0x28>
 8007868:	b003      	add	sp, #12
 800786a:	bd30      	pop	{r4, r5, pc}
 800786c:	20000224 	.word	0x20000224

08007870 <_malloc_r>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	1ccd      	adds	r5, r1, #3
 8007874:	f025 0503 	bic.w	r5, r5, #3
 8007878:	3508      	adds	r5, #8
 800787a:	2d0c      	cmp	r5, #12
 800787c:	bf38      	it	cc
 800787e:	250c      	movcc	r5, #12
 8007880:	2d00      	cmp	r5, #0
 8007882:	4606      	mov	r6, r0
 8007884:	db01      	blt.n	800788a <_malloc_r+0x1a>
 8007886:	42a9      	cmp	r1, r5
 8007888:	d903      	bls.n	8007892 <_malloc_r+0x22>
 800788a:	230c      	movs	r3, #12
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	2000      	movs	r0, #0
 8007890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007892:	f000 fdb5 	bl	8008400 <__malloc_lock>
 8007896:	4921      	ldr	r1, [pc, #132]	; (800791c <_malloc_r+0xac>)
 8007898:	680a      	ldr	r2, [r1, #0]
 800789a:	4614      	mov	r4, r2
 800789c:	b99c      	cbnz	r4, 80078c6 <_malloc_r+0x56>
 800789e:	4f20      	ldr	r7, [pc, #128]	; (8007920 <_malloc_r+0xb0>)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	b923      	cbnz	r3, 80078ae <_malloc_r+0x3e>
 80078a4:	4621      	mov	r1, r4
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 fafa 	bl	8007ea0 <_sbrk_r>
 80078ac:	6038      	str	r0, [r7, #0]
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 faf5 	bl	8007ea0 <_sbrk_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d123      	bne.n	8007902 <_malloc_r+0x92>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 fda4 	bl	800840c <__malloc_unlock>
 80078c4:	e7e3      	b.n	800788e <_malloc_r+0x1e>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	1b5b      	subs	r3, r3, r5
 80078ca:	d417      	bmi.n	80078fc <_malloc_r+0x8c>
 80078cc:	2b0b      	cmp	r3, #11
 80078ce:	d903      	bls.n	80078d8 <_malloc_r+0x68>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	441c      	add	r4, r3
 80078d4:	6025      	str	r5, [r4, #0]
 80078d6:	e004      	b.n	80078e2 <_malloc_r+0x72>
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	42a2      	cmp	r2, r4
 80078dc:	bf0c      	ite	eq
 80078de:	600b      	streq	r3, [r1, #0]
 80078e0:	6053      	strne	r3, [r2, #4]
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 fd92 	bl	800840c <__malloc_unlock>
 80078e8:	f104 000b 	add.w	r0, r4, #11
 80078ec:	1d23      	adds	r3, r4, #4
 80078ee:	f020 0007 	bic.w	r0, r0, #7
 80078f2:	1ac2      	subs	r2, r0, r3
 80078f4:	d0cc      	beq.n	8007890 <_malloc_r+0x20>
 80078f6:	1a1b      	subs	r3, r3, r0
 80078f8:	50a3      	str	r3, [r4, r2]
 80078fa:	e7c9      	b.n	8007890 <_malloc_r+0x20>
 80078fc:	4622      	mov	r2, r4
 80078fe:	6864      	ldr	r4, [r4, #4]
 8007900:	e7cc      	b.n	800789c <_malloc_r+0x2c>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d0e3      	beq.n	80078d4 <_malloc_r+0x64>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4630      	mov	r0, r6
 8007910:	f000 fac6 	bl	8007ea0 <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d1dd      	bne.n	80078d4 <_malloc_r+0x64>
 8007918:	e7cf      	b.n	80078ba <_malloc_r+0x4a>
 800791a:	bf00      	nop
 800791c:	20000224 	.word	0x20000224
 8007920:	20000228 	.word	0x20000228

08007924 <__ssputs_r>:
 8007924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	688e      	ldr	r6, [r1, #8]
 800792a:	429e      	cmp	r6, r3
 800792c:	4682      	mov	sl, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4690      	mov	r8, r2
 8007932:	461f      	mov	r7, r3
 8007934:	d838      	bhi.n	80079a8 <__ssputs_r+0x84>
 8007936:	898a      	ldrh	r2, [r1, #12]
 8007938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800793c:	d032      	beq.n	80079a4 <__ssputs_r+0x80>
 800793e:	6825      	ldr	r5, [r4, #0]
 8007940:	6909      	ldr	r1, [r1, #16]
 8007942:	eba5 0901 	sub.w	r9, r5, r1
 8007946:	6965      	ldr	r5, [r4, #20]
 8007948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800794c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007950:	3301      	adds	r3, #1
 8007952:	444b      	add	r3, r9
 8007954:	106d      	asrs	r5, r5, #1
 8007956:	429d      	cmp	r5, r3
 8007958:	bf38      	it	cc
 800795a:	461d      	movcc	r5, r3
 800795c:	0553      	lsls	r3, r2, #21
 800795e:	d531      	bpl.n	80079c4 <__ssputs_r+0xa0>
 8007960:	4629      	mov	r1, r5
 8007962:	f7ff ff85 	bl	8007870 <_malloc_r>
 8007966:	4606      	mov	r6, r0
 8007968:	b950      	cbnz	r0, 8007980 <__ssputs_r+0x5c>
 800796a:	230c      	movs	r3, #12
 800796c:	f8ca 3000 	str.w	r3, [sl]
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007980:	6921      	ldr	r1, [r4, #16]
 8007982:	464a      	mov	r2, r9
 8007984:	f7ff fa4c 	bl	8006e20 <memcpy>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800798e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007992:	81a3      	strh	r3, [r4, #12]
 8007994:	6126      	str	r6, [r4, #16]
 8007996:	6165      	str	r5, [r4, #20]
 8007998:	444e      	add	r6, r9
 800799a:	eba5 0509 	sub.w	r5, r5, r9
 800799e:	6026      	str	r6, [r4, #0]
 80079a0:	60a5      	str	r5, [r4, #8]
 80079a2:	463e      	mov	r6, r7
 80079a4:	42be      	cmp	r6, r7
 80079a6:	d900      	bls.n	80079aa <__ssputs_r+0x86>
 80079a8:	463e      	mov	r6, r7
 80079aa:	4632      	mov	r2, r6
 80079ac:	6820      	ldr	r0, [r4, #0]
 80079ae:	4641      	mov	r1, r8
 80079b0:	f000 fd0c 	bl	80083cc <memmove>
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	1b9b      	subs	r3, r3, r6
 80079ba:	4432      	add	r2, r6
 80079bc:	60a3      	str	r3, [r4, #8]
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	2000      	movs	r0, #0
 80079c2:	e7db      	b.n	800797c <__ssputs_r+0x58>
 80079c4:	462a      	mov	r2, r5
 80079c6:	f000 fd27 	bl	8008418 <_realloc_r>
 80079ca:	4606      	mov	r6, r0
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d1e1      	bne.n	8007994 <__ssputs_r+0x70>
 80079d0:	6921      	ldr	r1, [r4, #16]
 80079d2:	4650      	mov	r0, sl
 80079d4:	f7ff fefc 	bl	80077d0 <_free_r>
 80079d8:	e7c7      	b.n	800796a <__ssputs_r+0x46>
	...

080079dc <_svfiprintf_r>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	4698      	mov	r8, r3
 80079e2:	898b      	ldrh	r3, [r1, #12]
 80079e4:	061b      	lsls	r3, r3, #24
 80079e6:	b09d      	sub	sp, #116	; 0x74
 80079e8:	4607      	mov	r7, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	4614      	mov	r4, r2
 80079ee:	d50e      	bpl.n	8007a0e <_svfiprintf_r+0x32>
 80079f0:	690b      	ldr	r3, [r1, #16]
 80079f2:	b963      	cbnz	r3, 8007a0e <_svfiprintf_r+0x32>
 80079f4:	2140      	movs	r1, #64	; 0x40
 80079f6:	f7ff ff3b 	bl	8007870 <_malloc_r>
 80079fa:	6028      	str	r0, [r5, #0]
 80079fc:	6128      	str	r0, [r5, #16]
 80079fe:	b920      	cbnz	r0, 8007a0a <_svfiprintf_r+0x2e>
 8007a00:	230c      	movs	r3, #12
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e0d1      	b.n	8007bae <_svfiprintf_r+0x1d2>
 8007a0a:	2340      	movs	r3, #64	; 0x40
 8007a0c:	616b      	str	r3, [r5, #20]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9309      	str	r3, [sp, #36]	; 0x24
 8007a12:	2320      	movs	r3, #32
 8007a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a1c:	2330      	movs	r3, #48	; 0x30
 8007a1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bc8 <_svfiprintf_r+0x1ec>
 8007a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a26:	f04f 0901 	mov.w	r9, #1
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	469a      	mov	sl, r3
 8007a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a32:	b10a      	cbz	r2, 8007a38 <_svfiprintf_r+0x5c>
 8007a34:	2a25      	cmp	r2, #37	; 0x25
 8007a36:	d1f9      	bne.n	8007a2c <_svfiprintf_r+0x50>
 8007a38:	ebba 0b04 	subs.w	fp, sl, r4
 8007a3c:	d00b      	beq.n	8007a56 <_svfiprintf_r+0x7a>
 8007a3e:	465b      	mov	r3, fp
 8007a40:	4622      	mov	r2, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff ff6d 	bl	8007924 <__ssputs_r>
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f000 80aa 	beq.w	8007ba4 <_svfiprintf_r+0x1c8>
 8007a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a52:	445a      	add	r2, fp
 8007a54:	9209      	str	r2, [sp, #36]	; 0x24
 8007a56:	f89a 3000 	ldrb.w	r3, [sl]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80a2 	beq.w	8007ba4 <_svfiprintf_r+0x1c8>
 8007a60:	2300      	movs	r3, #0
 8007a62:	f04f 32ff 	mov.w	r2, #4294967295
 8007a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a6a:	f10a 0a01 	add.w	sl, sl, #1
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a76:	931a      	str	r3, [sp, #104]	; 0x68
 8007a78:	4654      	mov	r4, sl
 8007a7a:	2205      	movs	r2, #5
 8007a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a80:	4851      	ldr	r0, [pc, #324]	; (8007bc8 <_svfiprintf_r+0x1ec>)
 8007a82:	f7f8 fbad 	bl	80001e0 <memchr>
 8007a86:	9a04      	ldr	r2, [sp, #16]
 8007a88:	b9d8      	cbnz	r0, 8007ac2 <_svfiprintf_r+0xe6>
 8007a8a:	06d0      	lsls	r0, r2, #27
 8007a8c:	bf44      	itt	mi
 8007a8e:	2320      	movmi	r3, #32
 8007a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a94:	0711      	lsls	r1, r2, #28
 8007a96:	bf44      	itt	mi
 8007a98:	232b      	movmi	r3, #43	; 0x2b
 8007a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa4:	d015      	beq.n	8007ad2 <_svfiprintf_r+0xf6>
 8007aa6:	9a07      	ldr	r2, [sp, #28]
 8007aa8:	4654      	mov	r4, sl
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f04f 0c0a 	mov.w	ip, #10
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab6:	3b30      	subs	r3, #48	; 0x30
 8007ab8:	2b09      	cmp	r3, #9
 8007aba:	d94e      	bls.n	8007b5a <_svfiprintf_r+0x17e>
 8007abc:	b1b0      	cbz	r0, 8007aec <_svfiprintf_r+0x110>
 8007abe:	9207      	str	r2, [sp, #28]
 8007ac0:	e014      	b.n	8007aec <_svfiprintf_r+0x110>
 8007ac2:	eba0 0308 	sub.w	r3, r0, r8
 8007ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	46a2      	mov	sl, r4
 8007ad0:	e7d2      	b.n	8007a78 <_svfiprintf_r+0x9c>
 8007ad2:	9b03      	ldr	r3, [sp, #12]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	9103      	str	r1, [sp, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfbb      	ittet	lt
 8007ade:	425b      	neglt	r3, r3
 8007ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae4:	9307      	strge	r3, [sp, #28]
 8007ae6:	9307      	strlt	r3, [sp, #28]
 8007ae8:	bfb8      	it	lt
 8007aea:	9204      	strlt	r2, [sp, #16]
 8007aec:	7823      	ldrb	r3, [r4, #0]
 8007aee:	2b2e      	cmp	r3, #46	; 0x2e
 8007af0:	d10c      	bne.n	8007b0c <_svfiprintf_r+0x130>
 8007af2:	7863      	ldrb	r3, [r4, #1]
 8007af4:	2b2a      	cmp	r3, #42	; 0x2a
 8007af6:	d135      	bne.n	8007b64 <_svfiprintf_r+0x188>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	9203      	str	r2, [sp, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfb8      	it	lt
 8007b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b08:	3402      	adds	r4, #2
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bd8 <_svfiprintf_r+0x1fc>
 8007b10:	7821      	ldrb	r1, [r4, #0]
 8007b12:	2203      	movs	r2, #3
 8007b14:	4650      	mov	r0, sl
 8007b16:	f7f8 fb63 	bl	80001e0 <memchr>
 8007b1a:	b140      	cbz	r0, 8007b2e <_svfiprintf_r+0x152>
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	eba0 000a 	sub.w	r0, r0, sl
 8007b22:	fa03 f000 	lsl.w	r0, r3, r0
 8007b26:	9b04      	ldr	r3, [sp, #16]
 8007b28:	4303      	orrs	r3, r0
 8007b2a:	3401      	adds	r4, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b32:	4826      	ldr	r0, [pc, #152]	; (8007bcc <_svfiprintf_r+0x1f0>)
 8007b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b38:	2206      	movs	r2, #6
 8007b3a:	f7f8 fb51 	bl	80001e0 <memchr>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d038      	beq.n	8007bb4 <_svfiprintf_r+0x1d8>
 8007b42:	4b23      	ldr	r3, [pc, #140]	; (8007bd0 <_svfiprintf_r+0x1f4>)
 8007b44:	bb1b      	cbnz	r3, 8007b8e <_svfiprintf_r+0x1b2>
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	3307      	adds	r3, #7
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	3308      	adds	r3, #8
 8007b50:	9303      	str	r3, [sp, #12]
 8007b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b54:	4433      	add	r3, r6
 8007b56:	9309      	str	r3, [sp, #36]	; 0x24
 8007b58:	e767      	b.n	8007a2a <_svfiprintf_r+0x4e>
 8007b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b5e:	460c      	mov	r4, r1
 8007b60:	2001      	movs	r0, #1
 8007b62:	e7a5      	b.n	8007ab0 <_svfiprintf_r+0xd4>
 8007b64:	2300      	movs	r3, #0
 8007b66:	3401      	adds	r4, #1
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f04f 0c0a 	mov.w	ip, #10
 8007b70:	4620      	mov	r0, r4
 8007b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b76:	3a30      	subs	r2, #48	; 0x30
 8007b78:	2a09      	cmp	r2, #9
 8007b7a:	d903      	bls.n	8007b84 <_svfiprintf_r+0x1a8>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0c5      	beq.n	8007b0c <_svfiprintf_r+0x130>
 8007b80:	9105      	str	r1, [sp, #20]
 8007b82:	e7c3      	b.n	8007b0c <_svfiprintf_r+0x130>
 8007b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b88:	4604      	mov	r4, r0
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e7f0      	b.n	8007b70 <_svfiprintf_r+0x194>
 8007b8e:	ab03      	add	r3, sp, #12
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	462a      	mov	r2, r5
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <_svfiprintf_r+0x1f8>)
 8007b96:	a904      	add	r1, sp, #16
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7fc f909 	bl	8003db0 <_printf_float>
 8007b9e:	1c42      	adds	r2, r0, #1
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	d1d6      	bne.n	8007b52 <_svfiprintf_r+0x176>
 8007ba4:	89ab      	ldrh	r3, [r5, #12]
 8007ba6:	065b      	lsls	r3, r3, #25
 8007ba8:	f53f af2c 	bmi.w	8007a04 <_svfiprintf_r+0x28>
 8007bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bae:	b01d      	add	sp, #116	; 0x74
 8007bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb4:	ab03      	add	r3, sp, #12
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <_svfiprintf_r+0x1f8>)
 8007bbc:	a904      	add	r1, sp, #16
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7fc fb9a 	bl	80042f8 <_printf_i>
 8007bc4:	e7eb      	b.n	8007b9e <_svfiprintf_r+0x1c2>
 8007bc6:	bf00      	nop
 8007bc8:	08009b0c 	.word	0x08009b0c
 8007bcc:	08009b16 	.word	0x08009b16
 8007bd0:	08003db1 	.word	0x08003db1
 8007bd4:	08007925 	.word	0x08007925
 8007bd8:	08009b12 	.word	0x08009b12

08007bdc <__sfputc_r>:
 8007bdc:	6893      	ldr	r3, [r2, #8]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	b410      	push	{r4}
 8007be4:	6093      	str	r3, [r2, #8]
 8007be6:	da08      	bge.n	8007bfa <__sfputc_r+0x1e>
 8007be8:	6994      	ldr	r4, [r2, #24]
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	db01      	blt.n	8007bf2 <__sfputc_r+0x16>
 8007bee:	290a      	cmp	r1, #10
 8007bf0:	d103      	bne.n	8007bfa <__sfputc_r+0x1e>
 8007bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf6:	f000 b9b9 	b.w	8007f6c <__swbuf_r>
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	1c58      	adds	r0, r3, #1
 8007bfe:	6010      	str	r0, [r2, #0]
 8007c00:	7019      	strb	r1, [r3, #0]
 8007c02:	4608      	mov	r0, r1
 8007c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <__sfputs_r>:
 8007c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	460f      	mov	r7, r1
 8007c10:	4614      	mov	r4, r2
 8007c12:	18d5      	adds	r5, r2, r3
 8007c14:	42ac      	cmp	r4, r5
 8007c16:	d101      	bne.n	8007c1c <__sfputs_r+0x12>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e007      	b.n	8007c2c <__sfputs_r+0x22>
 8007c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c20:	463a      	mov	r2, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffda 	bl	8007bdc <__sfputc_r>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d1f3      	bne.n	8007c14 <__sfputs_r+0xa>
 8007c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c30 <_vfiprintf_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	460d      	mov	r5, r1
 8007c36:	b09d      	sub	sp, #116	; 0x74
 8007c38:	4614      	mov	r4, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	b118      	cbz	r0, 8007c48 <_vfiprintf_r+0x18>
 8007c40:	6983      	ldr	r3, [r0, #24]
 8007c42:	b90b      	cbnz	r3, 8007c48 <_vfiprintf_r+0x18>
 8007c44:	f7fe fcac 	bl	80065a0 <__sinit>
 8007c48:	4b89      	ldr	r3, [pc, #548]	; (8007e70 <_vfiprintf_r+0x240>)
 8007c4a:	429d      	cmp	r5, r3
 8007c4c:	d11b      	bne.n	8007c86 <_vfiprintf_r+0x56>
 8007c4e:	6875      	ldr	r5, [r6, #4]
 8007c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c52:	07d9      	lsls	r1, r3, #31
 8007c54:	d405      	bmi.n	8007c62 <_vfiprintf_r+0x32>
 8007c56:	89ab      	ldrh	r3, [r5, #12]
 8007c58:	059a      	lsls	r2, r3, #22
 8007c5a:	d402      	bmi.n	8007c62 <_vfiprintf_r+0x32>
 8007c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c5e:	f7ff f8c2 	bl	8006de6 <__retarget_lock_acquire_recursive>
 8007c62:	89ab      	ldrh	r3, [r5, #12]
 8007c64:	071b      	lsls	r3, r3, #28
 8007c66:	d501      	bpl.n	8007c6c <_vfiprintf_r+0x3c>
 8007c68:	692b      	ldr	r3, [r5, #16]
 8007c6a:	b9eb      	cbnz	r3, 8007ca8 <_vfiprintf_r+0x78>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 f9ee 	bl	8008050 <__swsetup_r>
 8007c74:	b1c0      	cbz	r0, 8007ca8 <_vfiprintf_r+0x78>
 8007c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c78:	07dc      	lsls	r4, r3, #31
 8007c7a:	d50e      	bpl.n	8007c9a <_vfiprintf_r+0x6a>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	b01d      	add	sp, #116	; 0x74
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	4b7b      	ldr	r3, [pc, #492]	; (8007e74 <_vfiprintf_r+0x244>)
 8007c88:	429d      	cmp	r5, r3
 8007c8a:	d101      	bne.n	8007c90 <_vfiprintf_r+0x60>
 8007c8c:	68b5      	ldr	r5, [r6, #8]
 8007c8e:	e7df      	b.n	8007c50 <_vfiprintf_r+0x20>
 8007c90:	4b79      	ldr	r3, [pc, #484]	; (8007e78 <_vfiprintf_r+0x248>)
 8007c92:	429d      	cmp	r5, r3
 8007c94:	bf08      	it	eq
 8007c96:	68f5      	ldreq	r5, [r6, #12]
 8007c98:	e7da      	b.n	8007c50 <_vfiprintf_r+0x20>
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	0598      	lsls	r0, r3, #22
 8007c9e:	d4ed      	bmi.n	8007c7c <_vfiprintf_r+0x4c>
 8007ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca2:	f7ff f8a1 	bl	8006de8 <__retarget_lock_release_recursive>
 8007ca6:	e7e9      	b.n	8007c7c <_vfiprintf_r+0x4c>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cac:	2320      	movs	r3, #32
 8007cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb6:	2330      	movs	r3, #48	; 0x30
 8007cb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e7c <_vfiprintf_r+0x24c>
 8007cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cc0:	f04f 0901 	mov.w	r9, #1
 8007cc4:	4623      	mov	r3, r4
 8007cc6:	469a      	mov	sl, r3
 8007cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ccc:	b10a      	cbz	r2, 8007cd2 <_vfiprintf_r+0xa2>
 8007cce:	2a25      	cmp	r2, #37	; 0x25
 8007cd0:	d1f9      	bne.n	8007cc6 <_vfiprintf_r+0x96>
 8007cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007cd6:	d00b      	beq.n	8007cf0 <_vfiprintf_r+0xc0>
 8007cd8:	465b      	mov	r3, fp
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ff93 	bl	8007c0a <__sfputs_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	f000 80aa 	beq.w	8007e3e <_vfiprintf_r+0x20e>
 8007cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cec:	445a      	add	r2, fp
 8007cee:	9209      	str	r2, [sp, #36]	; 0x24
 8007cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 80a2 	beq.w	8007e3e <_vfiprintf_r+0x20e>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d04:	f10a 0a01 	add.w	sl, sl, #1
 8007d08:	9304      	str	r3, [sp, #16]
 8007d0a:	9307      	str	r3, [sp, #28]
 8007d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d10:	931a      	str	r3, [sp, #104]	; 0x68
 8007d12:	4654      	mov	r4, sl
 8007d14:	2205      	movs	r2, #5
 8007d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1a:	4858      	ldr	r0, [pc, #352]	; (8007e7c <_vfiprintf_r+0x24c>)
 8007d1c:	f7f8 fa60 	bl	80001e0 <memchr>
 8007d20:	9a04      	ldr	r2, [sp, #16]
 8007d22:	b9d8      	cbnz	r0, 8007d5c <_vfiprintf_r+0x12c>
 8007d24:	06d1      	lsls	r1, r2, #27
 8007d26:	bf44      	itt	mi
 8007d28:	2320      	movmi	r3, #32
 8007d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d2e:	0713      	lsls	r3, r2, #28
 8007d30:	bf44      	itt	mi
 8007d32:	232b      	movmi	r3, #43	; 0x2b
 8007d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d38:	f89a 3000 	ldrb.w	r3, [sl]
 8007d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3e:	d015      	beq.n	8007d6c <_vfiprintf_r+0x13c>
 8007d40:	9a07      	ldr	r2, [sp, #28]
 8007d42:	4654      	mov	r4, sl
 8007d44:	2000      	movs	r0, #0
 8007d46:	f04f 0c0a 	mov.w	ip, #10
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d50:	3b30      	subs	r3, #48	; 0x30
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d94e      	bls.n	8007df4 <_vfiprintf_r+0x1c4>
 8007d56:	b1b0      	cbz	r0, 8007d86 <_vfiprintf_r+0x156>
 8007d58:	9207      	str	r2, [sp, #28]
 8007d5a:	e014      	b.n	8007d86 <_vfiprintf_r+0x156>
 8007d5c:	eba0 0308 	sub.w	r3, r0, r8
 8007d60:	fa09 f303 	lsl.w	r3, r9, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	46a2      	mov	sl, r4
 8007d6a:	e7d2      	b.n	8007d12 <_vfiprintf_r+0xe2>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	1d19      	adds	r1, r3, #4
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	9103      	str	r1, [sp, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfbb      	ittet	lt
 8007d78:	425b      	neglt	r3, r3
 8007d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d7e:	9307      	strge	r3, [sp, #28]
 8007d80:	9307      	strlt	r3, [sp, #28]
 8007d82:	bfb8      	it	lt
 8007d84:	9204      	strlt	r2, [sp, #16]
 8007d86:	7823      	ldrb	r3, [r4, #0]
 8007d88:	2b2e      	cmp	r3, #46	; 0x2e
 8007d8a:	d10c      	bne.n	8007da6 <_vfiprintf_r+0x176>
 8007d8c:	7863      	ldrb	r3, [r4, #1]
 8007d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d90:	d135      	bne.n	8007dfe <_vfiprintf_r+0x1ce>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	9203      	str	r2, [sp, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bfb8      	it	lt
 8007d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007da2:	3402      	adds	r4, #2
 8007da4:	9305      	str	r3, [sp, #20]
 8007da6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e8c <_vfiprintf_r+0x25c>
 8007daa:	7821      	ldrb	r1, [r4, #0]
 8007dac:	2203      	movs	r2, #3
 8007dae:	4650      	mov	r0, sl
 8007db0:	f7f8 fa16 	bl	80001e0 <memchr>
 8007db4:	b140      	cbz	r0, 8007dc8 <_vfiprintf_r+0x198>
 8007db6:	2340      	movs	r3, #64	; 0x40
 8007db8:	eba0 000a 	sub.w	r0, r0, sl
 8007dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8007dc0:	9b04      	ldr	r3, [sp, #16]
 8007dc2:	4303      	orrs	r3, r0
 8007dc4:	3401      	adds	r4, #1
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dcc:	482c      	ldr	r0, [pc, #176]	; (8007e80 <_vfiprintf_r+0x250>)
 8007dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dd2:	2206      	movs	r2, #6
 8007dd4:	f7f8 fa04 	bl	80001e0 <memchr>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d03f      	beq.n	8007e5c <_vfiprintf_r+0x22c>
 8007ddc:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <_vfiprintf_r+0x254>)
 8007dde:	bb1b      	cbnz	r3, 8007e28 <_vfiprintf_r+0x1f8>
 8007de0:	9b03      	ldr	r3, [sp, #12]
 8007de2:	3307      	adds	r3, #7
 8007de4:	f023 0307 	bic.w	r3, r3, #7
 8007de8:	3308      	adds	r3, #8
 8007dea:	9303      	str	r3, [sp, #12]
 8007dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dee:	443b      	add	r3, r7
 8007df0:	9309      	str	r3, [sp, #36]	; 0x24
 8007df2:	e767      	b.n	8007cc4 <_vfiprintf_r+0x94>
 8007df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df8:	460c      	mov	r4, r1
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e7a5      	b.n	8007d4a <_vfiprintf_r+0x11a>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	3401      	adds	r4, #1
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	4619      	mov	r1, r3
 8007e06:	f04f 0c0a 	mov.w	ip, #10
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e10:	3a30      	subs	r2, #48	; 0x30
 8007e12:	2a09      	cmp	r2, #9
 8007e14:	d903      	bls.n	8007e1e <_vfiprintf_r+0x1ee>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0c5      	beq.n	8007da6 <_vfiprintf_r+0x176>
 8007e1a:	9105      	str	r1, [sp, #20]
 8007e1c:	e7c3      	b.n	8007da6 <_vfiprintf_r+0x176>
 8007e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e22:	4604      	mov	r4, r0
 8007e24:	2301      	movs	r3, #1
 8007e26:	e7f0      	b.n	8007e0a <_vfiprintf_r+0x1da>
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4b16      	ldr	r3, [pc, #88]	; (8007e88 <_vfiprintf_r+0x258>)
 8007e30:	a904      	add	r1, sp, #16
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7fb ffbc 	bl	8003db0 <_printf_float>
 8007e38:	4607      	mov	r7, r0
 8007e3a:	1c78      	adds	r0, r7, #1
 8007e3c:	d1d6      	bne.n	8007dec <_vfiprintf_r+0x1bc>
 8007e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e40:	07d9      	lsls	r1, r3, #31
 8007e42:	d405      	bmi.n	8007e50 <_vfiprintf_r+0x220>
 8007e44:	89ab      	ldrh	r3, [r5, #12]
 8007e46:	059a      	lsls	r2, r3, #22
 8007e48:	d402      	bmi.n	8007e50 <_vfiprintf_r+0x220>
 8007e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4c:	f7fe ffcc 	bl	8006de8 <__retarget_lock_release_recursive>
 8007e50:	89ab      	ldrh	r3, [r5, #12]
 8007e52:	065b      	lsls	r3, r3, #25
 8007e54:	f53f af12 	bmi.w	8007c7c <_vfiprintf_r+0x4c>
 8007e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e5a:	e711      	b.n	8007c80 <_vfiprintf_r+0x50>
 8007e5c:	ab03      	add	r3, sp, #12
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	462a      	mov	r2, r5
 8007e62:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <_vfiprintf_r+0x258>)
 8007e64:	a904      	add	r1, sp, #16
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7fc fa46 	bl	80042f8 <_printf_i>
 8007e6c:	e7e4      	b.n	8007e38 <_vfiprintf_r+0x208>
 8007e6e:	bf00      	nop
 8007e70:	080098ec 	.word	0x080098ec
 8007e74:	0800990c 	.word	0x0800990c
 8007e78:	080098cc 	.word	0x080098cc
 8007e7c:	08009b0c 	.word	0x08009b0c
 8007e80:	08009b16 	.word	0x08009b16
 8007e84:	08003db1 	.word	0x08003db1
 8007e88:	08007c0b 	.word	0x08007c0b
 8007e8c:	08009b12 	.word	0x08009b12

08007e90 <nan>:
 8007e90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e98 <nan+0x8>
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	00000000 	.word	0x00000000
 8007e9c:	7ff80000 	.word	0x7ff80000

08007ea0 <_sbrk_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_sbrk_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 fcea 	bl	8001884 <_sbrk>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_sbrk_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_sbrk_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	2000223c 	.word	0x2000223c

08007ec0 <__sread>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	f000 facc 	bl	8008464 <_read_r>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	bfab      	itete	ge
 8007ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ed4:	181b      	addge	r3, r3, r0
 8007ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eda:	bfac      	ite	ge
 8007edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ede:	81a3      	strhlt	r3, [r4, #12]
 8007ee0:	bd10      	pop	{r4, pc}

08007ee2 <__swrite>:
 8007ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	898b      	ldrh	r3, [r1, #12]
 8007eea:	05db      	lsls	r3, r3, #23
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	d505      	bpl.n	8007f00 <__swrite+0x1e>
 8007ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef8:	2302      	movs	r3, #2
 8007efa:	2200      	movs	r2, #0
 8007efc:	f000 f9f0 	bl	80082e0 <_lseek_r>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	4628      	mov	r0, r5
 8007f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f16:	f000 b889 	b.w	800802c <_write_r>

08007f1a <__sseek>:
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f22:	f000 f9dd 	bl	80082e0 <_lseek_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	bf15      	itete	ne
 8007f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f36:	81a3      	strheq	r3, [r4, #12]
 8007f38:	bf18      	it	ne
 8007f3a:	81a3      	strhne	r3, [r4, #12]
 8007f3c:	bd10      	pop	{r4, pc}

08007f3e <__sclose>:
 8007f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f42:	f000 b8fb 	b.w	800813c <_close_r>

08007f46 <strncmp>:
 8007f46:	b510      	push	{r4, lr}
 8007f48:	b16a      	cbz	r2, 8007f66 <strncmp+0x20>
 8007f4a:	3901      	subs	r1, #1
 8007f4c:	1884      	adds	r4, r0, r2
 8007f4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d103      	bne.n	8007f62 <strncmp+0x1c>
 8007f5a:	42a0      	cmp	r0, r4
 8007f5c:	d001      	beq.n	8007f62 <strncmp+0x1c>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f5      	bne.n	8007f4e <strncmp+0x8>
 8007f62:	1a98      	subs	r0, r3, r2
 8007f64:	bd10      	pop	{r4, pc}
 8007f66:	4610      	mov	r0, r2
 8007f68:	e7fc      	b.n	8007f64 <strncmp+0x1e>
	...

08007f6c <__swbuf_r>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	460e      	mov	r6, r1
 8007f70:	4614      	mov	r4, r2
 8007f72:	4605      	mov	r5, r0
 8007f74:	b118      	cbz	r0, 8007f7e <__swbuf_r+0x12>
 8007f76:	6983      	ldr	r3, [r0, #24]
 8007f78:	b90b      	cbnz	r3, 8007f7e <__swbuf_r+0x12>
 8007f7a:	f7fe fb11 	bl	80065a0 <__sinit>
 8007f7e:	4b21      	ldr	r3, [pc, #132]	; (8008004 <__swbuf_r+0x98>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	d12b      	bne.n	8007fdc <__swbuf_r+0x70>
 8007f84:	686c      	ldr	r4, [r5, #4]
 8007f86:	69a3      	ldr	r3, [r4, #24]
 8007f88:	60a3      	str	r3, [r4, #8]
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	071a      	lsls	r2, r3, #28
 8007f8e:	d52f      	bpl.n	8007ff0 <__swbuf_r+0x84>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	b36b      	cbz	r3, 8007ff0 <__swbuf_r+0x84>
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	1ac0      	subs	r0, r0, r3
 8007f9a:	6963      	ldr	r3, [r4, #20]
 8007f9c:	b2f6      	uxtb	r6, r6
 8007f9e:	4283      	cmp	r3, r0
 8007fa0:	4637      	mov	r7, r6
 8007fa2:	dc04      	bgt.n	8007fae <__swbuf_r+0x42>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f95e 	bl	8008268 <_fflush_r>
 8007fac:	bb30      	cbnz	r0, 8007ffc <__swbuf_r+0x90>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	60a3      	str	r3, [r4, #8]
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	701e      	strb	r6, [r3, #0]
 8007fbc:	6963      	ldr	r3, [r4, #20]
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	4283      	cmp	r3, r0
 8007fc2:	d004      	beq.n	8007fce <__swbuf_r+0x62>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d506      	bpl.n	8007fd8 <__swbuf_r+0x6c>
 8007fca:	2e0a      	cmp	r6, #10
 8007fcc:	d104      	bne.n	8007fd8 <__swbuf_r+0x6c>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 f949 	bl	8008268 <_fflush_r>
 8007fd6:	b988      	cbnz	r0, 8007ffc <__swbuf_r+0x90>
 8007fd8:	4638      	mov	r0, r7
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <__swbuf_r+0x9c>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d101      	bne.n	8007fe6 <__swbuf_r+0x7a>
 8007fe2:	68ac      	ldr	r4, [r5, #8]
 8007fe4:	e7cf      	b.n	8007f86 <__swbuf_r+0x1a>
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <__swbuf_r+0xa0>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	bf08      	it	eq
 8007fec:	68ec      	ldreq	r4, [r5, #12]
 8007fee:	e7ca      	b.n	8007f86 <__swbuf_r+0x1a>
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f82c 	bl	8008050 <__swsetup_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0cb      	beq.n	8007f94 <__swbuf_r+0x28>
 8007ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8008000:	e7ea      	b.n	8007fd8 <__swbuf_r+0x6c>
 8008002:	bf00      	nop
 8008004:	080098ec 	.word	0x080098ec
 8008008:	0800990c 	.word	0x0800990c
 800800c:	080098cc 	.word	0x080098cc

08008010 <__ascii_wctomb>:
 8008010:	b149      	cbz	r1, 8008026 <__ascii_wctomb+0x16>
 8008012:	2aff      	cmp	r2, #255	; 0xff
 8008014:	bf85      	ittet	hi
 8008016:	238a      	movhi	r3, #138	; 0x8a
 8008018:	6003      	strhi	r3, [r0, #0]
 800801a:	700a      	strbls	r2, [r1, #0]
 800801c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008020:	bf98      	it	ls
 8008022:	2001      	movls	r0, #1
 8008024:	4770      	bx	lr
 8008026:	4608      	mov	r0, r1
 8008028:	4770      	bx	lr
	...

0800802c <_write_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d07      	ldr	r5, [pc, #28]	; (800804c <_write_r+0x20>)
 8008030:	4604      	mov	r4, r0
 8008032:	4608      	mov	r0, r1
 8008034:	4611      	mov	r1, r2
 8008036:	2200      	movs	r2, #0
 8008038:	602a      	str	r2, [r5, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	f7f9 fa86 	bl	800154c <_write>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_write_r+0x1e>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_write_r+0x1e>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	2000223c 	.word	0x2000223c

08008050 <__swsetup_r>:
 8008050:	4b32      	ldr	r3, [pc, #200]	; (800811c <__swsetup_r+0xcc>)
 8008052:	b570      	push	{r4, r5, r6, lr}
 8008054:	681d      	ldr	r5, [r3, #0]
 8008056:	4606      	mov	r6, r0
 8008058:	460c      	mov	r4, r1
 800805a:	b125      	cbz	r5, 8008066 <__swsetup_r+0x16>
 800805c:	69ab      	ldr	r3, [r5, #24]
 800805e:	b913      	cbnz	r3, 8008066 <__swsetup_r+0x16>
 8008060:	4628      	mov	r0, r5
 8008062:	f7fe fa9d 	bl	80065a0 <__sinit>
 8008066:	4b2e      	ldr	r3, [pc, #184]	; (8008120 <__swsetup_r+0xd0>)
 8008068:	429c      	cmp	r4, r3
 800806a:	d10f      	bne.n	800808c <__swsetup_r+0x3c>
 800806c:	686c      	ldr	r4, [r5, #4]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008074:	0719      	lsls	r1, r3, #28
 8008076:	d42c      	bmi.n	80080d2 <__swsetup_r+0x82>
 8008078:	06dd      	lsls	r5, r3, #27
 800807a:	d411      	bmi.n	80080a0 <__swsetup_r+0x50>
 800807c:	2309      	movs	r3, #9
 800807e:	6033      	str	r3, [r6, #0]
 8008080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	e03e      	b.n	800810a <__swsetup_r+0xba>
 800808c:	4b25      	ldr	r3, [pc, #148]	; (8008124 <__swsetup_r+0xd4>)
 800808e:	429c      	cmp	r4, r3
 8008090:	d101      	bne.n	8008096 <__swsetup_r+0x46>
 8008092:	68ac      	ldr	r4, [r5, #8]
 8008094:	e7eb      	b.n	800806e <__swsetup_r+0x1e>
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <__swsetup_r+0xd8>)
 8008098:	429c      	cmp	r4, r3
 800809a:	bf08      	it	eq
 800809c:	68ec      	ldreq	r4, [r5, #12]
 800809e:	e7e6      	b.n	800806e <__swsetup_r+0x1e>
 80080a0:	0758      	lsls	r0, r3, #29
 80080a2:	d512      	bpl.n	80080ca <__swsetup_r+0x7a>
 80080a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a6:	b141      	cbz	r1, 80080ba <__swsetup_r+0x6a>
 80080a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d002      	beq.n	80080b6 <__swsetup_r+0x66>
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7ff fb8d 	bl	80077d0 <_free_r>
 80080b6:	2300      	movs	r3, #0
 80080b8:	6363      	str	r3, [r4, #52]	; 0x34
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	2300      	movs	r3, #0
 80080c4:	6063      	str	r3, [r4, #4]
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f043 0308 	orr.w	r3, r3, #8
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	b94b      	cbnz	r3, 80080ea <__swsetup_r+0x9a>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e0:	d003      	beq.n	80080ea <__swsetup_r+0x9a>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 f931 	bl	800834c <__smakebuf_r>
 80080ea:	89a0      	ldrh	r0, [r4, #12]
 80080ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f0:	f010 0301 	ands.w	r3, r0, #1
 80080f4:	d00a      	beq.n	800810c <__swsetup_r+0xbc>
 80080f6:	2300      	movs	r3, #0
 80080f8:	60a3      	str	r3, [r4, #8]
 80080fa:	6963      	ldr	r3, [r4, #20]
 80080fc:	425b      	negs	r3, r3
 80080fe:	61a3      	str	r3, [r4, #24]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	b943      	cbnz	r3, 8008116 <__swsetup_r+0xc6>
 8008104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008108:	d1ba      	bne.n	8008080 <__swsetup_r+0x30>
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	0781      	lsls	r1, r0, #30
 800810e:	bf58      	it	pl
 8008110:	6963      	ldrpl	r3, [r4, #20]
 8008112:	60a3      	str	r3, [r4, #8]
 8008114:	e7f4      	b.n	8008100 <__swsetup_r+0xb0>
 8008116:	2000      	movs	r0, #0
 8008118:	e7f7      	b.n	800810a <__swsetup_r+0xba>
 800811a:	bf00      	nop
 800811c:	20000030 	.word	0x20000030
 8008120:	080098ec 	.word	0x080098ec
 8008124:	0800990c 	.word	0x0800990c
 8008128:	080098cc 	.word	0x080098cc

0800812c <abort>:
 800812c:	b508      	push	{r3, lr}
 800812e:	2006      	movs	r0, #6
 8008130:	f000 f9d2 	bl	80084d8 <raise>
 8008134:	2001      	movs	r0, #1
 8008136:	f7f9 fb49 	bl	80017cc <_exit>
	...

0800813c <_close_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_close_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7f9 fb67 	bl	800181a <_close>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_close_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_close_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	2000223c 	.word	0x2000223c

0800815c <__sflush_r>:
 800815c:	898a      	ldrh	r2, [r1, #12]
 800815e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	4605      	mov	r5, r0
 8008164:	0710      	lsls	r0, r2, #28
 8008166:	460c      	mov	r4, r1
 8008168:	d458      	bmi.n	800821c <__sflush_r+0xc0>
 800816a:	684b      	ldr	r3, [r1, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dc05      	bgt.n	800817c <__sflush_r+0x20>
 8008170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc02      	bgt.n	800817c <__sflush_r+0x20>
 8008176:	2000      	movs	r0, #0
 8008178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800817e:	2e00      	cmp	r6, #0
 8008180:	d0f9      	beq.n	8008176 <__sflush_r+0x1a>
 8008182:	2300      	movs	r3, #0
 8008184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008188:	682f      	ldr	r7, [r5, #0]
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	d032      	beq.n	80081f4 <__sflush_r+0x98>
 800818e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	075a      	lsls	r2, r3, #29
 8008194:	d505      	bpl.n	80081a2 <__sflush_r+0x46>
 8008196:	6863      	ldr	r3, [r4, #4]
 8008198:	1ac0      	subs	r0, r0, r3
 800819a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800819c:	b10b      	cbz	r3, 80081a2 <__sflush_r+0x46>
 800819e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081a0:	1ac0      	subs	r0, r0, r3
 80081a2:	2300      	movs	r3, #0
 80081a4:	4602      	mov	r2, r0
 80081a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a8:	6a21      	ldr	r1, [r4, #32]
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b0      	blx	r6
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	d106      	bne.n	80081c2 <__sflush_r+0x66>
 80081b4:	6829      	ldr	r1, [r5, #0]
 80081b6:	291d      	cmp	r1, #29
 80081b8:	d82c      	bhi.n	8008214 <__sflush_r+0xb8>
 80081ba:	4a2a      	ldr	r2, [pc, #168]	; (8008264 <__sflush_r+0x108>)
 80081bc:	40ca      	lsrs	r2, r1
 80081be:	07d6      	lsls	r6, r2, #31
 80081c0:	d528      	bpl.n	8008214 <__sflush_r+0xb8>
 80081c2:	2200      	movs	r2, #0
 80081c4:	6062      	str	r2, [r4, #4]
 80081c6:	04d9      	lsls	r1, r3, #19
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	d504      	bpl.n	80081d8 <__sflush_r+0x7c>
 80081ce:	1c42      	adds	r2, r0, #1
 80081d0:	d101      	bne.n	80081d6 <__sflush_r+0x7a>
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	b903      	cbnz	r3, 80081d8 <__sflush_r+0x7c>
 80081d6:	6560      	str	r0, [r4, #84]	; 0x54
 80081d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	2900      	cmp	r1, #0
 80081de:	d0ca      	beq.n	8008176 <__sflush_r+0x1a>
 80081e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d002      	beq.n	80081ee <__sflush_r+0x92>
 80081e8:	4628      	mov	r0, r5
 80081ea:	f7ff faf1 	bl	80077d0 <_free_r>
 80081ee:	2000      	movs	r0, #0
 80081f0:	6360      	str	r0, [r4, #52]	; 0x34
 80081f2:	e7c1      	b.n	8008178 <__sflush_r+0x1c>
 80081f4:	6a21      	ldr	r1, [r4, #32]
 80081f6:	2301      	movs	r3, #1
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b0      	blx	r6
 80081fc:	1c41      	adds	r1, r0, #1
 80081fe:	d1c7      	bne.n	8008190 <__sflush_r+0x34>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0c4      	beq.n	8008190 <__sflush_r+0x34>
 8008206:	2b1d      	cmp	r3, #29
 8008208:	d001      	beq.n	800820e <__sflush_r+0xb2>
 800820a:	2b16      	cmp	r3, #22
 800820c:	d101      	bne.n	8008212 <__sflush_r+0xb6>
 800820e:	602f      	str	r7, [r5, #0]
 8008210:	e7b1      	b.n	8008176 <__sflush_r+0x1a>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	e7ad      	b.n	8008178 <__sflush_r+0x1c>
 800821c:	690f      	ldr	r7, [r1, #16]
 800821e:	2f00      	cmp	r7, #0
 8008220:	d0a9      	beq.n	8008176 <__sflush_r+0x1a>
 8008222:	0793      	lsls	r3, r2, #30
 8008224:	680e      	ldr	r6, [r1, #0]
 8008226:	bf08      	it	eq
 8008228:	694b      	ldreq	r3, [r1, #20]
 800822a:	600f      	str	r7, [r1, #0]
 800822c:	bf18      	it	ne
 800822e:	2300      	movne	r3, #0
 8008230:	eba6 0807 	sub.w	r8, r6, r7
 8008234:	608b      	str	r3, [r1, #8]
 8008236:	f1b8 0f00 	cmp.w	r8, #0
 800823a:	dd9c      	ble.n	8008176 <__sflush_r+0x1a>
 800823c:	6a21      	ldr	r1, [r4, #32]
 800823e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008240:	4643      	mov	r3, r8
 8008242:	463a      	mov	r2, r7
 8008244:	4628      	mov	r0, r5
 8008246:	47b0      	blx	r6
 8008248:	2800      	cmp	r0, #0
 800824a:	dc06      	bgt.n	800825a <__sflush_r+0xfe>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e78e      	b.n	8008178 <__sflush_r+0x1c>
 800825a:	4407      	add	r7, r0
 800825c:	eba8 0800 	sub.w	r8, r8, r0
 8008260:	e7e9      	b.n	8008236 <__sflush_r+0xda>
 8008262:	bf00      	nop
 8008264:	20400001 	.word	0x20400001

08008268 <_fflush_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	690b      	ldr	r3, [r1, #16]
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b913      	cbnz	r3, 8008278 <_fflush_r+0x10>
 8008272:	2500      	movs	r5, #0
 8008274:	4628      	mov	r0, r5
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	b118      	cbz	r0, 8008282 <_fflush_r+0x1a>
 800827a:	6983      	ldr	r3, [r0, #24]
 800827c:	b90b      	cbnz	r3, 8008282 <_fflush_r+0x1a>
 800827e:	f7fe f98f 	bl	80065a0 <__sinit>
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <_fflush_r+0x6c>)
 8008284:	429c      	cmp	r4, r3
 8008286:	d11b      	bne.n	80082c0 <_fflush_r+0x58>
 8008288:	686c      	ldr	r4, [r5, #4]
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0ef      	beq.n	8008272 <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x3a>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x3a>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f7fe fda2 	bl	8006de6 <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff59 	bl	800815c <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e0      	bmi.n	8008274 <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4dd      	bmi.n	8008274 <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7fe fd95 	bl	8006de8 <__retarget_lock_release_recursive>
 80082be:	e7d9      	b.n	8008274 <_fflush_r+0xc>
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <_fflush_r+0x70>)
 80082c2:	429c      	cmp	r4, r3
 80082c4:	d101      	bne.n	80082ca <_fflush_r+0x62>
 80082c6:	68ac      	ldr	r4, [r5, #8]
 80082c8:	e7df      	b.n	800828a <_fflush_r+0x22>
 80082ca:	4b04      	ldr	r3, [pc, #16]	; (80082dc <_fflush_r+0x74>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	bf08      	it	eq
 80082d0:	68ec      	ldreq	r4, [r5, #12]
 80082d2:	e7da      	b.n	800828a <_fflush_r+0x22>
 80082d4:	080098ec 	.word	0x080098ec
 80082d8:	0800990c 	.word	0x0800990c
 80082dc:	080098cc 	.word	0x080098cc

080082e0 <_lseek_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_lseek_r+0x20>)
 80082e4:	4604      	mov	r4, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7f9 faba 	bl	8001868 <_lseek>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_lseek_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_lseek_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	2000223c 	.word	0x2000223c

08008304 <__swhatbuf_r>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	460e      	mov	r6, r1
 8008308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830c:	2900      	cmp	r1, #0
 800830e:	b096      	sub	sp, #88	; 0x58
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
 8008314:	da07      	bge.n	8008326 <__swhatbuf_r+0x22>
 8008316:	2300      	movs	r3, #0
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	89b3      	ldrh	r3, [r6, #12]
 800831c:	061a      	lsls	r2, r3, #24
 800831e:	d410      	bmi.n	8008342 <__swhatbuf_r+0x3e>
 8008320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008324:	e00e      	b.n	8008344 <__swhatbuf_r+0x40>
 8008326:	466a      	mov	r2, sp
 8008328:	f000 f8f2 	bl	8008510 <_fstat_r>
 800832c:	2800      	cmp	r0, #0
 800832e:	dbf2      	blt.n	8008316 <__swhatbuf_r+0x12>
 8008330:	9a01      	ldr	r2, [sp, #4]
 8008332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800833a:	425a      	negs	r2, r3
 800833c:	415a      	adcs	r2, r3
 800833e:	602a      	str	r2, [r5, #0]
 8008340:	e7ee      	b.n	8008320 <__swhatbuf_r+0x1c>
 8008342:	2340      	movs	r3, #64	; 0x40
 8008344:	2000      	movs	r0, #0
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	b016      	add	sp, #88	; 0x58
 800834a:	bd70      	pop	{r4, r5, r6, pc}

0800834c <__smakebuf_r>:
 800834c:	898b      	ldrh	r3, [r1, #12]
 800834e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008350:	079d      	lsls	r5, r3, #30
 8008352:	4606      	mov	r6, r0
 8008354:	460c      	mov	r4, r1
 8008356:	d507      	bpl.n	8008368 <__smakebuf_r+0x1c>
 8008358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	2301      	movs	r3, #1
 8008362:	6163      	str	r3, [r4, #20]
 8008364:	b002      	add	sp, #8
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	ab01      	add	r3, sp, #4
 800836a:	466a      	mov	r2, sp
 800836c:	f7ff ffca 	bl	8008304 <__swhatbuf_r>
 8008370:	9900      	ldr	r1, [sp, #0]
 8008372:	4605      	mov	r5, r0
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff fa7b 	bl	8007870 <_malloc_r>
 800837a:	b948      	cbnz	r0, 8008390 <__smakebuf_r+0x44>
 800837c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008380:	059a      	lsls	r2, r3, #22
 8008382:	d4ef      	bmi.n	8008364 <__smakebuf_r+0x18>
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	f043 0302 	orr.w	r3, r3, #2
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	e7e3      	b.n	8008358 <__smakebuf_r+0xc>
 8008390:	4b0d      	ldr	r3, [pc, #52]	; (80083c8 <__smakebuf_r+0x7c>)
 8008392:	62b3      	str	r3, [r6, #40]	; 0x28
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	6020      	str	r0, [r4, #0]
 8008398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	6163      	str	r3, [r4, #20]
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	6120      	str	r0, [r4, #16]
 80083a6:	b15b      	cbz	r3, 80083c0 <__smakebuf_r+0x74>
 80083a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ac:	4630      	mov	r0, r6
 80083ae:	f000 f8c1 	bl	8008534 <_isatty_r>
 80083b2:	b128      	cbz	r0, 80083c0 <__smakebuf_r+0x74>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	89a0      	ldrh	r0, [r4, #12]
 80083c2:	4305      	orrs	r5, r0
 80083c4:	81a5      	strh	r5, [r4, #12]
 80083c6:	e7cd      	b.n	8008364 <__smakebuf_r+0x18>
 80083c8:	08006539 	.word	0x08006539

080083cc <memmove>:
 80083cc:	4288      	cmp	r0, r1
 80083ce:	b510      	push	{r4, lr}
 80083d0:	eb01 0402 	add.w	r4, r1, r2
 80083d4:	d902      	bls.n	80083dc <memmove+0x10>
 80083d6:	4284      	cmp	r4, r0
 80083d8:	4623      	mov	r3, r4
 80083da:	d807      	bhi.n	80083ec <memmove+0x20>
 80083dc:	1e43      	subs	r3, r0, #1
 80083de:	42a1      	cmp	r1, r4
 80083e0:	d008      	beq.n	80083f4 <memmove+0x28>
 80083e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ea:	e7f8      	b.n	80083de <memmove+0x12>
 80083ec:	4402      	add	r2, r0
 80083ee:	4601      	mov	r1, r0
 80083f0:	428a      	cmp	r2, r1
 80083f2:	d100      	bne.n	80083f6 <memmove+0x2a>
 80083f4:	bd10      	pop	{r4, pc}
 80083f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083fe:	e7f7      	b.n	80083f0 <memmove+0x24>

08008400 <__malloc_lock>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__malloc_lock+0x8>)
 8008402:	f7fe bcf0 	b.w	8006de6 <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	20002234 	.word	0x20002234

0800840c <__malloc_unlock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_unlock+0x8>)
 800840e:	f7fe bceb 	b.w	8006de8 <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	20002234 	.word	0x20002234

08008418 <_realloc_r>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	4607      	mov	r7, r0
 800841c:	4614      	mov	r4, r2
 800841e:	460e      	mov	r6, r1
 8008420:	b921      	cbnz	r1, 800842c <_realloc_r+0x14>
 8008422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008426:	4611      	mov	r1, r2
 8008428:	f7ff ba22 	b.w	8007870 <_malloc_r>
 800842c:	b922      	cbnz	r2, 8008438 <_realloc_r+0x20>
 800842e:	f7ff f9cf 	bl	80077d0 <_free_r>
 8008432:	4625      	mov	r5, r4
 8008434:	4628      	mov	r0, r5
 8008436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008438:	f000 f88c 	bl	8008554 <_malloc_usable_size_r>
 800843c:	42a0      	cmp	r0, r4
 800843e:	d20f      	bcs.n	8008460 <_realloc_r+0x48>
 8008440:	4621      	mov	r1, r4
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff fa14 	bl	8007870 <_malloc_r>
 8008448:	4605      	mov	r5, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d0f2      	beq.n	8008434 <_realloc_r+0x1c>
 800844e:	4631      	mov	r1, r6
 8008450:	4622      	mov	r2, r4
 8008452:	f7fe fce5 	bl	8006e20 <memcpy>
 8008456:	4631      	mov	r1, r6
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff f9b9 	bl	80077d0 <_free_r>
 800845e:	e7e9      	b.n	8008434 <_realloc_r+0x1c>
 8008460:	4635      	mov	r5, r6
 8008462:	e7e7      	b.n	8008434 <_realloc_r+0x1c>

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_read_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 f9b4 	bl	80017e0 <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	2000223c 	.word	0x2000223c

08008488 <_raise_r>:
 8008488:	291f      	cmp	r1, #31
 800848a:	b538      	push	{r3, r4, r5, lr}
 800848c:	4604      	mov	r4, r0
 800848e:	460d      	mov	r5, r1
 8008490:	d904      	bls.n	800849c <_raise_r+0x14>
 8008492:	2316      	movs	r3, #22
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	f04f 30ff 	mov.w	r0, #4294967295
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800849e:	b112      	cbz	r2, 80084a6 <_raise_r+0x1e>
 80084a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084a4:	b94b      	cbnz	r3, 80084ba <_raise_r+0x32>
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 f830 	bl	800850c <_getpid_r>
 80084ac:	462a      	mov	r2, r5
 80084ae:	4601      	mov	r1, r0
 80084b0:	4620      	mov	r0, r4
 80084b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b6:	f000 b817 	b.w	80084e8 <_kill_r>
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d00a      	beq.n	80084d4 <_raise_r+0x4c>
 80084be:	1c59      	adds	r1, r3, #1
 80084c0:	d103      	bne.n	80084ca <_raise_r+0x42>
 80084c2:	2316      	movs	r3, #22
 80084c4:	6003      	str	r3, [r0, #0]
 80084c6:	2001      	movs	r0, #1
 80084c8:	e7e7      	b.n	800849a <_raise_r+0x12>
 80084ca:	2400      	movs	r4, #0
 80084cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084d0:	4628      	mov	r0, r5
 80084d2:	4798      	blx	r3
 80084d4:	2000      	movs	r0, #0
 80084d6:	e7e0      	b.n	800849a <_raise_r+0x12>

080084d8 <raise>:
 80084d8:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <raise+0xc>)
 80084da:	4601      	mov	r1, r0
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f7ff bfd3 	b.w	8008488 <_raise_r>
 80084e2:	bf00      	nop
 80084e4:	20000030 	.word	0x20000030

080084e8 <_kill_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d07      	ldr	r5, [pc, #28]	; (8008508 <_kill_r+0x20>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	602b      	str	r3, [r5, #0]
 80084f6:	f7f9 f959 	bl	80017ac <_kill>
 80084fa:	1c43      	adds	r3, r0, #1
 80084fc:	d102      	bne.n	8008504 <_kill_r+0x1c>
 80084fe:	682b      	ldr	r3, [r5, #0]
 8008500:	b103      	cbz	r3, 8008504 <_kill_r+0x1c>
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	bd38      	pop	{r3, r4, r5, pc}
 8008506:	bf00      	nop
 8008508:	2000223c 	.word	0x2000223c

0800850c <_getpid_r>:
 800850c:	f7f9 b946 	b.w	800179c <_getpid>

08008510 <_fstat_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d07      	ldr	r5, [pc, #28]	; (8008530 <_fstat_r+0x20>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	f7f9 f988 	bl	8001832 <_fstat>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_fstat_r+0x1c>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b103      	cbz	r3, 800852c <_fstat_r+0x1c>
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	2000223c 	.word	0x2000223c

08008534 <_isatty_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d06      	ldr	r5, [pc, #24]	; (8008550 <_isatty_r+0x1c>)
 8008538:	2300      	movs	r3, #0
 800853a:	4604      	mov	r4, r0
 800853c:	4608      	mov	r0, r1
 800853e:	602b      	str	r3, [r5, #0]
 8008540:	f7f9 f987 	bl	8001852 <_isatty>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_isatty_r+0x1a>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	b103      	cbz	r3, 800854e <_isatty_r+0x1a>
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	2000223c 	.word	0x2000223c

08008554 <_malloc_usable_size_r>:
 8008554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008558:	1f18      	subs	r0, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfbc      	itt	lt
 800855e:	580b      	ldrlt	r3, [r1, r0]
 8008560:	18c0      	addlt	r0, r0, r3
 8008562:	4770      	bx	lr
 8008564:	0000      	movs	r0, r0
	...

08008568 <sin>:
 8008568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800856a:	ec53 2b10 	vmov	r2, r3, d0
 800856e:	4826      	ldr	r0, [pc, #152]	; (8008608 <sin+0xa0>)
 8008570:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008574:	4281      	cmp	r1, r0
 8008576:	dc07      	bgt.n	8008588 <sin+0x20>
 8008578:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008600 <sin+0x98>
 800857c:	2000      	movs	r0, #0
 800857e:	f000 fe5b 	bl	8009238 <__kernel_sin>
 8008582:	ec51 0b10 	vmov	r0, r1, d0
 8008586:	e007      	b.n	8008598 <sin+0x30>
 8008588:	4820      	ldr	r0, [pc, #128]	; (800860c <sin+0xa4>)
 800858a:	4281      	cmp	r1, r0
 800858c:	dd09      	ble.n	80085a2 <sin+0x3a>
 800858e:	ee10 0a10 	vmov	r0, s0
 8008592:	4619      	mov	r1, r3
 8008594:	f7f7 fe78 	bl	8000288 <__aeabi_dsub>
 8008598:	ec41 0b10 	vmov	d0, r0, r1
 800859c:	b005      	add	sp, #20
 800859e:	f85d fb04 	ldr.w	pc, [sp], #4
 80085a2:	4668      	mov	r0, sp
 80085a4:	f000 f834 	bl	8008610 <__ieee754_rem_pio2>
 80085a8:	f000 0003 	and.w	r0, r0, #3
 80085ac:	2801      	cmp	r0, #1
 80085ae:	d008      	beq.n	80085c2 <sin+0x5a>
 80085b0:	2802      	cmp	r0, #2
 80085b2:	d00d      	beq.n	80085d0 <sin+0x68>
 80085b4:	b9d0      	cbnz	r0, 80085ec <sin+0x84>
 80085b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085ba:	ed9d 0b00 	vldr	d0, [sp]
 80085be:	2001      	movs	r0, #1
 80085c0:	e7dd      	b.n	800857e <sin+0x16>
 80085c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085c6:	ed9d 0b00 	vldr	d0, [sp]
 80085ca:	f000 fa2d 	bl	8008a28 <__kernel_cos>
 80085ce:	e7d8      	b.n	8008582 <sin+0x1a>
 80085d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085d4:	ed9d 0b00 	vldr	d0, [sp]
 80085d8:	2001      	movs	r0, #1
 80085da:	f000 fe2d 	bl	8009238 <__kernel_sin>
 80085de:	ec53 2b10 	vmov	r2, r3, d0
 80085e2:	ee10 0a10 	vmov	r0, s0
 80085e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085ea:	e7d5      	b.n	8008598 <sin+0x30>
 80085ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085f0:	ed9d 0b00 	vldr	d0, [sp]
 80085f4:	f000 fa18 	bl	8008a28 <__kernel_cos>
 80085f8:	e7f1      	b.n	80085de <sin+0x76>
 80085fa:	bf00      	nop
 80085fc:	f3af 8000 	nop.w
	...
 8008608:	3fe921fb 	.word	0x3fe921fb
 800860c:	7fefffff 	.word	0x7fefffff

08008610 <__ieee754_rem_pio2>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	ed2d 8b02 	vpush	{d8}
 8008618:	ec55 4b10 	vmov	r4, r5, d0
 800861c:	4bca      	ldr	r3, [pc, #808]	; (8008948 <__ieee754_rem_pio2+0x338>)
 800861e:	b08b      	sub	sp, #44	; 0x2c
 8008620:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008624:	4598      	cmp	r8, r3
 8008626:	4682      	mov	sl, r0
 8008628:	9502      	str	r5, [sp, #8]
 800862a:	dc08      	bgt.n	800863e <__ieee754_rem_pio2+0x2e>
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	ed80 0b00 	vstr	d0, [r0]
 8008634:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008638:	f04f 0b00 	mov.w	fp, #0
 800863c:	e028      	b.n	8008690 <__ieee754_rem_pio2+0x80>
 800863e:	4bc3      	ldr	r3, [pc, #780]	; (800894c <__ieee754_rem_pio2+0x33c>)
 8008640:	4598      	cmp	r8, r3
 8008642:	dc78      	bgt.n	8008736 <__ieee754_rem_pio2+0x126>
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	4ec2      	ldr	r6, [pc, #776]	; (8008950 <__ieee754_rem_pio2+0x340>)
 8008648:	2b00      	cmp	r3, #0
 800864a:	ee10 0a10 	vmov	r0, s0
 800864e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008910 <__ieee754_rem_pio2+0x300>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4629      	mov	r1, r5
 8008656:	dd39      	ble.n	80086cc <__ieee754_rem_pio2+0xbc>
 8008658:	f7f7 fe16 	bl	8000288 <__aeabi_dsub>
 800865c:	45b0      	cmp	r8, r6
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	d01b      	beq.n	800869c <__ieee754_rem_pio2+0x8c>
 8008664:	a3ac      	add	r3, pc, #688	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f7 fe0d 	bl	8000288 <__aeabi_dsub>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	e9ca 2300 	strd	r2, r3, [sl]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f7 fe05 	bl	8000288 <__aeabi_dsub>
 800867e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f7 fe00 	bl	8000288 <__aeabi_dsub>
 8008688:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800868c:	f04f 0b01 	mov.w	fp, #1
 8008690:	4658      	mov	r0, fp
 8008692:	b00b      	add	sp, #44	; 0x2c
 8008694:	ecbd 8b02 	vpop	{d8}
 8008698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008920 <__ieee754_rem_pio2+0x310>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f7f7 fdf1 	bl	8000288 <__aeabi_dsub>
 80086a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4604      	mov	r4, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	f7f7 fdea 	bl	8000288 <__aeabi_dsub>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	e9ca 2300 	strd	r2, r3, [sl]
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f7 fde2 	bl	8000288 <__aeabi_dsub>
 80086c4:	a398      	add	r3, pc, #608	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	e7db      	b.n	8008684 <__ieee754_rem_pio2+0x74>
 80086cc:	f7f7 fdde 	bl	800028c <__adddf3>
 80086d0:	45b0      	cmp	r8, r6
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	d016      	beq.n	8008706 <__ieee754_rem_pio2+0xf6>
 80086d8:	a38f      	add	r3, pc, #572	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f7 fdd5 	bl	800028c <__adddf3>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e9ca 2300 	strd	r2, r3, [sl]
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f7 fdcb 	bl	8000288 <__aeabi_dsub>
 80086f2:	a389      	add	r3, pc, #548	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 fdc8 	bl	800028c <__adddf3>
 80086fc:	f04f 3bff 	mov.w	fp, #4294967295
 8008700:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008704:	e7c4      	b.n	8008690 <__ieee754_rem_pio2+0x80>
 8008706:	a386      	add	r3, pc, #536	; (adr r3, 8008920 <__ieee754_rem_pio2+0x310>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fdbe 	bl	800028c <__adddf3>
 8008710:	a385      	add	r3, pc, #532	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	4604      	mov	r4, r0
 8008718:	460d      	mov	r5, r1
 800871a:	f7f7 fdb7 	bl	800028c <__adddf3>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9ca 2300 	strd	r2, r3, [sl]
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fdad 	bl	8000288 <__aeabi_dsub>
 800872e:	a37e      	add	r3, pc, #504	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	e7e0      	b.n	80086f8 <__ieee754_rem_pio2+0xe8>
 8008736:	4b87      	ldr	r3, [pc, #540]	; (8008954 <__ieee754_rem_pio2+0x344>)
 8008738:	4598      	cmp	r8, r3
 800873a:	f300 80d9 	bgt.w	80088f0 <__ieee754_rem_pio2+0x2e0>
 800873e:	f000 fe39 	bl	80093b4 <fabs>
 8008742:	ec55 4b10 	vmov	r4, r5, d0
 8008746:	ee10 0a10 	vmov	r0, s0
 800874a:	a379      	add	r3, pc, #484	; (adr r3, 8008930 <__ieee754_rem_pio2+0x320>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	4629      	mov	r1, r5
 8008752:	f7f7 ff51 	bl	80005f8 <__aeabi_dmul>
 8008756:	4b80      	ldr	r3, [pc, #512]	; (8008958 <__ieee754_rem_pio2+0x348>)
 8008758:	2200      	movs	r2, #0
 800875a:	f7f7 fd97 	bl	800028c <__adddf3>
 800875e:	f7f8 f9fb 	bl	8000b58 <__aeabi_d2iz>
 8008762:	4683      	mov	fp, r0
 8008764:	f7f7 fede 	bl	8000524 <__aeabi_i2d>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	ec43 2b18 	vmov	d8, r2, r3
 8008770:	a367      	add	r3, pc, #412	; (adr r3, 8008910 <__ieee754_rem_pio2+0x300>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 ff3f 	bl	80005f8 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4620      	mov	r0, r4
 8008780:	4629      	mov	r1, r5
 8008782:	f7f7 fd81 	bl	8000288 <__aeabi_dsub>
 8008786:	a364      	add	r3, pc, #400	; (adr r3, 8008918 <__ieee754_rem_pio2+0x308>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	ec51 0b18 	vmov	r0, r1, d8
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	f1bb 0f1f 	cmp.w	fp, #31
 800879c:	4604      	mov	r4, r0
 800879e:	460d      	mov	r5, r1
 80087a0:	dc0d      	bgt.n	80087be <__ieee754_rem_pio2+0x1ae>
 80087a2:	4b6e      	ldr	r3, [pc, #440]	; (800895c <__ieee754_rem_pio2+0x34c>)
 80087a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	4543      	cmp	r3, r8
 80087ae:	d006      	beq.n	80087be <__ieee754_rem_pio2+0x1ae>
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd66 	bl	8000288 <__aeabi_dsub>
 80087bc:	e00f      	b.n	80087de <__ieee754_rem_pio2+0x1ce>
 80087be:	462b      	mov	r3, r5
 80087c0:	4622      	mov	r2, r4
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f7 fd5f 	bl	8000288 <__aeabi_dsub>
 80087ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80087d8:	f1b8 0f10 	cmp.w	r8, #16
 80087dc:	dc02      	bgt.n	80087e4 <__ieee754_rem_pio2+0x1d4>
 80087de:	e9ca 0100 	strd	r0, r1, [sl]
 80087e2:	e039      	b.n	8008858 <__ieee754_rem_pio2+0x248>
 80087e4:	a34e      	add	r3, pc, #312	; (adr r3, 8008920 <__ieee754_rem_pio2+0x310>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	ec51 0b18 	vmov	r0, r1, d8
 80087ee:	f7f7 ff03 	bl	80005f8 <__aeabi_dmul>
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	f7f7 fd43 	bl	8000288 <__aeabi_dsub>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4680      	mov	r8, r0
 8008808:	4689      	mov	r9, r1
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f7 fd3b 	bl	8000288 <__aeabi_dsub>
 8008812:	4622      	mov	r2, r4
 8008814:	462b      	mov	r3, r5
 8008816:	f7f7 fd37 	bl	8000288 <__aeabi_dsub>
 800881a:	a343      	add	r3, pc, #268	; (adr r3, 8008928 <__ieee754_rem_pio2+0x318>)
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	4604      	mov	r4, r0
 8008822:	460d      	mov	r5, r1
 8008824:	ec51 0b18 	vmov	r0, r1, d8
 8008828:	f7f7 fee6 	bl	80005f8 <__aeabi_dmul>
 800882c:	4622      	mov	r2, r4
 800882e:	462b      	mov	r3, r5
 8008830:	f7f7 fd2a 	bl	8000288 <__aeabi_dsub>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	4640      	mov	r0, r8
 800883e:	4649      	mov	r1, r9
 8008840:	f7f7 fd22 	bl	8000288 <__aeabi_dsub>
 8008844:	9a03      	ldr	r2, [sp, #12]
 8008846:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b31      	cmp	r3, #49	; 0x31
 800884e:	dc24      	bgt.n	800889a <__ieee754_rem_pio2+0x28a>
 8008850:	e9ca 0100 	strd	r0, r1, [sl]
 8008854:	4646      	mov	r6, r8
 8008856:	464f      	mov	r7, r9
 8008858:	e9da 8900 	ldrd	r8, r9, [sl]
 800885c:	4630      	mov	r0, r6
 800885e:	4642      	mov	r2, r8
 8008860:	464b      	mov	r3, r9
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd10 	bl	8000288 <__aeabi_dsub>
 8008868:	462b      	mov	r3, r5
 800886a:	4622      	mov	r2, r4
 800886c:	f7f7 fd0c 	bl	8000288 <__aeabi_dsub>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008878:	f6bf af0a 	bge.w	8008690 <__ieee754_rem_pio2+0x80>
 800887c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008880:	f8ca 3004 	str.w	r3, [sl, #4]
 8008884:	f8ca 8000 	str.w	r8, [sl]
 8008888:	f8ca 0008 	str.w	r0, [sl, #8]
 800888c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008890:	f8ca 300c 	str.w	r3, [sl, #12]
 8008894:	f1cb 0b00 	rsb	fp, fp, #0
 8008898:	e6fa      	b.n	8008690 <__ieee754_rem_pio2+0x80>
 800889a:	a327      	add	r3, pc, #156	; (adr r3, 8008938 <__ieee754_rem_pio2+0x328>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	ec51 0b18 	vmov	r0, r1, d8
 80088a4:	f7f7 fea8 	bl	80005f8 <__aeabi_dmul>
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f7 fce8 	bl	8000288 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f7 fce0 	bl	8000288 <__aeabi_dsub>
 80088c8:	4622      	mov	r2, r4
 80088ca:	462b      	mov	r3, r5
 80088cc:	f7f7 fcdc 	bl	8000288 <__aeabi_dsub>
 80088d0:	a31b      	add	r3, pc, #108	; (adr r3, 8008940 <__ieee754_rem_pio2+0x330>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	ec51 0b18 	vmov	r0, r1, d8
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	4622      	mov	r2, r4
 80088e4:	462b      	mov	r3, r5
 80088e6:	f7f7 fccf 	bl	8000288 <__aeabi_dsub>
 80088ea:	4604      	mov	r4, r0
 80088ec:	460d      	mov	r5, r1
 80088ee:	e75f      	b.n	80087b0 <__ieee754_rem_pio2+0x1a0>
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <__ieee754_rem_pio2+0x350>)
 80088f2:	4598      	cmp	r8, r3
 80088f4:	dd36      	ble.n	8008964 <__ieee754_rem_pio2+0x354>
 80088f6:	ee10 2a10 	vmov	r2, s0
 80088fa:	462b      	mov	r3, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f7 fcc2 	bl	8000288 <__aeabi_dsub>
 8008904:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008908:	e9ca 0100 	strd	r0, r1, [sl]
 800890c:	e694      	b.n	8008638 <__ieee754_rem_pio2+0x28>
 800890e:	bf00      	nop
 8008910:	54400000 	.word	0x54400000
 8008914:	3ff921fb 	.word	0x3ff921fb
 8008918:	1a626331 	.word	0x1a626331
 800891c:	3dd0b461 	.word	0x3dd0b461
 8008920:	1a600000 	.word	0x1a600000
 8008924:	3dd0b461 	.word	0x3dd0b461
 8008928:	2e037073 	.word	0x2e037073
 800892c:	3ba3198a 	.word	0x3ba3198a
 8008930:	6dc9c883 	.word	0x6dc9c883
 8008934:	3fe45f30 	.word	0x3fe45f30
 8008938:	2e000000 	.word	0x2e000000
 800893c:	3ba3198a 	.word	0x3ba3198a
 8008940:	252049c1 	.word	0x252049c1
 8008944:	397b839a 	.word	0x397b839a
 8008948:	3fe921fb 	.word	0x3fe921fb
 800894c:	4002d97b 	.word	0x4002d97b
 8008950:	3ff921fb 	.word	0x3ff921fb
 8008954:	413921fb 	.word	0x413921fb
 8008958:	3fe00000 	.word	0x3fe00000
 800895c:	08009b20 	.word	0x08009b20
 8008960:	7fefffff 	.word	0x7fefffff
 8008964:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008968:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800896c:	ee10 0a10 	vmov	r0, s0
 8008970:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008974:	ee10 6a10 	vmov	r6, s0
 8008978:	460f      	mov	r7, r1
 800897a:	f7f8 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800897e:	f7f7 fdd1 	bl	8000524 <__aeabi_i2d>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800898e:	f7f7 fc7b 	bl	8000288 <__aeabi_dsub>
 8008992:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <__ieee754_rem_pio2+0x40c>)
 8008994:	2200      	movs	r2, #0
 8008996:	f7f7 fe2f 	bl	80005f8 <__aeabi_dmul>
 800899a:	460f      	mov	r7, r1
 800899c:	4606      	mov	r6, r0
 800899e:	f7f8 f8db 	bl	8000b58 <__aeabi_d2iz>
 80089a2:	f7f7 fdbf 	bl	8000524 <__aeabi_i2d>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089b2:	f7f7 fc69 	bl	8000288 <__aeabi_dsub>
 80089b6:	4b19      	ldr	r3, [pc, #100]	; (8008a1c <__ieee754_rem_pio2+0x40c>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	f7f7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80089be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089c2:	ad04      	add	r5, sp, #16
 80089c4:	f04f 0803 	mov.w	r8, #3
 80089c8:	46a9      	mov	r9, r5
 80089ca:	2600      	movs	r6, #0
 80089cc:	2700      	movs	r7, #0
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80089d6:	46c3      	mov	fp, r8
 80089d8:	3d08      	subs	r5, #8
 80089da:	f108 38ff 	add.w	r8, r8, #4294967295
 80089de:	f7f8 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d1f3      	bne.n	80089ce <__ieee754_rem_pio2+0x3be>
 80089e6:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <__ieee754_rem_pio2+0x410>)
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	2302      	movs	r3, #2
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4622      	mov	r2, r4
 80089f0:	465b      	mov	r3, fp
 80089f2:	4651      	mov	r1, sl
 80089f4:	4648      	mov	r0, r9
 80089f6:	f000 f8df 	bl	8008bb8 <__kernel_rem_pio2>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4683      	mov	fp, r0
 8008a00:	f6bf ae46 	bge.w	8008690 <__ieee754_rem_pio2+0x80>
 8008a04:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a10:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008a14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a18:	e73a      	b.n	8008890 <__ieee754_rem_pio2+0x280>
 8008a1a:	bf00      	nop
 8008a1c:	41700000 	.word	0x41700000
 8008a20:	08009ba0 	.word	0x08009ba0
 8008a24:	00000000 	.word	0x00000000

08008a28 <__kernel_cos>:
 8008a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	ec57 6b10 	vmov	r6, r7, d0
 8008a30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008a34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008a38:	ed8d 1b00 	vstr	d1, [sp]
 8008a3c:	da07      	bge.n	8008a4e <__kernel_cos+0x26>
 8008a3e:	ee10 0a10 	vmov	r0, s0
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f8 f888 	bl	8000b58 <__aeabi_d2iz>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f000 8088 	beq.w	8008b5e <__kernel_cos+0x136>
 8008a4e:	4632      	mov	r2, r6
 8008a50:	463b      	mov	r3, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8008a5a:	4b51      	ldr	r3, [pc, #324]	; (8008ba0 <__kernel_cos+0x178>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	f7f7 fdc9 	bl	80005f8 <__aeabi_dmul>
 8008a66:	a340      	add	r3, pc, #256	; (adr r3, 8008b68 <__kernel_cos+0x140>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	468b      	mov	fp, r1
 8008a70:	4620      	mov	r0, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	a33d      	add	r3, pc, #244	; (adr r3, 8008b70 <__kernel_cos+0x148>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fc05 	bl	800028c <__adddf3>
 8008a82:	4622      	mov	r2, r4
 8008a84:	462b      	mov	r3, r5
 8008a86:	f7f7 fdb7 	bl	80005f8 <__aeabi_dmul>
 8008a8a:	a33b      	add	r3, pc, #236	; (adr r3, 8008b78 <__kernel_cos+0x150>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fbfa 	bl	8000288 <__aeabi_dsub>
 8008a94:	4622      	mov	r2, r4
 8008a96:	462b      	mov	r3, r5
 8008a98:	f7f7 fdae 	bl	80005f8 <__aeabi_dmul>
 8008a9c:	a338      	add	r3, pc, #224	; (adr r3, 8008b80 <__kernel_cos+0x158>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fbf3 	bl	800028c <__adddf3>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	f7f7 fda5 	bl	80005f8 <__aeabi_dmul>
 8008aae:	a336      	add	r3, pc, #216	; (adr r3, 8008b88 <__kernel_cos+0x160>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fbe8 	bl	8000288 <__aeabi_dsub>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	462b      	mov	r3, r5
 8008abc:	f7f7 fd9c 	bl	80005f8 <__aeabi_dmul>
 8008ac0:	a333      	add	r3, pc, #204	; (adr r3, 8008b90 <__kernel_cos+0x168>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fbe1 	bl	800028c <__adddf3>
 8008aca:	4622      	mov	r2, r4
 8008acc:	462b      	mov	r3, r5
 8008ace:	f7f7 fd93 	bl	80005f8 <__aeabi_dmul>
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	f7f7 fd8f 	bl	80005f8 <__aeabi_dmul>
 8008ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	460b      	mov	r3, r1
 8008aec:	4602      	mov	r2, r0
 8008aee:	4629      	mov	r1, r5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7f7 fbc9 	bl	8000288 <__aeabi_dsub>
 8008af6:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <__kernel_cos+0x17c>)
 8008af8:	4598      	cmp	r8, r3
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	dc10      	bgt.n	8008b22 <__kernel_cos+0xfa>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	f7f7 fbbe 	bl	8000288 <__aeabi_dsub>
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4926      	ldr	r1, [pc, #152]	; (8008ba8 <__kernel_cos+0x180>)
 8008b10:	4602      	mov	r2, r0
 8008b12:	2000      	movs	r0, #0
 8008b14:	f7f7 fbb8 	bl	8000288 <__aeabi_dsub>
 8008b18:	ec41 0b10 	vmov	d0, r0, r1
 8008b1c:	b003      	add	sp, #12
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	4b22      	ldr	r3, [pc, #136]	; (8008bac <__kernel_cos+0x184>)
 8008b24:	4920      	ldr	r1, [pc, #128]	; (8008ba8 <__kernel_cos+0x180>)
 8008b26:	4598      	cmp	r8, r3
 8008b28:	bfcc      	ite	gt
 8008b2a:	4d21      	ldrgt	r5, [pc, #132]	; (8008bb0 <__kernel_cos+0x188>)
 8008b2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008b30:	2400      	movs	r4, #0
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	2000      	movs	r0, #0
 8008b38:	f7f7 fba6 	bl	8000288 <__aeabi_dsub>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	462b      	mov	r3, r5
 8008b44:	4650      	mov	r0, sl
 8008b46:	4659      	mov	r1, fp
 8008b48:	f7f7 fb9e 	bl	8000288 <__aeabi_dsub>
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	463b      	mov	r3, r7
 8008b50:	f7f7 fb9a 	bl	8000288 <__aeabi_dsub>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	e7da      	b.n	8008b14 <__kernel_cos+0xec>
 8008b5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b98 <__kernel_cos+0x170>
 8008b62:	e7db      	b.n	8008b1c <__kernel_cos+0xf4>
 8008b64:	f3af 8000 	nop.w
 8008b68:	be8838d4 	.word	0xbe8838d4
 8008b6c:	bda8fae9 	.word	0xbda8fae9
 8008b70:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b74:	3e21ee9e 	.word	0x3e21ee9e
 8008b78:	809c52ad 	.word	0x809c52ad
 8008b7c:	3e927e4f 	.word	0x3e927e4f
 8008b80:	19cb1590 	.word	0x19cb1590
 8008b84:	3efa01a0 	.word	0x3efa01a0
 8008b88:	16c15177 	.word	0x16c15177
 8008b8c:	3f56c16c 	.word	0x3f56c16c
 8008b90:	5555554c 	.word	0x5555554c
 8008b94:	3fa55555 	.word	0x3fa55555
 8008b98:	00000000 	.word	0x00000000
 8008b9c:	3ff00000 	.word	0x3ff00000
 8008ba0:	3fe00000 	.word	0x3fe00000
 8008ba4:	3fd33332 	.word	0x3fd33332
 8008ba8:	3ff00000 	.word	0x3ff00000
 8008bac:	3fe90000 	.word	0x3fe90000
 8008bb0:	3fd20000 	.word	0x3fd20000
 8008bb4:	00000000 	.word	0x00000000

08008bb8 <__kernel_rem_pio2>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b02 	vpush	{d8}
 8008bc0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008bc4:	f112 0f14 	cmn.w	r2, #20
 8008bc8:	9308      	str	r3, [sp, #32]
 8008bca:	9101      	str	r1, [sp, #4]
 8008bcc:	4bc6      	ldr	r3, [pc, #792]	; (8008ee8 <__kernel_rem_pio2+0x330>)
 8008bce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008bd0:	9009      	str	r0, [sp, #36]	; 0x24
 8008bd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bde:	bfa8      	it	ge
 8008be0:	1ed4      	subge	r4, r2, #3
 8008be2:	9306      	str	r3, [sp, #24]
 8008be4:	bfb2      	itee	lt
 8008be6:	2400      	movlt	r4, #0
 8008be8:	2318      	movge	r3, #24
 8008bea:	fb94 f4f3 	sdivge	r4, r4, r3
 8008bee:	f06f 0317 	mvn.w	r3, #23
 8008bf2:	fb04 3303 	mla	r3, r4, r3, r3
 8008bf6:	eb03 0a02 	add.w	sl, r3, r2
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	9a06      	ldr	r2, [sp, #24]
 8008bfe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008ed8 <__kernel_rem_pio2+0x320>
 8008c02:	eb03 0802 	add.w	r8, r3, r2
 8008c06:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008c08:	1aa7      	subs	r7, r4, r2
 8008c0a:	ae20      	add	r6, sp, #128	; 0x80
 8008c0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008c10:	2500      	movs	r5, #0
 8008c12:	4545      	cmp	r5, r8
 8008c14:	dd18      	ble.n	8008c48 <__kernel_rem_pio2+0x90>
 8008c16:	9b08      	ldr	r3, [sp, #32]
 8008c18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008c1c:	aa20      	add	r2, sp, #128	; 0x80
 8008c1e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008ed8 <__kernel_rem_pio2+0x320>
 8008c22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008c26:	f1c3 0301 	rsb	r3, r3, #1
 8008c2a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008c2e:	9307      	str	r3, [sp, #28]
 8008c30:	9b07      	ldr	r3, [sp, #28]
 8008c32:	9a04      	ldr	r2, [sp, #16]
 8008c34:	4443      	add	r3, r8
 8008c36:	429a      	cmp	r2, r3
 8008c38:	db2f      	blt.n	8008c9a <__kernel_rem_pio2+0xe2>
 8008c3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c3e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c42:	462f      	mov	r7, r5
 8008c44:	2600      	movs	r6, #0
 8008c46:	e01b      	b.n	8008c80 <__kernel_rem_pio2+0xc8>
 8008c48:	42ef      	cmn	r7, r5
 8008c4a:	d407      	bmi.n	8008c5c <__kernel_rem_pio2+0xa4>
 8008c4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008c50:	f7f7 fc68 	bl	8000524 <__aeabi_i2d>
 8008c54:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008c58:	3501      	adds	r5, #1
 8008c5a:	e7da      	b.n	8008c12 <__kernel_rem_pio2+0x5a>
 8008c5c:	ec51 0b18 	vmov	r0, r1, d8
 8008c60:	e7f8      	b.n	8008c54 <__kernel_rem_pio2+0x9c>
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c76:	f7f7 fb09 	bl	800028c <__adddf3>
 8008c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c7e:	3601      	adds	r6, #1
 8008c80:	9b06      	ldr	r3, [sp, #24]
 8008c82:	429e      	cmp	r6, r3
 8008c84:	f1a7 0708 	sub.w	r7, r7, #8
 8008c88:	ddeb      	ble.n	8008c62 <__kernel_rem_pio2+0xaa>
 8008c8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c8e:	3508      	adds	r5, #8
 8008c90:	ecab 7b02 	vstmia	fp!, {d7}
 8008c94:	f108 0801 	add.w	r8, r8, #1
 8008c98:	e7ca      	b.n	8008c30 <__kernel_rem_pio2+0x78>
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	aa0c      	add	r2, sp, #48	; 0x30
 8008c9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ca4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008ca6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008caa:	9c04      	ldr	r4, [sp, #16]
 8008cac:	930a      	str	r3, [sp, #40]	; 0x28
 8008cae:	ab98      	add	r3, sp, #608	; 0x260
 8008cb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cb4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008cb8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008cbc:	f8cd b008 	str.w	fp, [sp, #8]
 8008cc0:	4625      	mov	r5, r4
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	dc78      	bgt.n	8008db8 <__kernel_rem_pio2+0x200>
 8008cc6:	ec47 6b10 	vmov	d0, r6, r7
 8008cca:	4650      	mov	r0, sl
 8008ccc:	f000 fbfc 	bl	80094c8 <scalbn>
 8008cd0:	ec57 6b10 	vmov	r6, r7, d0
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008cda:	ee10 0a10 	vmov	r0, s0
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	ec41 0b10 	vmov	d0, r0, r1
 8008ce8:	f000 fb6e 	bl	80093c8 <floor>
 8008cec:	4b7f      	ldr	r3, [pc, #508]	; (8008eec <__kernel_rem_pio2+0x334>)
 8008cee:	ec51 0b10 	vmov	r0, r1, d0
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 fc80 	bl	80005f8 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fac2 	bl	8000288 <__aeabi_dsub>
 8008d04:	460f      	mov	r7, r1
 8008d06:	4606      	mov	r6, r0
 8008d08:	f7f7 ff26 	bl	8000b58 <__aeabi_d2iz>
 8008d0c:	9007      	str	r0, [sp, #28]
 8008d0e:	f7f7 fc09 	bl	8000524 <__aeabi_i2d>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	f7f7 fab5 	bl	8000288 <__aeabi_dsub>
 8008d1e:	f1ba 0f00 	cmp.w	sl, #0
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	dd70      	ble.n	8008e0a <__kernel_rem_pio2+0x252>
 8008d28:	1e62      	subs	r2, r4, #1
 8008d2a:	ab0c      	add	r3, sp, #48	; 0x30
 8008d2c:	9d07      	ldr	r5, [sp, #28]
 8008d2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008d32:	f1ca 0118 	rsb	r1, sl, #24
 8008d36:	fa40 f301 	asr.w	r3, r0, r1
 8008d3a:	441d      	add	r5, r3
 8008d3c:	408b      	lsls	r3, r1
 8008d3e:	1ac0      	subs	r0, r0, r3
 8008d40:	ab0c      	add	r3, sp, #48	; 0x30
 8008d42:	9507      	str	r5, [sp, #28]
 8008d44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008d48:	f1ca 0317 	rsb	r3, sl, #23
 8008d4c:	fa40 f303 	asr.w	r3, r0, r3
 8008d50:	9302      	str	r3, [sp, #8]
 8008d52:	9b02      	ldr	r3, [sp, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd66      	ble.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008d58:	9b07      	ldr	r3, [sp, #28]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	9307      	str	r3, [sp, #28]
 8008d60:	4615      	mov	r5, r2
 8008d62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008d66:	4294      	cmp	r4, r2
 8008d68:	f300 8099 	bgt.w	8008e9e <__kernel_rem_pio2+0x2e6>
 8008d6c:	f1ba 0f00 	cmp.w	sl, #0
 8008d70:	dd07      	ble.n	8008d82 <__kernel_rem_pio2+0x1ca>
 8008d72:	f1ba 0f01 	cmp.w	sl, #1
 8008d76:	f000 80a5 	beq.w	8008ec4 <__kernel_rem_pio2+0x30c>
 8008d7a:	f1ba 0f02 	cmp.w	sl, #2
 8008d7e:	f000 80c1 	beq.w	8008f04 <__kernel_rem_pio2+0x34c>
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d14e      	bne.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008d88:	4632      	mov	r2, r6
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	4958      	ldr	r1, [pc, #352]	; (8008ef0 <__kernel_rem_pio2+0x338>)
 8008d8e:	2000      	movs	r0, #0
 8008d90:	f7f7 fa7a 	bl	8000288 <__aeabi_dsub>
 8008d94:	4606      	mov	r6, r0
 8008d96:	460f      	mov	r7, r1
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	d044      	beq.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008ee0 <__kernel_rem_pio2+0x328>
 8008da2:	f000 fb91 	bl	80094c8 <scalbn>
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	ec53 2b10 	vmov	r2, r3, d0
 8008dae:	f7f7 fa6b 	bl	8000288 <__aeabi_dsub>
 8008db2:	4606      	mov	r6, r0
 8008db4:	460f      	mov	r7, r1
 8008db6:	e036      	b.n	8008e26 <__kernel_rem_pio2+0x26e>
 8008db8:	4b4e      	ldr	r3, [pc, #312]	; (8008ef4 <__kernel_rem_pio2+0x33c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 fc1a 	bl	80005f8 <__aeabi_dmul>
 8008dc4:	f7f7 fec8 	bl	8000b58 <__aeabi_d2iz>
 8008dc8:	f7f7 fbac 	bl	8000524 <__aeabi_i2d>
 8008dcc:	4b4a      	ldr	r3, [pc, #296]	; (8008ef8 <__kernel_rem_pio2+0x340>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4689      	mov	r9, r1
 8008dd4:	f7f7 fc10 	bl	80005f8 <__aeabi_dmul>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fa52 	bl	8000288 <__aeabi_dsub>
 8008de4:	f7f7 feb8 	bl	8000b58 <__aeabi_d2iz>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	f843 0b04 	str.w	r0, [r3], #4
 8008dee:	3d01      	subs	r5, #1
 8008df0:	9302      	str	r3, [sp, #8]
 8008df2:	ab70      	add	r3, sp, #448	; 0x1c0
 8008df4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	f7f7 fa44 	bl	800028c <__adddf3>
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	e75b      	b.n	8008cc2 <__kernel_rem_pio2+0x10a>
 8008e0a:	d105      	bne.n	8008e18 <__kernel_rem_pio2+0x260>
 8008e0c:	1e63      	subs	r3, r4, #1
 8008e0e:	aa0c      	add	r2, sp, #48	; 0x30
 8008e10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e14:	15c3      	asrs	r3, r0, #23
 8008e16:	e79b      	b.n	8008d50 <__kernel_rem_pio2+0x198>
 8008e18:	4b38      	ldr	r3, [pc, #224]	; (8008efc <__kernel_rem_pio2+0x344>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f7f7 fe72 	bl	8000b04 <__aeabi_dcmpge>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d139      	bne.n	8008e98 <__kernel_rem_pio2+0x2e0>
 8008e24:	9002      	str	r0, [sp, #8]
 8008e26:	2200      	movs	r2, #0
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f000 80b4 	beq.w	8008fa0 <__kernel_rem_pio2+0x3e8>
 8008e38:	f104 3bff 	add.w	fp, r4, #4294967295
 8008e3c:	465b      	mov	r3, fp
 8008e3e:	2200      	movs	r2, #0
 8008e40:	9904      	ldr	r1, [sp, #16]
 8008e42:	428b      	cmp	r3, r1
 8008e44:	da65      	bge.n	8008f12 <__kernel_rem_pio2+0x35a>
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	d07b      	beq.n	8008f42 <__kernel_rem_pio2+0x38a>
 8008e4a:	ab0c      	add	r3, sp, #48	; 0x30
 8008e4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008e50:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80a0 	beq.w	8008f9a <__kernel_rem_pio2+0x3e2>
 8008e5a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008ee0 <__kernel_rem_pio2+0x328>
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f000 fb32 	bl	80094c8 <scalbn>
 8008e64:	4f23      	ldr	r7, [pc, #140]	; (8008ef4 <__kernel_rem_pio2+0x33c>)
 8008e66:	ec55 4b10 	vmov	r4, r5, d0
 8008e6a:	46d8      	mov	r8, fp
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	f1b8 0f00 	cmp.w	r8, #0
 8008e72:	f280 80cf 	bge.w	8009014 <__kernel_rem_pio2+0x45c>
 8008e76:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008ed8 <__kernel_rem_pio2+0x320>
 8008e7a:	465f      	mov	r7, fp
 8008e7c:	f04f 0800 	mov.w	r8, #0
 8008e80:	2f00      	cmp	r7, #0
 8008e82:	f2c0 80fd 	blt.w	8009080 <__kernel_rem_pio2+0x4c8>
 8008e86:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e88:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008f00 <__kernel_rem_pio2+0x348>
 8008e8c:	ec55 4b18 	vmov	r4, r5, d8
 8008e90:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008e94:	2600      	movs	r6, #0
 8008e96:	e0e5      	b.n	8009064 <__kernel_rem_pio2+0x4ac>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	9302      	str	r3, [sp, #8]
 8008e9c:	e75c      	b.n	8008d58 <__kernel_rem_pio2+0x1a0>
 8008e9e:	f8db 3000 	ldr.w	r3, [fp]
 8008ea2:	b955      	cbnz	r5, 8008eba <__kernel_rem_pio2+0x302>
 8008ea4:	b123      	cbz	r3, 8008eb0 <__kernel_rem_pio2+0x2f8>
 8008ea6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008eaa:	f8cb 3000 	str.w	r3, [fp]
 8008eae:	2301      	movs	r3, #1
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	f10b 0b04 	add.w	fp, fp, #4
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	e755      	b.n	8008d66 <__kernel_rem_pio2+0x1ae>
 8008eba:	1acb      	subs	r3, r1, r3
 8008ebc:	f8cb 3000 	str.w	r3, [fp]
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	e7f5      	b.n	8008eb0 <__kernel_rem_pio2+0x2f8>
 8008ec4:	1e62      	subs	r2, r4, #1
 8008ec6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ed0:	a90c      	add	r1, sp, #48	; 0x30
 8008ed2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008ed6:	e754      	b.n	8008d82 <__kernel_rem_pio2+0x1ca>
	...
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	08009ce8 	.word	0x08009ce8
 8008eec:	40200000 	.word	0x40200000
 8008ef0:	3ff00000 	.word	0x3ff00000
 8008ef4:	3e700000 	.word	0x3e700000
 8008ef8:	41700000 	.word	0x41700000
 8008efc:	3fe00000 	.word	0x3fe00000
 8008f00:	08009ca8 	.word	0x08009ca8
 8008f04:	1e62      	subs	r2, r4, #1
 8008f06:	ab0c      	add	r3, sp, #48	; 0x30
 8008f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f10:	e7de      	b.n	8008ed0 <__kernel_rem_pio2+0x318>
 8008f12:	a90c      	add	r1, sp, #48	; 0x30
 8008f14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	e790      	b.n	8008e40 <__kernel_rem_pio2+0x288>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d0fa      	beq.n	8008f1e <__kernel_rem_pio2+0x366>
 8008f28:	9a08      	ldr	r2, [sp, #32]
 8008f2a:	18e3      	adds	r3, r4, r3
 8008f2c:	18a6      	adds	r6, r4, r2
 8008f2e:	aa20      	add	r2, sp, #128	; 0x80
 8008f30:	1c65      	adds	r5, r4, #1
 8008f32:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	42ab      	cmp	r3, r5
 8008f3c:	da04      	bge.n	8008f48 <__kernel_rem_pio2+0x390>
 8008f3e:	461c      	mov	r4, r3
 8008f40:	e6b5      	b.n	8008cae <__kernel_rem_pio2+0xf6>
 8008f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f44:	2301      	movs	r3, #1
 8008f46:	e7eb      	b.n	8008f20 <__kernel_rem_pio2+0x368>
 8008f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f4e:	f7f7 fae9 	bl	8000524 <__aeabi_i2d>
 8008f52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f58:	46b3      	mov	fp, r6
 8008f5a:	461c      	mov	r4, r3
 8008f5c:	2700      	movs	r7, #0
 8008f5e:	f04f 0800 	mov.w	r8, #0
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	9b06      	ldr	r3, [sp, #24]
 8008f68:	429f      	cmp	r7, r3
 8008f6a:	dd06      	ble.n	8008f7a <__kernel_rem_pio2+0x3c2>
 8008f6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f72:	e9c3 8900 	strd	r8, r9, [r3]
 8008f76:	3501      	adds	r5, #1
 8008f78:	e7de      	b.n	8008f38 <__kernel_rem_pio2+0x380>
 8008f7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f82:	f7f7 fb39 	bl	80005f8 <__aeabi_dmul>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	f7f7 f97d 	bl	800028c <__adddf3>
 8008f92:	3701      	adds	r7, #1
 8008f94:	4680      	mov	r8, r0
 8008f96:	4689      	mov	r9, r1
 8008f98:	e7e5      	b.n	8008f66 <__kernel_rem_pio2+0x3ae>
 8008f9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f9e:	e754      	b.n	8008e4a <__kernel_rem_pio2+0x292>
 8008fa0:	ec47 6b10 	vmov	d0, r6, r7
 8008fa4:	f1ca 0000 	rsb	r0, sl, #0
 8008fa8:	f000 fa8e 	bl	80094c8 <scalbn>
 8008fac:	ec57 6b10 	vmov	r6, r7, d0
 8008fb0:	4b9f      	ldr	r3, [pc, #636]	; (8009230 <__kernel_rem_pio2+0x678>)
 8008fb2:	ee10 0a10 	vmov	r0, s0
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4639      	mov	r1, r7
 8008fba:	f7f7 fda3 	bl	8000b04 <__aeabi_dcmpge>
 8008fbe:	b300      	cbz	r0, 8009002 <__kernel_rem_pio2+0x44a>
 8008fc0:	4b9c      	ldr	r3, [pc, #624]	; (8009234 <__kernel_rem_pio2+0x67c>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	f7f7 fdc4 	bl	8000b58 <__aeabi_d2iz>
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	f7f7 faa7 	bl	8000524 <__aeabi_i2d>
 8008fd6:	4b96      	ldr	r3, [pc, #600]	; (8009230 <__kernel_rem_pio2+0x678>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7f7 f94f 	bl	8000288 <__aeabi_dsub>
 8008fea:	f7f7 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8008fee:	f104 0b01 	add.w	fp, r4, #1
 8008ff2:	ab0c      	add	r3, sp, #48	; 0x30
 8008ff4:	f10a 0a18 	add.w	sl, sl, #24
 8008ff8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008ffc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009000:	e72b      	b.n	8008e5a <__kernel_rem_pio2+0x2a2>
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	f7f7 fda7 	bl	8000b58 <__aeabi_d2iz>
 800900a:	ab0c      	add	r3, sp, #48	; 0x30
 800900c:	46a3      	mov	fp, r4
 800900e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009012:	e722      	b.n	8008e5a <__kernel_rem_pio2+0x2a2>
 8009014:	ab70      	add	r3, sp, #448	; 0x1c0
 8009016:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800901a:	ab0c      	add	r3, sp, #48	; 0x30
 800901c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009020:	f7f7 fa80 	bl	8000524 <__aeabi_i2d>
 8009024:	4622      	mov	r2, r4
 8009026:	462b      	mov	r3, r5
 8009028:	f7f7 fae6 	bl	80005f8 <__aeabi_dmul>
 800902c:	4632      	mov	r2, r6
 800902e:	e9c9 0100 	strd	r0, r1, [r9]
 8009032:	463b      	mov	r3, r7
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009040:	4604      	mov	r4, r0
 8009042:	460d      	mov	r5, r1
 8009044:	e713      	b.n	8008e6e <__kernel_rem_pio2+0x2b6>
 8009046:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800904a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 f917 	bl	800028c <__adddf3>
 800905e:	3601      	adds	r6, #1
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	429e      	cmp	r6, r3
 8009068:	dc01      	bgt.n	800906e <__kernel_rem_pio2+0x4b6>
 800906a:	45b0      	cmp	r8, r6
 800906c:	daeb      	bge.n	8009046 <__kernel_rem_pio2+0x48e>
 800906e:	ab48      	add	r3, sp, #288	; 0x120
 8009070:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009074:	e9c3 4500 	strd	r4, r5, [r3]
 8009078:	3f01      	subs	r7, #1
 800907a:	f108 0801 	add.w	r8, r8, #1
 800907e:	e6ff      	b.n	8008e80 <__kernel_rem_pio2+0x2c8>
 8009080:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009082:	2b02      	cmp	r3, #2
 8009084:	dc0b      	bgt.n	800909e <__kernel_rem_pio2+0x4e6>
 8009086:	2b00      	cmp	r3, #0
 8009088:	dc6e      	bgt.n	8009168 <__kernel_rem_pio2+0x5b0>
 800908a:	d045      	beq.n	8009118 <__kernel_rem_pio2+0x560>
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	f003 0007 	and.w	r0, r3, #7
 8009092:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009096:	ecbd 8b02 	vpop	{d8}
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d1f3      	bne.n	800908c <__kernel_rem_pio2+0x4d4>
 80090a4:	ab48      	add	r3, sp, #288	; 0x120
 80090a6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80090aa:	46d0      	mov	r8, sl
 80090ac:	46d9      	mov	r9, fp
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	f1a8 0808 	sub.w	r8, r8, #8
 80090b6:	dc64      	bgt.n	8009182 <__kernel_rem_pio2+0x5ca>
 80090b8:	465c      	mov	r4, fp
 80090ba:	2c01      	cmp	r4, #1
 80090bc:	f1aa 0a08 	sub.w	sl, sl, #8
 80090c0:	dc7e      	bgt.n	80091c0 <__kernel_rem_pio2+0x608>
 80090c2:	2000      	movs	r0, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	f1bb 0f01 	cmp.w	fp, #1
 80090ca:	f300 8097 	bgt.w	80091fc <__kernel_rem_pio2+0x644>
 80090ce:	9b02      	ldr	r3, [sp, #8]
 80090d0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80090d4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 8099 	bne.w	8009210 <__kernel_rem_pio2+0x658>
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	e9c3 5600 	strd	r5, r6, [r3]
 80090e4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80090e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80090ec:	e7ce      	b.n	800908c <__kernel_rem_pio2+0x4d4>
 80090ee:	ab48      	add	r3, sp, #288	; 0x120
 80090f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 f8c8 	bl	800028c <__adddf3>
 80090fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009100:	f1bb 0f00 	cmp.w	fp, #0
 8009104:	daf3      	bge.n	80090ee <__kernel_rem_pio2+0x536>
 8009106:	9b02      	ldr	r3, [sp, #8]
 8009108:	b113      	cbz	r3, 8009110 <__kernel_rem_pio2+0x558>
 800910a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800910e:	4619      	mov	r1, r3
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	e9c3 0100 	strd	r0, r1, [r3]
 8009116:	e7b9      	b.n	800908c <__kernel_rem_pio2+0x4d4>
 8009118:	2000      	movs	r0, #0
 800911a:	2100      	movs	r1, #0
 800911c:	e7f0      	b.n	8009100 <__kernel_rem_pio2+0x548>
 800911e:	ab48      	add	r3, sp, #288	; 0x120
 8009120:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f8b0 	bl	800028c <__adddf3>
 800912c:	3c01      	subs	r4, #1
 800912e:	2c00      	cmp	r4, #0
 8009130:	daf5      	bge.n	800911e <__kernel_rem_pio2+0x566>
 8009132:	9b02      	ldr	r3, [sp, #8]
 8009134:	b1e3      	cbz	r3, 8009170 <__kernel_rem_pio2+0x5b8>
 8009136:	4602      	mov	r2, r0
 8009138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800913c:	9c01      	ldr	r4, [sp, #4]
 800913e:	e9c4 2300 	strd	r2, r3, [r4]
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800914a:	f7f7 f89d 	bl	8000288 <__aeabi_dsub>
 800914e:	ad4a      	add	r5, sp, #296	; 0x128
 8009150:	2401      	movs	r4, #1
 8009152:	45a3      	cmp	fp, r4
 8009154:	da0f      	bge.n	8009176 <__kernel_rem_pio2+0x5be>
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	b113      	cbz	r3, 8009160 <__kernel_rem_pio2+0x5a8>
 800915a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800915e:	4619      	mov	r1, r3
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009166:	e791      	b.n	800908c <__kernel_rem_pio2+0x4d4>
 8009168:	465c      	mov	r4, fp
 800916a:	2000      	movs	r0, #0
 800916c:	2100      	movs	r1, #0
 800916e:	e7de      	b.n	800912e <__kernel_rem_pio2+0x576>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	e7e2      	b.n	800913c <__kernel_rem_pio2+0x584>
 8009176:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800917a:	f7f7 f887 	bl	800028c <__adddf3>
 800917e:	3401      	adds	r4, #1
 8009180:	e7e7      	b.n	8009152 <__kernel_rem_pio2+0x59a>
 8009182:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009186:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800918a:	4620      	mov	r0, r4
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 f87b 	bl	800028c <__adddf3>
 8009196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4620      	mov	r0, r4
 80091a0:	4629      	mov	r1, r5
 80091a2:	f7f7 f871 	bl	8000288 <__aeabi_dsub>
 80091a6:	4632      	mov	r2, r6
 80091a8:	463b      	mov	r3, r7
 80091aa:	f7f7 f86f 	bl	800028c <__adddf3>
 80091ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80091b2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80091b6:	ed88 7b00 	vstr	d7, [r8]
 80091ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80091be:	e776      	b.n	80090ae <__kernel_rem_pio2+0x4f6>
 80091c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80091c4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80091c8:	4640      	mov	r0, r8
 80091ca:	4632      	mov	r2, r6
 80091cc:	463b      	mov	r3, r7
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 f85c 	bl	800028c <__adddf3>
 80091d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 f852 	bl	8000288 <__aeabi_dsub>
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	f7f7 f850 	bl	800028c <__adddf3>
 80091ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 80091f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091f4:	ed8a 7b00 	vstr	d7, [sl]
 80091f8:	3c01      	subs	r4, #1
 80091fa:	e75e      	b.n	80090ba <__kernel_rem_pio2+0x502>
 80091fc:	ab48      	add	r3, sp, #288	; 0x120
 80091fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 f841 	bl	800028c <__adddf3>
 800920a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800920e:	e75a      	b.n	80090c6 <__kernel_rem_pio2+0x50e>
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	9a01      	ldr	r2, [sp, #4]
 8009214:	601d      	str	r5, [r3, #0]
 8009216:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800921a:	605c      	str	r4, [r3, #4]
 800921c:	609f      	str	r7, [r3, #8]
 800921e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009222:	60d3      	str	r3, [r2, #12]
 8009224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009228:	6110      	str	r0, [r2, #16]
 800922a:	6153      	str	r3, [r2, #20]
 800922c:	e72e      	b.n	800908c <__kernel_rem_pio2+0x4d4>
 800922e:	bf00      	nop
 8009230:	41700000 	.word	0x41700000
 8009234:	3e700000 	.word	0x3e700000

08009238 <__kernel_sin>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	ed2d 8b04 	vpush	{d8-d9}
 8009240:	eeb0 8a41 	vmov.f32	s16, s2
 8009244:	eef0 8a61 	vmov.f32	s17, s3
 8009248:	ec55 4b10 	vmov	r4, r5, d0
 800924c:	b083      	sub	sp, #12
 800924e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009252:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009256:	9001      	str	r0, [sp, #4]
 8009258:	da06      	bge.n	8009268 <__kernel_sin+0x30>
 800925a:	ee10 0a10 	vmov	r0, s0
 800925e:	4629      	mov	r1, r5
 8009260:	f7f7 fc7a 	bl	8000b58 <__aeabi_d2iz>
 8009264:	2800      	cmp	r0, #0
 8009266:	d051      	beq.n	800930c <__kernel_sin+0xd4>
 8009268:	4622      	mov	r2, r4
 800926a:	462b      	mov	r3, r5
 800926c:	4620      	mov	r0, r4
 800926e:	4629      	mov	r1, r5
 8009270:	f7f7 f9c2 	bl	80005f8 <__aeabi_dmul>
 8009274:	4682      	mov	sl, r0
 8009276:	468b      	mov	fp, r1
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4620      	mov	r0, r4
 800927e:	4629      	mov	r1, r5
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	a341      	add	r3, pc, #260	; (adr r3, 800938c <__kernel_sin+0x154>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	4680      	mov	r8, r0
 800928c:	4689      	mov	r9, r1
 800928e:	4650      	mov	r0, sl
 8009290:	4659      	mov	r1, fp
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	a33f      	add	r3, pc, #252	; (adr r3, 8009394 <__kernel_sin+0x15c>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f6 fff4 	bl	8000288 <__aeabi_dsub>
 80092a0:	4652      	mov	r2, sl
 80092a2:	465b      	mov	r3, fp
 80092a4:	f7f7 f9a8 	bl	80005f8 <__aeabi_dmul>
 80092a8:	a33c      	add	r3, pc, #240	; (adr r3, 800939c <__kernel_sin+0x164>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f6 ffed 	bl	800028c <__adddf3>
 80092b2:	4652      	mov	r2, sl
 80092b4:	465b      	mov	r3, fp
 80092b6:	f7f7 f99f 	bl	80005f8 <__aeabi_dmul>
 80092ba:	a33a      	add	r3, pc, #232	; (adr r3, 80093a4 <__kernel_sin+0x16c>)
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f7f6 ffe2 	bl	8000288 <__aeabi_dsub>
 80092c4:	4652      	mov	r2, sl
 80092c6:	465b      	mov	r3, fp
 80092c8:	f7f7 f996 	bl	80005f8 <__aeabi_dmul>
 80092cc:	a337      	add	r3, pc, #220	; (adr r3, 80093ac <__kernel_sin+0x174>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f6 ffdb 	bl	800028c <__adddf3>
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	b9eb      	cbnz	r3, 800931a <__kernel_sin+0xe2>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4650      	mov	r0, sl
 80092e4:	4659      	mov	r1, fp
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	a325      	add	r3, pc, #148	; (adr r3, 8009380 <__kernel_sin+0x148>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f7f6 ffca 	bl	8000288 <__aeabi_dsub>
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4620      	mov	r0, r4
 8009302:	4629      	mov	r1, r5
 8009304:	f7f6 ffc2 	bl	800028c <__adddf3>
 8009308:	4604      	mov	r4, r0
 800930a:	460d      	mov	r5, r1
 800930c:	ec45 4b10 	vmov	d0, r4, r5
 8009310:	b003      	add	sp, #12
 8009312:	ecbd 8b04 	vpop	{d8-d9}
 8009316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931a:	4b1b      	ldr	r3, [pc, #108]	; (8009388 <__kernel_sin+0x150>)
 800931c:	ec51 0b18 	vmov	r0, r1, d8
 8009320:	2200      	movs	r2, #0
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	4632      	mov	r2, r6
 8009328:	ec41 0b19 	vmov	d9, r0, r1
 800932c:	463b      	mov	r3, r7
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	ec51 0b19 	vmov	r0, r1, d9
 800933e:	f7f6 ffa3 	bl	8000288 <__aeabi_dsub>
 8009342:	4652      	mov	r2, sl
 8009344:	465b      	mov	r3, fp
 8009346:	f7f7 f957 	bl	80005f8 <__aeabi_dmul>
 800934a:	ec53 2b18 	vmov	r2, r3, d8
 800934e:	f7f6 ff9b 	bl	8000288 <__aeabi_dsub>
 8009352:	a30b      	add	r3, pc, #44	; (adr r3, 8009380 <__kernel_sin+0x148>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	4606      	mov	r6, r0
 800935a:	460f      	mov	r7, r1
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f6 ff8e 	bl	800028c <__adddf3>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f6 ff86 	bl	8000288 <__aeabi_dsub>
 800937c:	e7c4      	b.n	8009308 <__kernel_sin+0xd0>
 800937e:	bf00      	nop
 8009380:	55555549 	.word	0x55555549
 8009384:	3fc55555 	.word	0x3fc55555
 8009388:	3fe00000 	.word	0x3fe00000
 800938c:	5acfd57c 	.word	0x5acfd57c
 8009390:	3de5d93a 	.word	0x3de5d93a
 8009394:	8a2b9ceb 	.word	0x8a2b9ceb
 8009398:	3e5ae5e6 	.word	0x3e5ae5e6
 800939c:	57b1fe7d 	.word	0x57b1fe7d
 80093a0:	3ec71de3 	.word	0x3ec71de3
 80093a4:	19c161d5 	.word	0x19c161d5
 80093a8:	3f2a01a0 	.word	0x3f2a01a0
 80093ac:	1110f8a6 	.word	0x1110f8a6
 80093b0:	3f811111 	.word	0x3f811111

080093b4 <fabs>:
 80093b4:	ec51 0b10 	vmov	r0, r1, d0
 80093b8:	ee10 2a10 	vmov	r2, s0
 80093bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093c0:	ec43 2b10 	vmov	d0, r2, r3
 80093c4:	4770      	bx	lr
	...

080093c8 <floor>:
 80093c8:	ec51 0b10 	vmov	r0, r1, d0
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80093d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80093d8:	2e13      	cmp	r6, #19
 80093da:	ee10 5a10 	vmov	r5, s0
 80093de:	ee10 8a10 	vmov	r8, s0
 80093e2:	460c      	mov	r4, r1
 80093e4:	dc32      	bgt.n	800944c <floor+0x84>
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	da14      	bge.n	8009414 <floor+0x4c>
 80093ea:	a333      	add	r3, pc, #204	; (adr r3, 80094b8 <floor+0xf0>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f6 ff4c 	bl	800028c <__adddf3>
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f7f7 fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80093fc:	b138      	cbz	r0, 800940e <floor+0x46>
 80093fe:	2c00      	cmp	r4, #0
 8009400:	da57      	bge.n	80094b2 <floor+0xea>
 8009402:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009406:	431d      	orrs	r5, r3
 8009408:	d001      	beq.n	800940e <floor+0x46>
 800940a:	4c2d      	ldr	r4, [pc, #180]	; (80094c0 <floor+0xf8>)
 800940c:	2500      	movs	r5, #0
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	e025      	b.n	8009460 <floor+0x98>
 8009414:	4f2b      	ldr	r7, [pc, #172]	; (80094c4 <floor+0xfc>)
 8009416:	4137      	asrs	r7, r6
 8009418:	ea01 0307 	and.w	r3, r1, r7
 800941c:	4303      	orrs	r3, r0
 800941e:	d01f      	beq.n	8009460 <floor+0x98>
 8009420:	a325      	add	r3, pc, #148	; (adr r3, 80094b8 <floor+0xf0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff31 	bl	800028c <__adddf3>
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	f7f7 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 8009432:	2800      	cmp	r0, #0
 8009434:	d0eb      	beq.n	800940e <floor+0x46>
 8009436:	2c00      	cmp	r4, #0
 8009438:	bfbe      	ittt	lt
 800943a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800943e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009442:	19a4      	addlt	r4, r4, r6
 8009444:	ea24 0407 	bic.w	r4, r4, r7
 8009448:	2500      	movs	r5, #0
 800944a:	e7e0      	b.n	800940e <floor+0x46>
 800944c:	2e33      	cmp	r6, #51	; 0x33
 800944e:	dd0b      	ble.n	8009468 <floor+0xa0>
 8009450:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009454:	d104      	bne.n	8009460 <floor+0x98>
 8009456:	ee10 2a10 	vmov	r2, s0
 800945a:	460b      	mov	r3, r1
 800945c:	f7f6 ff16 	bl	800028c <__adddf3>
 8009460:	ec41 0b10 	vmov	d0, r0, r1
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800946c:	f04f 33ff 	mov.w	r3, #4294967295
 8009470:	fa23 f707 	lsr.w	r7, r3, r7
 8009474:	4207      	tst	r7, r0
 8009476:	d0f3      	beq.n	8009460 <floor+0x98>
 8009478:	a30f      	add	r3, pc, #60	; (adr r3, 80094b8 <floor+0xf0>)
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	f7f6 ff05 	bl	800028c <__adddf3>
 8009482:	2200      	movs	r2, #0
 8009484:	2300      	movs	r3, #0
 8009486:	f7f7 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800948a:	2800      	cmp	r0, #0
 800948c:	d0bf      	beq.n	800940e <floor+0x46>
 800948e:	2c00      	cmp	r4, #0
 8009490:	da02      	bge.n	8009498 <floor+0xd0>
 8009492:	2e14      	cmp	r6, #20
 8009494:	d103      	bne.n	800949e <floor+0xd6>
 8009496:	3401      	adds	r4, #1
 8009498:	ea25 0507 	bic.w	r5, r5, r7
 800949c:	e7b7      	b.n	800940e <floor+0x46>
 800949e:	2301      	movs	r3, #1
 80094a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80094a4:	fa03 f606 	lsl.w	r6, r3, r6
 80094a8:	4435      	add	r5, r6
 80094aa:	4545      	cmp	r5, r8
 80094ac:	bf38      	it	cc
 80094ae:	18e4      	addcc	r4, r4, r3
 80094b0:	e7f2      	b.n	8009498 <floor+0xd0>
 80094b2:	2500      	movs	r5, #0
 80094b4:	462c      	mov	r4, r5
 80094b6:	e7aa      	b.n	800940e <floor+0x46>
 80094b8:	8800759c 	.word	0x8800759c
 80094bc:	7e37e43c 	.word	0x7e37e43c
 80094c0:	bff00000 	.word	0xbff00000
 80094c4:	000fffff 	.word	0x000fffff

080094c8 <scalbn>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	ec55 4b10 	vmov	r4, r5, d0
 80094ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80094d2:	4606      	mov	r6, r0
 80094d4:	462b      	mov	r3, r5
 80094d6:	b99a      	cbnz	r2, 8009500 <scalbn+0x38>
 80094d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094dc:	4323      	orrs	r3, r4
 80094de:	d036      	beq.n	800954e <scalbn+0x86>
 80094e0:	4b39      	ldr	r3, [pc, #228]	; (80095c8 <scalbn+0x100>)
 80094e2:	4629      	mov	r1, r5
 80094e4:	ee10 0a10 	vmov	r0, s0
 80094e8:	2200      	movs	r2, #0
 80094ea:	f7f7 f885 	bl	80005f8 <__aeabi_dmul>
 80094ee:	4b37      	ldr	r3, [pc, #220]	; (80095cc <scalbn+0x104>)
 80094f0:	429e      	cmp	r6, r3
 80094f2:	4604      	mov	r4, r0
 80094f4:	460d      	mov	r5, r1
 80094f6:	da10      	bge.n	800951a <scalbn+0x52>
 80094f8:	a32b      	add	r3, pc, #172	; (adr r3, 80095a8 <scalbn+0xe0>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	e03a      	b.n	8009576 <scalbn+0xae>
 8009500:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009504:	428a      	cmp	r2, r1
 8009506:	d10c      	bne.n	8009522 <scalbn+0x5a>
 8009508:	ee10 2a10 	vmov	r2, s0
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f7f6 febc 	bl	800028c <__adddf3>
 8009514:	4604      	mov	r4, r0
 8009516:	460d      	mov	r5, r1
 8009518:	e019      	b.n	800954e <scalbn+0x86>
 800951a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800951e:	460b      	mov	r3, r1
 8009520:	3a36      	subs	r2, #54	; 0x36
 8009522:	4432      	add	r2, r6
 8009524:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009528:	428a      	cmp	r2, r1
 800952a:	dd08      	ble.n	800953e <scalbn+0x76>
 800952c:	2d00      	cmp	r5, #0
 800952e:	a120      	add	r1, pc, #128	; (adr r1, 80095b0 <scalbn+0xe8>)
 8009530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009534:	da1c      	bge.n	8009570 <scalbn+0xa8>
 8009536:	a120      	add	r1, pc, #128	; (adr r1, 80095b8 <scalbn+0xf0>)
 8009538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800953c:	e018      	b.n	8009570 <scalbn+0xa8>
 800953e:	2a00      	cmp	r2, #0
 8009540:	dd08      	ble.n	8009554 <scalbn+0x8c>
 8009542:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009546:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800954a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800954e:	ec45 4b10 	vmov	d0, r4, r5
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009558:	da19      	bge.n	800958e <scalbn+0xc6>
 800955a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800955e:	429e      	cmp	r6, r3
 8009560:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009564:	dd0a      	ble.n	800957c <scalbn+0xb4>
 8009566:	a112      	add	r1, pc, #72	; (adr r1, 80095b0 <scalbn+0xe8>)
 8009568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e2      	bne.n	8009536 <scalbn+0x6e>
 8009570:	a30f      	add	r3, pc, #60	; (adr r3, 80095b0 <scalbn+0xe8>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f7 f83f 	bl	80005f8 <__aeabi_dmul>
 800957a:	e7cb      	b.n	8009514 <scalbn+0x4c>
 800957c:	a10a      	add	r1, pc, #40	; (adr r1, 80095a8 <scalbn+0xe0>)
 800957e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0b8      	beq.n	80094f8 <scalbn+0x30>
 8009586:	a10e      	add	r1, pc, #56	; (adr r1, 80095c0 <scalbn+0xf8>)
 8009588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800958c:	e7b4      	b.n	80094f8 <scalbn+0x30>
 800958e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009592:	3236      	adds	r2, #54	; 0x36
 8009594:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009598:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800959c:	4620      	mov	r0, r4
 800959e:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <scalbn+0x108>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	e7e8      	b.n	8009576 <scalbn+0xae>
 80095a4:	f3af 8000 	nop.w
 80095a8:	c2f8f359 	.word	0xc2f8f359
 80095ac:	01a56e1f 	.word	0x01a56e1f
 80095b0:	8800759c 	.word	0x8800759c
 80095b4:	7e37e43c 	.word	0x7e37e43c
 80095b8:	8800759c 	.word	0x8800759c
 80095bc:	fe37e43c 	.word	0xfe37e43c
 80095c0:	c2f8f359 	.word	0xc2f8f359
 80095c4:	81a56e1f 	.word	0x81a56e1f
 80095c8:	43500000 	.word	0x43500000
 80095cc:	ffff3cb0 	.word	0xffff3cb0
 80095d0:	3c900000 	.word	0x3c900000

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
